From jani.heikkinen at theqtcompany.com  Mon Jun  1 08:25:59 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Mon, 1 Jun 2015 06:25:59 +0000
Subject: [Development] Qt 5.4.2 final packages available
Message-ID: <DB3PR02MB0540F29AD1F6A8936EB19063E4B60@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi all,


Qt 5.4.2 final packages available for testing


Windows: http://download.qt.io/snapshots/qt/5.4/5.4.2/2015-06-01_147/

Linux: http://download.qt.io/snapshots/qt/5.4/5.4.2/2015-05-30_139/

Mac: http://download.qt.io/snapshots/qt/5.4/5.4.2/2015-05-30_122/


(src: http://download.qt.io/snapshots/qt/5.4/5.4.2/latest_src/ content still under mirroring, might still contain old src packages)


Please check the packages & inform me immediately if something is broken. We are targetting to put Qt 5.4.2 out soon, preferrably already tomorrow


br,

Jani
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150601/b25a394c/attachment.html

From frederik.gladhorn at theqtcompany.com  Mon Jun  1 10:33:22 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Mon, 1 Jun 2015 10:33:22 +0200
Subject: [Development] Breaking QtQuickControls tests
In-Reply-To: <DB5PR05MB11447FA27FDB2FE11804D605C9B70@DB5PR05MB1144.eurprd05.prod.outlook.com>
References: <DB5PR05MB11447FA27FDB2FE11804D605C9B70@DB5PR05MB1144.eurprd05.prod.outlook.com>
Message-ID: <6206030.Xx5kpxtBW0@frederik-thinkcentre-m93p>

Hello,

this mailing list is about development of Qt itself, please use intereste at qt-
project.org for user questions. Unless you are writing a new Qt module that
is... in which case more information would be appreciated.

Frederik

On Sunday, May 31, 2015 12:08:22 PM Van Looy Detlev wrote:
> Hello.
>
> For a project I am doing I need a repository which has .qml tests, it seems
> that (from the Qt sources) QtQuickControls should fit my needs. When
> running tst_controls
> (/Qt5.4.1/5.4/Src/qtquickcontrols/tests/auto/controls), all 501 test cases
> pass.
>
> What I want to do now is break (make fail) some of these test cases by
> changing some source .qml files in
> /Qt5.4.1/5.4/Src/qtquickcontrols/src/controls. So for example break
> tst_Slider.qml by changing some code from Slider.qml. However it seems no
> matter what I do to these source files, the tests always continue to pass
> unaffected.
>
> After some examination I found that no calls are actually ever being made to
> these source files, but rather they are being made to
> /Qt5.4.1/5.4/gcc/qml/QtQuick/Controls.
>
> So my question is: Is it possible to make these tests fail by changing the
> source files I mentioned? How are the source files used in the tests?

We try to embed most qml files into qrc, so that the tests are as portable as
possible. You'll most likely have to build the test and depending on your
setup run make install.

>
> I have had some success by forcing the use of the source files, so for
> example changing:
>
> from:
> var slider = Qt.createQmlObject('import QtQuick.Controls 1.2; Slider { }',
> container, '');
>
> to:
> var component = Qt.createComponent("../../../../src/controls/Slider.qml");
> var slider = component.createObject(container, {});
>
> And I was planning on using this fix for every test case, however this does
> not work for certain cases. I am also unable to just use: var slider =
> Qt.createQmlObject('import QtQuick.Controls 1.2; import
> "../../../../src/controls/" Slider { }', container, '');
>
> because this gives me errors:
> qt.network.ssl: QSslSocket: cannot resolve SSLv2_client_method
> qt.network.ssl: QSslSocket: cannot resolve SSLv2_client_method
> Qt.createQmlObject(): Component is not ready
>
> If you can tell me what I am doing wrong in my createQmlObject statement,
> that would be helpful as well!
>
> Regards,
> Detlev
>
> PS: If anyone knows about any other (OS) projects which have an amount of
> .qml tests please let me know!


From oswald.buddenhagen at theqtcompany.com  Mon Jun  1 10:48:24 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Mon, 1 Jun 2015 10:48:24 +0200
Subject: [Development] Breaking QtQuickControls tests
In-Reply-To: <DB5PR05MB11447FA27FDB2FE11804D605C9B70@DB5PR05MB1144.eurprd05.prod.outlook.com>
References: <DB5PR05MB11447FA27FDB2FE11804D605C9B70@DB5PR05MB1144.eurprd05.prod.outlook.com>
Message-ID: <20150601084824.GB20008@ugly.fritz.box>

On Sun, May 31, 2015 at 12:08:22PM +0000, Van Looy Detlev wrote:
> What I want to do now is break (make fail) some of these test cases by
> changing some source .qml files in
> /Qt5.4.1/5.4/Src/qtquickcontrols/src/controls. So for example break
> tst_Slider.qml by changing some code from Slider.qml. However it seems
> no matter what I do to these source files, the tests always continue
> to pass unaffected.
>
> After some examination I found that no calls are actually ever being
> made to these source files, but rather they are being made to
> /Qt5.4.1/5.4/gcc/qml/QtQuick/Controls.
>
> So my question is: Is it possible to make these tests fail by changing
> the source files I mentioned? How are the source files used in the
> tests?
>
you obviously need to install the modified files into a location where
the tests expect them. i wouldn't recommend overwriting the pre-built
installation, but make a fresh build (of at least that module and its
tests).


From kalle.viironen at theqtcompany.com  Mon Jun  1 11:46:23 2015
From: kalle.viironen at theqtcompany.com (Viironen Kalle)
Date: Mon, 1 Jun 2015 09:46:23 +0000
Subject: [Development] New Module for Serial Buses
In-Reply-To: <trinity-6ebf2e4c-852e-4a21-aa02-91bfc97ddc5b-1433056458965@3capp-gmx-bs22>
References: <D18A4DA5.26598%kalle.viironen@theqtcompany.com>
	<D18A4E25.265A0%kalle.viironen@theqtcompany.com>
	<D18A5091.265CA%kalle.viironen@theqtcompany.com>
	<201505281335.17912.marc.mutz@kdab.com>
	<trinity-6ebf2e4c-852e-4a21-aa02-91bfc97ddc5b-1433056458965@3capp-gmx-bs22>
Message-ID: <D192016C.602C%kalle.viironen@theqtcompany.com>

Since there actually was no objections towards creating a new module for
serial buses I propose that we?ll just go ahead and create a new Qt Serial
Bus module and then continue discussion around first commits. Would this
be acceptable approach? I believe that getting actual code for the basis
of discussions makes things a lot easier.

Br,
Kalle Viironen


From tuukka.turunen at theqtcompany.com  Mon Jun  1 13:04:09 2015
From: tuukka.turunen at theqtcompany.com (Turunen Tuukka)
Date: Mon, 1 Jun 2015 11:04:09 +0000
Subject: [Development] New Module for Serial Buses
In-Reply-To: <D192016C.602C%kalle.viironen@theqtcompany.com>
References: <D18A4DA5.26598%kalle.viironen@theqtcompany.com>
	<D18A4E25.265A0%kalle.viironen@theqtcompany.com>
	<D18A5091.265CA%kalle.viironen@theqtcompany.com>
	<201505281335.17912.marc.mutz@kdab.com>
	<trinity-6ebf2e4c-852e-4a21-aa02-91bfc97ddc5b-1433056458965@3capp-gmx-bs22>
	<D192016C.602C%kalle.viironen@theqtcompany.com>
Message-ID: <VI1PR02MB076617CF02607B62048CD3D9F6B60@VI1PR02MB0766.eurprd02.prod.outlook.com>


> -----Original Message-----
> From: development-bounces+tuukka.turunen=theqtcompany.com at qt-
> project.org [mailto:development-
> bounces+tuukka.turunen=theqtcompany.com at qt-project.org] On Behalf Of
> Viironen Kalle
> Sent: 1. kes?kuuta 2015 12:46
> To: development at qt-project.org
> Subject: Re: [Development] New Module for Serial Buses
>
> Since there actually was no objections towards creating a new module for
> serial buses I propose that we?ll just go ahead and create a new Qt Serial Bus
> module and then continue discussion around first commits. Would this be
> acceptable approach? I believe that getting actual code for the basis of
> discussions makes things a lot easier.
>

Sounds good to me.

--
Tuukka


From soraya.santanaf at gmail.com  Mon Jun  1 13:10:00 2015
From: soraya.santanaf at gmail.com (Soraya Santana de la Fe)
Date: Mon, 1 Jun 2015 13:10:00 +0200
Subject: [Development] Qt 4.8.6 win32-msvc2008 compilation. error
 LNK2001: unresolved external symbol __imp__q_atomic_increment
In-Reply-To: <2612474.P34QN9q8Wu@tjmaciei-mobl4>
References: <CAFA1cDdOr4HaHD__V-cMObU-3UBcQ-GLdSf57tsVCsEF8F9t5A@mail.gmail.com>
	<2612474.P34QN9q8Wu@tjmaciei-mobl4>
Message-ID: <CAFA1cDfo-CpFfVm34ZkSgMhnfmMShNmMNpEQcDf=Si-57MdTFw@mail.gmail.com>

Thanks for your answers!

All those Link errors I reported are found when using a Q_OBJECT macro in
my classes. No idea what is happening, even installing using a qt installer
I am getting the same errors so it is not comming from my qt compilation.


Should I check/set any environment variable. I have also tested setting
QMAKESPEC to win32-msvc2008 explicitly but nothing works.


Thankyou all!

2015-05-29 16:53 GMT+02:00 Thiago Macieira <thiago.macieira at intel.com>:

> On Friday 29 May 2015 10:55:40 Soraya Santana de la Fe wrote:
> > xx.obj : error LNK2019: unresolved external symbol
> > __imp__q_atomic_increment referenced in function ...
> > yy.obj : error LNK2001: unresolved external symbol
> __imp__q_atomic_increment
> > xx.obj : error LNK2019: unresolved external symbol
> > __imp__q_atomic_decrement referenced in function "public: __thiscall ...
> > yy.obj : error LNK2001: unresolved external symbol
> __imp__q_atomic_decrement
> >
> > It seems that something is not being exported or not compiled for my
> > windows platform. Any ideas would be really appreciated.
>
> Find out why this function was called in the first place. Nothing should
> try to
> call it at all on Windows, much less with MSVC.
> --
> Thiago Macieira - thiago.macieira (AT) intel.com
>   Software Architect - Intel Open Source Technology Center
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
>



--
Soraya Santana de la Fe
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150601/73dd5564/attachment.html

From oswald.buddenhagen at theqtcompany.com  Mon Jun  1 13:48:41 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Mon, 1 Jun 2015 13:48:41 +0200
Subject: [Development] New Module for Serial Buses
In-Reply-To: <VI1PR02MB076617CF02607B62048CD3D9F6B60@VI1PR02MB0766.eurprd02.prod.outlook.com>
References: <D18A4DA5.26598%kalle.viironen@theqtcompany.com>
	<D18A4E25.265A0%kalle.viironen@theqtcompany.com>
	<D18A5091.265CA%kalle.viironen@theqtcompany.com>
	<201505281335.17912.marc.mutz@kdab.com>
	<trinity-6ebf2e4c-852e-4a21-aa02-91bfc97ddc5b-1433056458965@3capp-gmx-bs22>
	<D192016C.602C%kalle.viironen@theqtcompany.com>
	<VI1PR02MB076617CF02607B62048CD3D9F6B60@VI1PR02MB0766.eurprd02.prod.outlook.com>
Message-ID: <20150601114841.GB25714@troll08.it.local>

On Mon, Jun 01, 2015 at 11:04:09AM +0000, Turunen Tuukka wrote:
> > -----Original Message-----
> > From: development-bounces+tuukka.turunen=theqtcompany.com at qt-
> > project.org [mailto:development-
> > bounces+tuukka.turunen=theqtcompany.com at qt-project.org] On Behalf Of
> > Viironen Kalle
> > Sent: 1. kes?kuuta 2015 12:46
> > To: development at qt-project.org
> > Subject: Re: [Development] New Module for Serial Buses
> >
> > Since there actually was no objections towards creating a new module for
> > serial buses I propose that we?ll just go ahead and create a new Qt Serial Bus
> > module and then continue discussion around first commits. Would this be
> > acceptable approach? I believe that getting actual code for the basis of
> > discussions makes things a lot easier.
> >
>
> Sounds good to me.
>
https://codereview.qt-project.org/#/admin/projects/qt/qtserialbus

From soraya.santanaf at gmail.com  Mon Jun  1 14:50:49 2015
From: soraya.santanaf at gmail.com (Soraya Santana de la Fe)
Date: Mon, 1 Jun 2015 14:50:49 +0200
Subject: [Development] Qt 4.8.6 win32-msvc2008 compilation. error
 LNK2001: unresolved external symbol __imp__q_atomic_increment
In-Reply-To: <CAFA1cDfo-CpFfVm34ZkSgMhnfmMShNmMNpEQcDf=Si-57MdTFw@mail.gmail.com>
References: <CAFA1cDdOr4HaHD__V-cMObU-3UBcQ-GLdSf57tsVCsEF8F9t5A@mail.gmail.com>
	<2612474.P34QN9q8Wu@tjmaciei-mobl4>
	<CAFA1cDfo-CpFfVm34ZkSgMhnfmMShNmMNpEQcDf=Si-57MdTFw@mail.gmail.com>
Message-ID: <CAFA1cDfjFAz_dcN702yGczo8ehqOH2Nht2vaaCcwTRgQOCqcEg@mail.gmail.com>

Dear all.
Goolging I have found this entry in a forum:
http://www.qtfr.org/viewtopic.php?id=12475
So I have defined QT_ARCH_WINDOWS for my project and it compiles and links
correctly!

My doubt is: Why is this define needed for my project? I have worked
previously with QT and I had never needed this.

Thanks in advance!

2015-06-01 13:10 GMT+02:00 Soraya Santana de la Fe <
soraya.santanaf at gmail.com>:

> Thanks for your answers!
>
> All those Link errors I reported are found when using a Q_OBJECT macro in
> my classes. No idea what is happening, even installing using a qt installer
> I am getting the same errors so it is not comming from my qt compilation.
>
>
> Should I check/set any environment variable. I have also tested setting
> QMAKESPEC to win32-msvc2008 explicitly but nothing works.
>
>
> Thankyou all!
>
> 2015-05-29 16:53 GMT+02:00 Thiago Macieira <thiago.macieira at intel.com>:
>
>> On Friday 29 May 2015 10:55:40 Soraya Santana de la Fe wrote:
>> > xx.obj : error LNK2019: unresolved external symbol
>> > __imp__q_atomic_increment referenced in function ...
>> > yy.obj : error LNK2001: unresolved external symbol
>> __imp__q_atomic_increment
>> > xx.obj : error LNK2019: unresolved external symbol
>> > __imp__q_atomic_decrement referenced in function "public: __thiscall ...
>> > yy.obj : error LNK2001: unresolved external symbol
>> __imp__q_atomic_decrement
>> >
>> > It seems that something is not being exported or not compiled for my
>> > windows platform. Any ideas would be really appreciated.
>>
>> Find out why this function was called in the first place. Nothing should
>> try to
>> call it at all on Windows, much less with MSVC.
>> --
>> Thiago Macieira - thiago.macieira (AT) intel.com
>>   Software Architect - Intel Open Source Technology Center
>>
>> _______________________________________________
>> Development mailing list
>> Development at qt-project.org
>> http://lists.qt-project.org/mailman/listinfo/development
>>
>
>
>
> --
> Soraya Santana de la Fe
>
>
>


--
Soraya Santana de la Fe
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150601/ffb7c8ce/attachment.html

From thiago.macieira at intel.com  Mon Jun  1 18:09:10 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 01 Jun 2015 09:09:10 -0700
Subject: [Development] Qt 4.8.6 win32-msvc2008 compilation. error
	LNK2001: unresolved external symbol __imp__q_atomic_increment
In-Reply-To: <CAFA1cDfjFAz_dcN702yGczo8ehqOH2Nht2vaaCcwTRgQOCqcEg@mail.gmail.com>
References: <CAFA1cDdOr4HaHD__V-cMObU-3UBcQ-GLdSf57tsVCsEF8F9t5A@mail.gmail.com>
	<CAFA1cDfo-CpFfVm34ZkSgMhnfmMShNmMNpEQcDf=Si-57MdTFw@mail.gmail.com>
	<CAFA1cDfjFAz_dcN702yGczo8ehqOH2Nht2vaaCcwTRgQOCqcEg@mail.gmail.com>
Message-ID: <2371324.CKLuunueQm@tjmaciei-mobl4>

On Monday 01 June 2015 14:50:49 Soraya Santana de la Fe wrote:
> My doubt is: Why is this define needed for my project? I have worked
> previously with QT and I had never needed this.

It shouldn't be. That should already be defined in qconfig.h.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Mon Jun  1 19:25:33 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 01 Jun 2015 10:25:33 -0700
Subject: [Development] QTextStream::readLine(0) is an ambiguous overload
	in 5.5
In-Reply-To: <6286945.6OUBYr9m8F@simon-sx58>
References: <5b4cbbc1-0ef4-49bc-a859-e48ee8310a5f@kde.org>
	<2768888.intpBgaQPU@tjmaciei-mobl4> <6286945.6OUBYr9m8F@simon-sx58>
Message-ID: <3431099.bztMS3EM60@tjmaciei-mobl4>

On Monday 18 May 2015 09:15:01 Simon Hausmann wrote:
> > Since we're not going to implement that, I suggest renaming the function
> > to
> > "readLineInto" to solve the ambiguity.
>
> I think that's a good idea.

Has anyone done this?

Don't expect me to do it.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From oswald.buddenhagen at theqtcompany.com  Mon Jun  1 19:55:11 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Mon, 1 Jun 2015 19:55:11 +0200
Subject: [Development] Branching '5.5.0' from '5.5' started
In-Reply-To: <1432539065503.38739@theqtcompany.com>
References: <1432539065503.38739@theqtcompany.com>
Message-ID: <20150601175511.GA29491@troll08.it.local>

On Mon, May 25, 2015 at 07:31:05AM +0000, Heikkinen Jani wrote:
> Branching '5.5.0' from '5.5' is ongoing. '5.5.0' branch is created &
> you should start using it for changes targeted to Qt 5.5.0 release.
> Downmerge from '5.5' to '5.5.0' will be done next Monday (1st June) so
> there should be enough time to finalize ongoing changes in '5.5' &
> start using '5.5.0'.
>
this is completed now.

> After downmerge next Monday '5.5' branch will be for '5.5.1' release.
>
keep that in mind. *don't* stage your critical fixes for 5.5. as usual,
no cherry-picks - what lands in 5.5 now has missed 5.5.0.

> As usual Ossi is taking re-targeting requests from '5.5' to '5.5.0' as well.

> Please remember: no any nice-to-have changes in anymore!
>
and now only critical fixes. staging is restricted to the release team.

From jani.heikkinen at theqtcompany.com  Tue Jun  2 12:13:31 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Tue, 2 Jun 2015 10:13:31 +0000
Subject: [Development] Qt 5.4.2, Qt Creator 3.4.1,
	IFW 2.0.1 & VKB 1.3 released
In-Reply-To: <1424778556842.46044@theqtcompany.com>
References: <1424778556842.46044@theqtcompany.com>
Message-ID: <DB3PR02MB054092F65B19E60BFAB7AEF4E4B50@DB3PR02MB0540.eurprd02.prod.outlook.com>



Hi all,

We are happy to announce that Qt 5.4.2, Qt Creator 3.4.1, VKB 1.3 and IFW 2.0.1 is released today,see
http://blog.qt.io/blog/2015/06/02/qt-5-4-2-released/
http://blog.qt.io/blog/2015/06/02/qt-creator-3-4-1-released/
http://blog.qt.io/blog/2015/06/02/qt-virtual-keyboard-1-3-released-adding-japanese-and-korean-language-support/
http://blog.qt.io/blog/2015/06/02/qt-installer-framework-2-0-1-released/


Big thanks to everyone who have helped to make the releases happen!

Br,
Jani

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150602/ef12ebb1/attachment.html

From simon.hausmann at theqtcompany.com  Tue Jun  2 16:23:03 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Tue, 2 Jun 2015 16:23:03 +0200
Subject: [Development] QTextStream::readLine(0) is an ambiguous overload
	in 5.5
In-Reply-To: <3431099.bztMS3EM60@tjmaciei-mobl4>
References: <5b4cbbc1-0ef4-49bc-a859-e48ee8310a5f@kde.org>
	<6286945.6OUBYr9m8F@simon-sx58> <3431099.bztMS3EM60@tjmaciei-mobl4>
Message-ID: <26061580.74xWAQfNZj@simon-sx58>

On Monday, June 01, 2015 10:25:33 AM Thiago Macieira wrote:
> On Monday 18 May 2015 09:15:01 Simon Hausmann wrote:
> > > Since we're not going to implement that, I suggest renaming the function
> > > to
> > > "readLineInto" to solve the ambiguity.
> >
> > I think that's a good idea.
>
> Has anyone done this?
>
> Don't expect me to do it.

I've made a change that renames the function:

	https://codereview.qt-project.org/#/c/113538/


Simon

From thiago.macieira at intel.com  Tue Jun  2 23:02:16 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 02 Jun 2015 14:02:16 -0700
Subject: [Development] 5.5 third-party update
Message-ID: <2270286.UJrcjuD3Ax@tjmaciei-mobl4>

Have we done it?
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4447 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150602/9048fe34/attachment.bin

From rpzrpzrpz at gmail.com  Tue Jun  2 23:44:59 2015
From: rpzrpzrpz at gmail.com (rpzrpzrpz at gmail.com)
Date: Tue, 02 Jun 2015 15:44:59 -0600
Subject: [Development] qqmlengine/qqmlimport access
In-Reply-To: <CAChgv6pQA2-dEJ9_kb3NhnFGhFY-crP5rGCeHdLDSgx0L-ObZw@mail.gmail.com>
References: <CAChgv6pQA2-dEJ9_kb3NhnFGhFY-crP5rGCeHdLDSgx0L-ObZw@mail.gmail.com>
Message-ID: <556E23DB.7060107@gmail.com>

On 5/29/2015 9:53 AM, mark diener wrote:
> Hello dev list:
>
> Qt 5.4.1.
>
> At the top of qqmlimport_p.h, it discusses how it is NOT part of the QT
> API and subject to change.
>
> In qqmlengine.h, there is addImportPath( ) to allow qqmlimport to
> resolve types using a module/qmldir file.
>
> But ByteArray derived components have no equivalent treatment:
>
>
> QByteArray  gbytes("import  QtQuick  2.4\n  Rectangle  {  objectName:\"myRecto\"\n  color:  \"blue\"  }");
>
> QQmlComponent  gcomponent(&gengine)  ;
>
> gcomponent.setData(gbytes,QUrl("Myrectangle.qml"));
>
>
> How to add the QQmlComponent in the QQmlEngine import database so that
> QQmlImports::addImplicitImport( ) can resolve component type?
>
> There is no new C++ type here, just a new component defined in QML, so
> qmlRegisterType<C++type>(bla,bla,bla) is a fail.
>
> Or maybe there is a non-qmldir file method to use importExtension with
> QQmlComponent?  (qmldir file alternative)
>
> Does QQmlEngine have a public access way to achieve the following:
>
> QQmlEngine::addImportComponent(QString gname,QQmlComponent& gcomponent) ;
> QQmlEngine::removeImportComponent(QString gname) ;
>
> In QML, I could either have an importExtension()  OR an implicitImport()
> in qqmlimports.
>
> Thanks,
>
> Mark

Simon:

I think the absence of responses from the dev list indicates I have
touched on a topic dead zone that resides in your area as QML/core
maintainer.

 From what I can tell, the QML component cache and import mechanisms
lack any public access members for direct query,loading, and removal.

There are the blunt force methods of QQmlEngine->clearComponentCache()
and QQmlEngine->trimComponentCache().

Maybe after the 5.5 release, I would like to explore adding public
access member functions to QQmlEngine.h/cpp:

int QQmlEngine::loadComponent(QQmlComponent& component, QString&
importQmlName);

int QQmlEngine::clearComponent(QString& importQmlName);

bool QQmlEngine::isComponentLoaded(QString& component);

The biggest concern I see is the caveat warnings given by qqmlimport.h

Another concern I have is the Render Thread issues VS Gui thread issues.

What group of devs is current this?

Does that group even talk to strangers?

Thanks,

Mark

--
No spell checkers were harmed during the creation of this message.

From soraya.santanaf at gmail.com  Wed Jun  3 08:20:23 2015
From: soraya.santanaf at gmail.com (Soraya Santana de la Fe)
Date: Wed, 3 Jun 2015 08:20:23 +0200
Subject: [Development] Qt 4.8.6 win32-msvc2008 compilation. error
 LNK2001: unresolved external symbol __imp__q_atomic_increment
In-Reply-To: <2371324.CKLuunueQm@tjmaciei-mobl4>
References: <CAFA1cDdOr4HaHD__V-cMObU-3UBcQ-GLdSf57tsVCsEF8F9t5A@mail.gmail.com>
	<CAFA1cDfo-CpFfVm34ZkSgMhnfmMShNmMNpEQcDf=Si-57MdTFw@mail.gmail.com>
	<CAFA1cDfjFAz_dcN702yGczo8ehqOH2Nht2vaaCcwTRgQOCqcEg@mail.gmail.com>
	<2371324.CKLuunueQm@tjmaciei-mobl4>
Message-ID: <CAFA1cDeKwM7bCBFniELPPOQdDe=DvVXmc9uULMJAqzzXJY-i-Q@mail.gmail.com>

Dear all,

I have found the problem and why QT_ARCH_WINDOWS was not defined. I was
using a diferent folder for my includes, comming from a linux compilation
instead the one generated by the "make install" command of my new windows
compilation. After this I see that I cannot share the includes for two
different architectures, is that correct?

Thank you for your comments and clues that made me go in the path to solve
it.

2015-06-01 18:09 GMT+02:00 Thiago Macieira <thiago.macieira at intel.com>:

> On Monday 01 June 2015 14:50:49 Soraya Santana de la Fe wrote:
> > My doubt is: Why is this define needed for my project? I have worked
> > previously with QT and I had never needed this.
>
> It shouldn't be. That should already be defined in qconfig.h.
>
> --
> Thiago Macieira - thiago.macieira (AT) intel.com
>   Software Architect - Intel Open Source Technology Center
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
>



--
Soraya Santana de la Fe
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150603/3ecf854c/attachment-0001.html

From Lars.Knoll at theqtcompany.com  Wed Jun  3 08:28:13 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Wed, 3 Jun 2015 06:28:13 +0000
Subject: [Development] 5.5 third-party update
In-Reply-To: <2270286.UJrcjuD3Ax@tjmaciei-mobl4>
References: <2270286.UJrcjuD3Ax@tjmaciei-mobl4>
Message-ID: <D1946ABD.31A3D%lars.knoll@theqtcompany.com>

Well enough from what I?ve seen. A lot of the 3rd party modules have
received updates over the last couple of months.

Cheers,
Lars

On 02/06/15 23:02, "Thiago Macieira" <thiago.macieira at intel.com> wrote:

>Have we done it?
>--
>Thiago Macieira - thiago.macieira (AT) intel.com
>  Software Architect - Intel Open Source Technology Center


From andre at familiesomers.nl  Wed Jun  3 08:38:48 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Wed, 03 Jun 2015 08:38:48 +0200
Subject: [Development] date/time adjust for (auto) testing
Message-ID: <556EA0F8.5090906@familiesomers.nl>

Hi,

We have applications that use the current date and time at places spread
around the code. For normal operations, that works very nicely. However,
we find that for (auto) testing, it would be very convenient if we could
trick the application into believing it is some other date/time, so that
we can test if certain behaviours work the way we would like to
automatically. Currently, these tests take a lot of time because we
actually need to manually adjust the system date and time, do some
stuff, then adjust again, etc.

It would be really confortable if there was some control to set a
date/time offset (so the time keeps running) or a fixed date/time to be
returned from currentDate(), currentTime() or currentDateTime()
respectively. I guess access to such a thing does not belong in the main
Qt classes, but is really a testing tool, so perhaps it could find
refuge in QtTest somewhere. Would a contribution adding such a thing
stand any chance of being accepted, or would this be considered out of
scope or even unwanted?

An alternative might be to hook the windows kernel API, but that may be
much tricker to get right and may have unforseen consequences for the
code injected by Squish doing the actual testing.

Andr?

--


From jani.heikkinen at theqtcompany.com  Wed Jun  3 08:45:19 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Wed, 3 Jun 2015 06:45:19 +0000
Subject: [Development] Your actions needed, Qt5.5.0 RC & Final is nearing!
Message-ID: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi all,


We are quite close to Qt 5.5.0 RC & final releases. Plan is to put RC out Thu 11.6.2015 & Final Tue 23.6.2015. To be able to keep the schedule we need to make sure all real blockers are fixed in RC so that it will be really RC & there won't be so much changes between RC & Final.  So following tasks needs to be done immediately:


- Please try to fix all blockers during this week so that we can create RC packages at the beginning of next one. Blocker list here: https://bugreports.qt.io/browse/QTBUG-44654

- Please create all changes files for Qt 5.5.0 now, these should be in RC

- Someone, please run those header diffs & binary compatibility checks as soon as possible to be able to be sure there isn't problems there. This needs to be done now because possible fixes should be in RC already

- Start updating Known issues page (https://wiki.qt.io/Qt_5.5.0_Known_Issues)

- Something else?


br,

Jani
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150603/343d4a71/attachment.html

From me at the-compiler.org  Wed Jun  3 09:04:56 2015
From: me at the-compiler.org (Florian Bruhin)
Date: Wed, 3 Jun 2015 09:04:56 +0200
Subject: [Development] date/time adjust for (auto) testing
In-Reply-To: <556EA0F8.5090906@familiesomers.nl>
References: <556EA0F8.5090906@familiesomers.nl>
Message-ID: <20150603070456.GM26357@tonks>

* Andr? Somers <andre at familiesomers.nl> [2015-06-03 08:38:48 +0200]:
> We have applications that use the current date and time at places spread
> around the code. For normal operations, that works very nicely. However,
> we find that for (auto) testing, it would be very convenient if we could
> trick the application into believing it is some other date/time, so that
> we can test if certain behaviours work the way we would like to
> automatically. Currently, these tests take a lot of time because we
> actually need to manually adjust the system date and time, do some
> stuff, then adjust again, etc.
>
> It would be really confortable if there was some control to set a
> date/time offset (so the time keeps running) or a fixed date/time to be
> returned from currentDate(), currentTime() or currentDateTime()
> respectively. I guess access to such a thing does not belong in the main
> Qt classes, but is really a testing tool, so perhaps it could find
> refuge in QtTest somewhere. Would a contribution adding such a thing
> stand any chance of being accepted, or would this be considered out of
> scope or even unwanted?

FWIW there's libfaketime[1] which might be some inspiration - but
that's Linux/OS X only.

[1] https://github.com/wolfcw/libfaketime

Florian

--
http://www.the-compiler.org | me at the-compiler.org (Mail/XMPP)
   GPG: 916E B0C8 FD55 A072 | http://the-compiler.org/pubkey.asc
         I love long mails! | http://email.is-not-s.ms/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 819 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150603/2b8acdd7/attachment.bin

From fromqt at tungware.se  Wed Jun  3 09:09:16 2015
From: fromqt at tungware.se (Henry Skoglund)
Date: Wed, 03 Jun 2015 09:09:16 +0200
Subject: [Development] date/time adjust for (auto) testing
In-Reply-To: <556EA0F8.5090906@familiesomers.nl>
References: <556EA0F8.5090906@familiesomers.nl>
Message-ID: <556EA81C.7020101@tungware.se>

Hi, I also had the same needs for testing my app, on different times of
the day or year etc. But instead of patching Windows or some Qt code, I
created a new virtual Windows VM in WMWare, and deployed my app into it.

Switched off "Synchronize guest time with host" in the Options, and
whenever I test, first a .bat file is run that sets the requested
date/time in the Windows VM. This can you do in VirtualBox as well.

Note that when you run on a fake date/time, https (certificates) and a
lot of other internet stuff will fail, but for local app testing it's ok.

Rgrds Henry


On 2015-06-03 08:38, Andr? Somers wrote:
> Hi,
>
> We have applications that use the current date and time at places spread
> around the code. For normal operations, that works very nicely. However,
> we find that for (auto) testing, it would be very convenient if we could
> trick the application into believing it is some other date/time, so that
> we can test if certain behaviours work the way we would like to
> automatically. Currently, these tests take a lot of time because we
> actually need to manually adjust the system date and time, do some
> stuff, then adjust again, etc.
>
> It would be really confortable if there was some control to set a
> date/time offset (so the time keeps running) or a fixed date/time to be
> returned from currentDate(), currentTime() or currentDateTime()
> respectively. I guess access to such a thing does not belong in the main
> Qt classes, but is really a testing tool, so perhaps it could find
> refuge in QtTest somewhere. Would a contribution adding such a thing
> stand any chance of being accepted, or would this be considered out of
> scope or even unwanted?
>
> An alternative might be to hook the windows kernel API, but that may be
> much tricker to get right and may have unforseen consequences for the
> code injected by Squish doing the actual testing.
>
> Andr?
>



From mitch.curtis at theqtcompany.com  Wed Jun  3 10:00:54 2015
From: mitch.curtis at theqtcompany.com (Curtis Mitch)
Date: Wed, 3 Jun 2015 08:00:54 +0000
Subject: [Development] date/time adjust for (auto) testing
In-Reply-To: <556EA0F8.5090906@familiesomers.nl>
References: <556EA0F8.5090906@familiesomers.nl>
Message-ID: <VI1PR02MB06222C42E7D48F306D6AAB4BF1B40@VI1PR02MB0622.eurprd02.prod.outlook.com>

> -----Original Message-----
> From: development-bounces+mitch.curtis=theqtcompany.com at qt-project.org
> [mailto:development-bounces+mitch.curtis=theqtcompany.com at qt-project.org]
> On Behalf Of Andr? Somers
> Sent: Wednesday, 3 June 2015 8:39 AM
> To: <development at qt-project.org>
> Subject: [Development] date/time adjust for (auto) testing
>
> Hi,
>
> We have applications that use the current date and time at places spread
> around the code. For normal operations, that works very nicely. However,
> we find that for (auto) testing, it would be very convenient if we could
> trick the application into believing it is some other date/time, so that
> we can test if certain behaviours work the way we would like to
> automatically. Currently, these tests take a lot of time because we
> actually need to manually adjust the system date and time, do some
> stuff, then adjust again, etc.
>
> It would be really confortable if there was some control to set a
> date/time offset (so the time keeps running) or a fixed date/time to be
> returned from currentDate(), currentTime() or currentDateTime()
> respectively. I guess access to such a thing does not belong in the main
> Qt classes, but is really a testing tool, so perhaps it could find
> refuge in QtTest somewhere. Would a contribution adding such a thing
> stand any chance of being accepted, or would this be considered out of
> scope or even unwanted?
>
> An alternative might be to hook the windows kernel API, but that may be
> much tricker to get right and may have unforseen consequences for the
> code injected by Squish doing the actual testing.
>
> Andr?
>
> --
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

Sounds like a great thing to have if you can get it working. The QDateTime tests themselves would benefit from this quite a lot.

Perhaps you've already seen, but it looks like Thiago attempted something similar with a8c74ddcf78604c9038ba2a2bea81e445e4b3c58:

http://code.qt.io/cgit/qt/qtbase.git/tree/tests/auto/corelib/tools/qdatetime/tst_qdatetime.cpp#n2988



From andre at familiesomers.nl  Wed Jun  3 10:17:55 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Wed, 03 Jun 2015 10:17:55 +0200
Subject: [Development] date/time adjust for (auto) testing
In-Reply-To: <VI1PR02MB06222C42E7D48F306D6AAB4BF1B40@VI1PR02MB0622.eurprd02.prod.outlook.com>
References: <556EA0F8.5090906@familiesomers.nl>
	<VI1PR02MB06222C42E7D48F306D6AAB4BF1B40@VI1PR02MB0622.eurprd02.prod.outlook.com>
Message-ID: <556EB833.9060604@familiesomers.nl>

Curtis Mitch schreef op 3-6-2015 om 10:00:
>> -----Original Message-----
>> From: development-bounces+mitch.curtis=theqtcompany.com at qt-project.org
>> [mailto:development-bounces+mitch.curtis=theqtcompany.com at qt-project.org]
>> On Behalf Of Andr? Somers
>> Sent: Wednesday, 3 June 2015 8:39 AM
>> To: <development at qt-project.org>
>> Subject: [Development] date/time adjust for (auto) testing
>>
>> Hi,
>>
>> We have applications that use the current date and time at places spread
>> around the code. For normal operations, that works very nicely. However,
>> we find that for (auto) testing, it would be very convenient if we could
>> trick the application into believing it is some other date/time, so that
>> we can test if certain behaviours work the way we would like to
>> automatically. Currently, these tests take a lot of time because we
>> actually need to manually adjust the system date and time, do some
>> stuff, then adjust again, etc.
>>
>> It would be really confortable if there was some control to set a
>> date/time offset (so the time keeps running) or a fixed date/time to be
>> returned from currentDate(), currentTime() or currentDateTime()
>> respectively. I guess access to such a thing does not belong in the main
>> Qt classes, but is really a testing tool, so perhaps it could find
>> refuge in QtTest somewhere. Would a contribution adding such a thing
>> stand any chance of being accepted, or would this be considered out of
>> scope or even unwanted?
>>
>> An alternative might be to hook the windows kernel API, but that may be
>> much tricker to get right and may have unforseen consequences for the
>> code injected by Squish doing the actual testing.
>>
>> Andr?
>>
>> --
>>
>> _______________________________________________
>> Development mailing list
>> Development at qt-project.org
>> http://lists.qt-project.org/mailman/listinfo/development
> Sounds like a great thing to have if you can get it working. The QDateTime tests themselves would benefit from this quite a lot.
>
> Perhaps you've already seen, but it looks like Thiago attempted something similar with a8c74ddcf78604c9038ba2a2bea81e445e4b3c58:
>
> http://code.qt.io/cgit/qt/qtbase.git/tree/tests/auto/corelib/tools/qdatetime/tst_qdatetime.cpp#n2988
>
>
I did not see that yet. What I have in mind is not actually changing the
system date/time/timezone, but changing what Qt returns for it to ease
(regressino) testing.

A concrete use case:
We have a database with entries on a specific dates. We also have an
export operation that allows you to specify a time period to export,
with some default ranges defined: "today", "this week", "this month".
Obviously, that uses the current date and time. But that hinders
testing, as an automatic test would preferably use a pre-made database
that we just prepare once and then just run the test on. Running the
test next week will yield different results from running the test this
week, and that is hard to evaluate. On the other hand, creating a new
database for the test is tricky, as records get their time stamp
automatically from, again, the current date and time. So creating a new
record that appears one month and a day old is just as tricky. We'd like
to avoid creating special paths in the actual application code as much
as we can, because that increases maintenance costs and diminishes the
value of the actual test: we'd be testing a special code path no actual
user will ever use.

If we were able to manipulate the 'current' time and date returned by
Qt's date/time classes, testing this would be easy. We'd just have the
test script set a pre-defined 'current' date, and be able to auto-test
everything against a pre-defined database. I would add something to the
actual code of the current functions to adjust the result when such an
adjustment is set. That would incur a small overhead in the actual
function, even if not enabled I think.

Andr?


From tim at klingt.org  Wed Jun  3 11:05:35 2015
From: tim at klingt.org (Tim Blechmann)
Date: Wed, 03 Jun 2015 11:05:35 +0200
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
Message-ID: <mkmg10$83o$1@ger.gmane.org>

> We are quite close to Qt 5.5.0 RC & final releases. Plan is to put RC
> out Thu 11.6.2015 & Final Tue 23.6.2015. To be able to keep the schedule
> we need to make sure all real blockers are fixed in RC so that it will
> be really RC & there won't be so much changes between RC & Final.  So
> following tasks needs to be done immediately:
>
>
> - Please try to fix all blockers during this week so that we can create
> RC packages at the beginning of next one. Blocker list here:
> https://bugreports.qt.io/browse/QTBUG-44654

could QTBUG-46143 possibly be added to the list of blockers? it is a P1
bug in qt3d/qt5.5, as it does not build against the macos10.8 sdk.

thanks a lot,
tim



From sean.harmer at kdab.com  Wed Jun  3 11:07:08 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Wed, 03 Jun 2015 10:07:08 +0100
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <mkmg10$83o$1@ger.gmane.org>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<mkmg10$83o$1@ger.gmane.org>
Message-ID: <4687325.RFU0Zv5zt2@cartman>

On Wednesday 03 Jun 2015 11:05:35 Tim Blechmann wrote:
> > We are quite close to Qt 5.5.0 RC & final releases. Plan is to put RC
> > out Thu 11.6.2015 & Final Tue 23.6.2015. To be able to keep the schedule
> > we need to make sure all real blockers are fixed in RC so that it will
> > be really RC & there won't be so much changes between RC & Final.  So
> > following tasks needs to be done immediately:
> >
> >
> > - Please try to fix all blockers during this week so that we can create
> > RC packages at the beginning of next one. Blocker list here:
> > https://bugreports.qt.io/browse/QTBUG-44654
>
> could QTBUG-46143 possibly be added to the list of blockers? it is a P1
> bug in qt3d/qt5.5, as it does not build against the macos10.8 sdk.

I'm going to look into that tomorrow (I'm out of the office today).

Cheers,

Sean
--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
KDAB (UK) Ltd, a KDAB Group company
Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
Mobile: +44 (0)7545 140604
KDAB - Qt Experts

From jani.heikkinen at theqtcompany.com  Wed Jun  3 11:29:30 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Wed, 3 Jun 2015 09:29:30 +0000
Subject: [Development] [Releasing]  Your actions needed,
 Qt5.5.0 RC & Final is nearing!
In-Reply-To: <4687325.RFU0Zv5zt2@cartman>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<mkmg10$83o$1@ger.gmane.org> <4687325.RFU0Zv5zt2@cartman>
Message-ID: <DB3PR02MB0540A91A6FC2E66F6D9FC1A4E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi!

Thanks Sean, it would be good to get this fixed. But I don't see this a blocker for Qt5.5.0 because Qt3D is tech preview...

Br,
Jani

>>-----Original Message-----
>>From: releasing-bounces+jani.heikkinen=theqtcompany.com at qt-project.org
>>[mailto:releasing-bounces+jani.heikkinen=theqtcompany.com at qt-project.org]
>>On Behalf Of Sean Harmer
>>Sent: 3. kes?kuuta 2015 12:07
>>To: development at qt-project.org
>>Cc: Tim Blechmann; releasing at qt-project.org
>>Subject: Re: [Releasing] [Development] Your actions needed, Qt5.5.0 RC & Final
>>is nearing!
>>
>>On Wednesday 03 Jun 2015 11:05:35 Tim Blechmann wrote:
>>> > We are quite close to Qt 5.5.0 RC & final releases. Plan is to put RC
>>> > out Thu 11.6.2015 & Final Tue 23.6.2015. To be able to keep the schedule
>>> > we need to make sure all real blockers are fixed in RC so that it will
>>> > be really RC & there won't be so much changes between RC & Final.  So
>>> > following tasks needs to be done immediately:
>>> >
>>> >
>>> > - Please try to fix all blockers during this week so that we can create
>>> > RC packages at the beginning of next one. Blocker list here:
>>> > https://bugreports.qt.io/browse/QTBUG-44654
>>>
>>> could QTBUG-46143 possibly be added to the list of blockers? it is a P1
>>> bug in qt3d/qt5.5, as it does not build against the macos10.8 sdk.
>>
>>I'm going to look into that tomorrow (I'm out of the office today).
>>
>>Cheers,
>>
>>Sean
>>--
>>Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
>>KDAB (UK) Ltd, a KDAB Group company
>>Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
>>Mobile: +44 (0)7545 140604
>>KDAB - Qt Experts
>>_______________________________________________
>>Releasing mailing list
>>Releasing at qt-project.org
>>http://lists.qt-project.org/mailman/listinfo/releasing

From bo at vikingsoft.eu  Wed Jun  3 11:44:52 2015
From: bo at vikingsoft.eu (Bo Thorsen)
Date: Wed, 03 Jun 2015 11:44:52 +0200
Subject: [Development] date/time adjust for (auto) testing
In-Reply-To: <556EA0F8.5090906@familiesomers.nl>
References: <556EA0F8.5090906@familiesomers.nl>
Message-ID: <556ECC94.7080800@vikingsoft.eu>

Den 03-06-2015 kl. 08:38 skrev Andr? Somers:
> We have applications that use the current date and time at places spread
> around the code. For normal operations, that works very nicely. However,
> we find that for (auto) testing, it would be very convenient if we could
> trick the application into believing it is some other date/time, so that
> we can test if certain behaviours work the way we would like to
> automatically. Currently, these tests take a lot of time because we
> actually need to manually adjust the system date and time, do some
> stuff, then adjust again, etc.
>
> It would be really confortable if there was some control to set a
> date/time offset (so the time keeps running) or a fixed date/time to be
> returned from currentDate(), currentTime() or currentDateTime()
> respectively. I guess access to such a thing does not belong in the main
> Qt classes, but is really a testing tool, so perhaps it could find
> refuge in QtTest somewhere. Would a contribution adding such a thing
> stand any chance of being accepted, or would this be considered out of
> scope or even unwanted?
>
> An alternative might be to hook the windows kernel API, but that may be
> much tricker to get right and may have unforseen consequences for the
> code injected by Squish doing the actual testing.

To me it sounds like you need to create your own static current...()
functions so you can control the output for unit tests instead.

Or even better: Modify the tests so you can adapt the compares to
something that handles the current time and date. Date is simple enough
(yes, it can fail if you run the test at exactly 23.59.59.99999). For
the time you just allow for a couple of seconds difference.

I *really* don't like the idea of creating a system to add offsets to
the QDateTime::currentDateTime (or friends). Then we can't depend on the
output being correct, which means any unit tests you write using it are
useless.

If you really want to modify the output of current...() then you might
consider preloading a library over Qt that does it for you.

Bo Thorsen,
Director, Viking Software.

--
Viking Software
Qt and C++ developers for hire
http://www.vikingsoft.eu

From xbenlau at gmail.com  Wed Jun  3 12:00:43 2015
From: xbenlau at gmail.com (Ben Lau)
Date: Wed, 3 Jun 2015 18:00:43 +0800
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
Message-ID: <CAAq4oL+3rT=NfS+SxEpsX7Zv-h2taxCrk72r1Z3-E160LW0sfg@mail.gmail.com>

On 3 June 2015 at 14:45, Heikkinen Jani <jani.heikkinen at theqtcompany.com>
wrote:

>  Hi all,
>
>
>  We are quite close to Qt 5.5.0 RC & final releases. Plan is to put RC
> out Thu 11.6.2015 & Final Tue 23.6.2015. To be able to keep the schedule we
> need to make sure all real blockers are fixed in RC so that it will be
> really RC & there won't be so much changes between RC & Final.  So
> following tasks needs to be done immediately:
>
>
>  - Please try to fix all blockers during this week so that we can create
> RC packages at the beginning of next one. Blocker list here:
> https://bugreports.qt.io/browse/QTBUG-44654
>
> - Please create all changes files for Qt 5.5.0 now, these should be in RC
>
> - Someone, please run those header diffs & binary compatibility checks as
> soon as possible to be able to be sure there isn't problems there. This
> needs to be done now because possible fixes should be in RC already
>
> - Start updating Known issues page (
> https://wiki.qt.io/Qt_5.5.0_Known_Issues)
>
> - Something else?
>
>
>  br,
>
> Jani
>
Any chance to add QTBUG-44645 to the blocker list? Flickable + PinchArea is
working well in Qt 5.3 but it was broken since Qt 5.4.

[QTBUG-44645] Flickable and PinchArea are not working well together - Qt
Bug Tracker
https://bugreports.qt.io/browse/QTBUG-44645
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150603/4185a416/attachment.html

From andre at familiesomers.nl  Wed Jun  3 12:26:48 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Wed, 03 Jun 2015 12:26:48 +0200
Subject: [Development] date/time adjust for (auto) testing
In-Reply-To: <556ECC94.7080800@vikingsoft.eu>
References: <556EA0F8.5090906@familiesomers.nl>
	<556ECC94.7080800@vikingsoft.eu>
Message-ID: <556ED668.9030804@familiesomers.nl>

Bo Thorsen schreef op 3-6-2015 om 11:44:
> Den 03-06-2015 kl. 08:38 skrev Andr? Somers:
>> We have applications that use the current date and time at places spread
>> around the code. For normal operations, that works very nicely. However,
>> we find that for (auto) testing, it would be very convenient if we could
>> trick the application into believing it is some other date/time, so that
>> we can test if certain behaviours work the way we would like to
>> automatically. Currently, these tests take a lot of time because we
>> actually need to manually adjust the system date and time, do some
>> stuff, then adjust again, etc.
>>
>> It would be really confortable if there was some control to set a
>> date/time offset (so the time keeps running) or a fixed date/time to be
>> returned from currentDate(), currentTime() or currentDateTime()
>> respectively. I guess access to such a thing does not belong in the main
>> Qt classes, but is really a testing tool, so perhaps it could find
>> refuge in QtTest somewhere. Would a contribution adding such a thing
>> stand any chance of being accepted, or would this be considered out of
>> scope or even unwanted?
>>
>> An alternative might be to hook the windows kernel API, but that may be
>> much tricker to get right and may have unforseen consequences for the
>> code injected by Squish doing the actual testing.
> To me it sounds like you need to create your own static current...()
> functions so you can control the output for unit tests instead.
That might be an option, and I did considder that. We may end up doing
that, but it would involve changing quite a number of places and worse,
is a bit hard to make sure is used everywhere consistently in the future.
>
> Or even better: Modify the tests so you can adapt the compares to
> something that handles the current time and date. Date is simple enough
> (yes, it can fail if you run the test at exactly 23.59.59.99999). For
> the time you just allow for a couple of seconds difference.
That's much harder to do, as I already explained earlier.
>
> I *really* don't like the idea of creating a system to add offsets to
> the QDateTime::currentDateTime (or friends). Then we can't depend on the
> output being correct, which means any unit tests you write using it are
> useless.
I expected the proposel to be contriversial, that's why I posted it just
as an email in the first place. I think it would be useful especially
_for_ unit tests. I'd also put the controls in the QtTest namespace, so
that it is very obvious that this functionality is there to facilitate
tests, not for other use. Note that there are many other methods there
to trick Qt into acting as if events happened on the outside of the
application, like simulating clicks and keyboard actions. Here, one
would simulate the change of system time.
>
> If you really want to modify the output of current...() then you might
> consider preloading a library over Qt that does it for you.
>
I am considering that option as well, but that would require me to hook
into the windows kernel calls. Like I said, that approach is much
trickier and have a bigger chance of having side effects on for instance
Squish.

Andr?


From Tobias.Hunger at theqtcompany.com  Wed Jun  3 12:30:00 2015
From: Tobias.Hunger at theqtcompany.com (Hunger Tobias)
Date: Wed, 3 Jun 2015 10:30:00 +0000
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <CAAq4oL+3rT=NfS+SxEpsX7Zv-h2taxCrk72r1Z3-E160LW0sfg@mail.gmail.com>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>,
	<CAAq4oL+3rT=NfS+SxEpsX7Zv-h2taxCrk72r1Z3-E160LW0sfg@mail.gmail.com>
Message-ID: <VI1PR02MB06725B2738D0FA1BF2EA2F7C81B40@VI1PR02MB0672.eurprd02.prod.outlook.com>

Hi!


I would really love to see https://bugreports.qt.io/browse/QTBUG-46080 fixed for a final release... that one drives me crazy!


Best Regards,

Tobias
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150603/cb8f0c85/attachment.html

From bo at vikingsoft.eu  Wed Jun  3 12:42:30 2015
From: bo at vikingsoft.eu (Bo Thorsen)
Date: Wed, 03 Jun 2015 12:42:30 +0200
Subject: [Development] date/time adjust for (auto) testing
In-Reply-To: <556ED668.9030804@familiesomers.nl>
References: <556EA0F8.5090906@familiesomers.nl>	<556ECC94.7080800@vikingsoft.eu>
	<556ED668.9030804@familiesomers.nl>
Message-ID: <556EDA16.3050908@vikingsoft.eu>

Den 03-06-2015 kl. 12:26 skrev Andr? Somers:
>> If you really want to modify the output of current...() then you might
>> >consider preloading a library over Qt that does it for you.
>> >
> I am considering that option as well, but that would require me to hook
> into the windows kernel calls. Like I said, that approach is much
> trickier and have a bigger chance of having side effects on for instance
> Squish.

No, I meant preloading over the QDateTime::currentDateTime function. You
can load a dll that replaces specific functions in another dll, which
means you can replace any Qt method you want to. Or at least that's
possible in theory. I've never actually done it on windows.

I can perfectly understand you don't want to mess with windows kernel
hooks. But doing dll injection on Qt itself might be okay for running
your unit tests.

On linux you can do this with LD_PRELOAD as well.

Bo Thorsen,
Director, Viking Software.

--
Viking Software
Qt and C++ developers for hire
http://www.vikingsoft.eu

From helio at kde.org  Wed Jun  3 15:33:33 2015
From: helio at kde.org (Helio Chissini de Castro)
Date: Wed, 3 Jun 2015 10:33:33 -0300
Subject: [Development] 5.5 third-party update
In-Reply-To: <D1946ABD.31A3D%lars.knoll@theqtcompany.com>
References: <2270286.UJrcjuD3Ax@tjmaciei-mobl4>
	<D1946ABD.31A3D%lars.knoll@theqtcompany.com>
Message-ID: <CAKPiqoFr9FTA5WvWcvKWi6U3hshffnTsC_aboa8KfbixwYBFPw@mail.gmail.com>

I asked for the update after the list was updated in
https://drive.google.com/open?id=1xOAI87zKy6w7VSvSzQrIA_zeZBLuTgoSmNU-vAXrIhY&authuser=0

AFAIK, this is the last status, and the only significant older library is
libjpeg but no one gave green light to do it.
And i not verified the status of ones already in review recently.

So, based on the list, do you think is possible to update the missing ones
it for 5.5.1 ( as 5.5.0 is unrealistic ) ?


On Wed, Jun 3, 2015 at 3:28 AM, Knoll Lars <Lars.Knoll at theqtcompany.com>
wrote:

> Well enough from what I?ve seen. A lot of the 3rd party modules have
> received updates over the last couple of months.
>
> Cheers,
> Lars
>
> On 02/06/15 23:02, "Thiago Macieira" <thiago.macieira at intel.com> wrote:
>
> >Have we done it?
> >--
> >Thiago Macieira - thiago.macieira (AT) intel.com
> >  Software Architect - Intel Open Source Technology Center
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150603/4cfe2451/attachment.html

From Lars.Knoll at theqtcompany.com  Wed Jun  3 16:06:34 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Wed, 3 Jun 2015 14:06:34 +0000
Subject: [Development] 5.5 third-party update
In-Reply-To: <CAKPiqoFr9FTA5WvWcvKWi6U3hshffnTsC_aboa8KfbixwYBFPw@mail.gmail.com>
References: <2270286.UJrcjuD3Ax@tjmaciei-mobl4>
	<D1946ABD.31A3D%lars.knoll@theqtcompany.com>
	<CAKPiqoFr9FTA5WvWcvKWi6U3hshffnTsC_aboa8KfbixwYBFPw@mail.gmail.com>
Message-ID: <D194D670.31ACF%lars.knoll@theqtcompany.com>

I don?t see a problem doing further updates to 3rd party libraries for
5.5.1.

Cheers,
Lars

On 03/06/15 15:33, "Helio Chissini de Castro" <helio at kde.org> wrote:

>I asked for the update after the list was updated in
>https://drive.google.com/open?id=1xOAI87zKy6w7VSvSzQrIA_zeZBLuTgoSmNU-vAXr
>IhY&authuser=0
>
>AFAIK, this is the last status, and the only significant older library is
>libjpeg but no one gave green light to do it.
>And i not verified the status of ones already in review recently.
>
>
>So, based on the list, do you think is possible to update the missing
>ones it for 5.5.1 ( as 5.5.0 is unrealistic ) ?
>
>
>
>
>On Wed, Jun 3, 2015 at 3:28 AM, Knoll Lars
><Lars.Knoll at theqtcompany.com> wrote:
>
>Well enough from what I?ve seen. A lot of the 3rd party modules have
>received updates over the last couple of months.
>
>Cheers,
>Lars
>
>On 02/06/15 23:02, "Thiago Macieira" <thiago.macieira at intel.com> wrote:
>
>>Have we done it?
>>--
>>Thiago Macieira - thiago.macieira (AT)
>intel.com <http://intel.com>
>>  Software Architect - Intel Open Source Technology Center
>
>
>
>_______________________________________________
>Development mailing list
>Development at qt-project.org
>http://lists.qt-project.org/mailman/listinfo/development
>
>
>
>
>


From milian.wolff at kdab.com  Wed Jun  3 18:32:46 2015
From: milian.wolff at kdab.com (Milian Wolff)
Date: Wed, 03 Jun 2015 18:32:46 +0200
Subject: [Development] updating many QPersistentModelIndices
Message-ID: <18377629.d0ghECcE46@milian-kdab2>

Hey all,

for a customer I looked into the performance of a model/view application with
many (and I mean, many!) add/remove/modify operations on a model with a
QSortFilterProxyModel on top. The obvious solution to speed things up is
batching, which works nicely paired with layout{AboutToBe,}Changed. So far so
good, but the issue that was now reported comes when one now *also* wants to
enable MultiSelection in the view, and the user "accidentally" presses
CTRL + A to select all items in the view. This then completely kills the
performance, due to bottlenecks inside QAbstractItemModel, all related to
QPersistentModelIndex.

Some questions now from my side:

a) Why is the hash of indexes in QAbstractItemModelPrivate::Persistent not
unique - i.e. why is insertMulti required? I ask, b/c the "it + 1" operation
in QAbstractItemModelPrivate::Persistent::insertMultiAtEnd is _extremely_ slow
for large lists of persistent model indices, due to the cache misses etc. pp.
involved. The documentation says:

    "There should be only one instance QPersistentModelIndexData per index,
but in some intermediate state there may be severals of PersistantModelIndex
pointing to the same index, ..."

What intermediate state is that? When I look at the uses of this function,
they always use the pattern

persistent.indexes.erase(...);
...
persistent.insertMultiAtEnd(...);

I fail to see how/where this intermediate state can occur.

b) Changing that function to just use insert() and returning early, the big
bottleneck above is gone, but it's still very slow, mostly due to the
inefficiencies built-in to QPersistentModelIndex, e.g. operator= required in
the merge sort step. I wonder what to do there...

Has anyone had similar experiences, and if so - what where the workarounds
applied to make this fast?

Thanks
--
Milian Wolff | milian.wolff at kdab.com | Software Engineer
KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
Tel: +49-30-521325470
KDAB - The Qt Experts
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 5903 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150603/b74e8ccc/attachment.bin

From milian.wolff at kdab.com  Wed Jun  3 18:56:05 2015
From: milian.wolff at kdab.com (Milian Wolff)
Date: Wed, 03 Jun 2015 18:56:05 +0200
Subject: [Development] updating many QPersistentModelIndices
In-Reply-To: <18377629.d0ghECcE46@milian-kdab2>
References: <18377629.d0ghECcE46@milian-kdab2>
Message-ID: <1479038.uYIgJn13O4@milian-kdab2>

On Wednesday 03 June 2015 18:32:46 Milian Wolff wrote:
> Hey all,
>
> for a customer I looked into the performance of a model/view application
> with many (and I mean, many!) add/remove/modify operations on a model with
> a QSortFilterProxyModel on top. The obvious solution to speed things up is
> batching, which works nicely paired with layout{AboutToBe,}Changed. So far
> so good, but the issue that was now reported comes when one now *also*
> wants to enable MultiSelection in the view, and the user "accidentally"
> presses CTRL + A to select all items in the view. This then completely
> kills the performance, due to bottlenecks inside QAbstractItemModel, all
> related to QPersistentModelIndex.
>
> Some questions now from my side:

I forgot to mention: This targets Qt 4.7, but afaik all my findings below are
equally valid to current Qt 5 code.

> a) Why is the hash of indexes in QAbstractItemModelPrivate::Persistent not
> unique - i.e. why is insertMulti required? I ask, b/c the "it + 1" operation
> in QAbstractItemModelPrivate::Persistent::insertMultiAtEnd is _extremely_
> slow for large lists of persistent model indices, due to the cache misses
> etc. pp. involved. The documentation says:
>
>     "There should be only one instance QPersistentModelIndexData per index,
> but in some intermediate state there may be severals of PersistantModelIndex
> pointing to the same index, ..."
>
> What intermediate state is that? When I look at the uses of this function,
> they always use the pattern
>
> persistent.indexes.erase(...);
> ...
> persistent.insertMultiAtEnd(...);
>
> I fail to see how/where this intermediate state can occur.

I just recompiled Qt with this patch applied:

diff --git a/src/corelib/kernel/qabstractitemmodel.cpp
b/src/corelib/kernel/qabstractitemmodel.cpp
index 1eb709c..ec7006b 100644
--- a/src/corelib/kernel/qabstractitemmodel.cpp
+++ b/src/corelib/kernel/qabstractitemmodel.cpp
@@ -3464,8 +3464,10 @@ bool QAbstractListModel::dropMimeData(const QMimeData
*data, Qt::DropAction acti
  */
 void QAbstractItemModelPrivate::Persistent::insertMultiAtEnd(const
QModelIndex& key, QPersistentModelIndexData *data)
 {
+    Q_ASSERT(indexes.count(key) < 2);
     QHash<QModelIndex,QPersistentModelIndexData *>::iterator newIt =
-            indexes.insertMulti(key, data);
+            indexes.insert(key, data);
+    return;
     QHash<QModelIndex,QPersistentModelIndexData *>::iterator it = newIt + 1;
     while (it != indexes.end() && it.key() == key) {
         qSwap(*newIt,*it);

with a developer build, and assertions enabled, everything still works as
expected (just much faster). I ran the following unit tests, all still pass,
or behave just as without this patch:

qabstractitemmodel
qabstractproxymodel
qsortfilterproxymodel
qtreeview
qlistview

My own test app also works without asserting. So again - why the multiHash -
obsolete? If so, I'll push the required changes to Qt 4 and Qt 5 to remove
QAbstractItemModelPrivate::Persistent::insertMultiAtEnd.

Bye
--
Milian Wolff | milian.wolff at kdab.com | Software Engineer
KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
Tel: +49-30-521325470
KDAB - The Qt Experts

From olivier at woboq.com  Wed Jun  3 22:23:45 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Wed, 03 Jun 2015 22:23:45 +0200
Subject: [Development] updating many QPersistentModelIndices
In-Reply-To: <18377629.d0ghECcE46@milian-kdab2>
References: <18377629.d0ghECcE46@milian-kdab2>
Message-ID: <4716275.ONlxkBi1zm@finn>

On Wednesday 3. June 2015 18:32:46 Milian Wolff wrote:
> Hey all,
>
> for a customer I looked into the performance of a model/view application
> with many (and I mean, many!) add/remove/modify operations on a model with
> a QSortFilterProxyModel on top. The obvious solution to speed things up is
> batching, which works nicely paired with layout{AboutToBe,}Changed. So far
> so good, but the issue that was now reported comes when one now *also*
> wants to enable MultiSelection in the view, and the user "accidentally"
> presses CTRL + A to select all items in the view. This then completely
> kills the performance, due to bottlenecks inside QAbstractItemModel, all
> related to QPersistentModelIndex.
>
> Some questions now from my side:
>
> a) Why is the hash of indexes in QAbstractItemModelPrivate::Persistent not
> unique - i.e. why is insertMulti required? I ask, b/c the "it + 1" operation
> in QAbstractItemModelPrivate::Persistent::insertMultiAtEnd is _extremely_
> slow for large lists of persistent model indices, due to the cache misses
> etc. pp. involved. The documentation says:
>
>     "There should be only one instance QPersistentModelIndexData per index,
> but in some intermediate state there may be severals of PersistantModelIndex
> pointing to the same index, ..."
>
> What intermediate state is that? When I look at the uses of this function,
> they always use the pattern
>
> persistent.indexes.erase(...);
> ...
> persistent.insertMultiAtEnd(...);
>
> I fail to see how/where this intermediate state can occur.

I wrote this code a very long time ago so I will try to answer.

Imagine you have two QPersistentModelIndex pointing at the second and third
row.
Then you remove the first row, and the persistent model index will be moved in
the hash. We take the third and we move it to the second.  The we take the
second and we move it to the first.  When we take the second, there might be
two second.

I'm pretty sure there should be a test to catch that.  Maybe
tst_QAbstractItemModel::complexChangesWithPersistent.
Did you run the test in release or in debug? (to catch the Q_ASSERT)

I did not realize that this +1 was so expensive.  Perhaps there is a better
way to implement that.


> b) Changing that function to just use insert() and returning early, the big
> bottleneck above is gone, but it's still very slow, mostly due to the
> inefficiencies built-in to QPersistentModelIndex, e.g. operator= required in
> the merge sort step. I wonder what to do there...
>
> Has anyone had similar experiences, and if so - what where the workarounds
> applied to make this fast?

Maybe some other datastructure than a QHash could be helpful?

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org

From milian.wolff at kdab.com  Wed Jun  3 23:11:59 2015
From: milian.wolff at kdab.com (Milian Wolff)
Date: Wed, 03 Jun 2015 23:11:59 +0200
Subject: [Development] updating many QPersistentModelIndices
In-Reply-To: <4716275.ONlxkBi1zm@finn>
References: <18377629.d0ghECcE46@milian-kdab2> <4716275.ONlxkBi1zm@finn>
Message-ID: <1572336.Cemm47yelU@agathebauer>

On Wednesday 03 June 2015 22:23:45 Olivier Goffart wrote:
> On Wednesday 3. June 2015 18:32:46 Milian Wolff wrote:
> > Hey all,
> >
> > for a customer I looked into the performance of a model/view application
> > with many (and I mean, many!) add/remove/modify operations on a model with
> > a QSortFilterProxyModel on top. The obvious solution to speed things up is
> > batching, which works nicely paired with layout{AboutToBe,}Changed. So far
> > so good, but the issue that was now reported comes when one now *also*
> > wants to enable MultiSelection in the view, and the user "accidentally"
> > presses CTRL + A to select all items in the view. This then completely
> > kills the performance, due to bottlenecks inside QAbstractItemModel, all
> > related to QPersistentModelIndex.
> >
> > Some questions now from my side:
> >
> > a) Why is the hash of indexes in QAbstractItemModelPrivate::Persistent not
> > unique - i.e. why is insertMulti required? I ask, b/c the "it + 1"
> > operation in QAbstractItemModelPrivate::Persistent::insertMultiAtEnd is
> > _extremely_ slow for large lists of persistent model indices, due to the
> > cache misses>
> > etc. pp. involved. The documentation says:
> >     "There should be only one instance QPersistentModelIndexData per
> >     index,
> >
> > but in some intermediate state there may be severals of
> > PersistantModelIndex pointing to the same index, ..."
> >
> > What intermediate state is that? When I look at the uses of this function,
> > they always use the pattern
> >
> > persistent.indexes.erase(...);
> > ...
> > persistent.insertMultiAtEnd(...);
> >
> > I fail to see how/where this intermediate state can occur.
>
> I wrote this code a very long time ago so I will try to answer.
>
> Imagine you have two QPersistentModelIndex pointing at the second and third
> row.
> Then you remove the first row, and the persistent model index will be moved
> in the hash. We take the third and we move it to the second.  The we take
> the second and we move it to the first.  When we take the second, there
> might be two second.
>
> I'm pretty sure there should be a test to catch that.  Maybe
> tst_QAbstractItemModel::complexChangesWithPersistent.
> Did you run the test in release or in debug? (to catch the Q_ASSERT)

I'm pretty sure I tested it in debug mode - at least in my test app asserts do
get hit. I'll rerun this tomorrow on my work machine with a deliberate
Q_ASSERT(false) in the test you mentioned.

Anyhow, I can now at least phantom of where this might be required, maybe I
can come up with a better implementation.

> I did not realize that this +1 was so expensive.  Perhaps there is a better
> way to implement that.

It really is bad, you should write a test benchmark and take a look at it.
Just iterate over all items in a large hash and you'll see that tons of cycles
are spent in following the internal hash structure. Hashes (at least as
implemented in Qt) are simply not meant for that access pattern.

> > b) Changing that function to just use insert() and returning early, the
> > big
> > bottleneck above is gone, but it's still very slow, mostly due to the
> > inefficiencies built-in to QPersistentModelIndex, e.g. operator= required
> > in the merge sort step. I wonder what to do there...
> >
> > Has anyone had similar experiences, and if so - what where the workarounds
> > applied to make this fast?
>
> Maybe some other datastructure than a QHash could be helpful?

The part b) is not related to QHash, but to QPMI in general with its inherent
allocations and other inefficiencies.

Bye

--
Milian Wolff | milian.wolff at kdab.com | Software Engineer
KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
Tel: +49-30-521325470
KDAB - The Qt Experts

From olivier at woboq.com  Wed Jun  3 23:14:50 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Wed, 03 Jun 2015 23:14:50 +0200
Subject: [Development] updating many QPersistentModelIndices
In-Reply-To: <1479038.uYIgJn13O4@milian-kdab2>
References: <18377629.d0ghECcE46@milian-kdab2>
	<1479038.uYIgJn13O4@milian-kdab2>
Message-ID: <4452713.ZyKebLAauj@finn>

On Wednesday 3. June 2015 18:56:05 Milian Wolff wrote:
>  void QAbstractItemModelPrivate::Persistent::insertMultiAtEnd(const
> QModelIndex& key, QPersistentModelIndexData *data)
>  {
> +    Q_ASSERT(indexes.count(key) < 2);
>      QHash<QModelIndex,QPersistentModelIndexData *>::iterator newIt =
> -            indexes.insertMulti(key, data);
> +            indexes.insert(key, data);
> +    return;
>      QHash<QModelIndex,QPersistentModelIndexData *>::iterator it = newIt +
> 1; while (it != indexes.end() && it.key() == key) {
>          qSwap(*newIt,*it);

This will of course never assert since you removed the insertMulti.
Try with Q_ASSERT(indexes.count(key) == 0);

> with a developer build, and assertions enabled, everything still works as
> expected (just much faster). I ran the following unit tests, all still pass,
> or behave just as without this patch:
>
> qabstractitemmodel
> qabstractproxymodel
> qsortfilterproxymodel
> qtreeview
> qlistview
>
> My own test app also works without asserting. So again - why the multiHash -
> obsolete? If so, I'll push the required changes to Qt 4 and Qt 5 to remove
> QAbstractItemModelPrivate::Persistent::insertMultiAtEnd.

This is really weird, I was pretty sure there is a test that should fail.

Something like: //pseudocode
changePersistentIndex(QModelIndex(3,0), QModelIndex(2,0));
changePersistentIndex(QModelIndex(2,0), QModelIndex(1,0));

Then you get a problem.

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org



From jani.heikkinen at theqtcompany.com  Thu Jun  4 08:10:50 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Thu, 4 Jun 2015 06:10:50 +0000
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <CAAq4oL+3rT=NfS+SxEpsX7Zv-h2taxCrk72r1Z3-E160LW0sfg@mail.gmail.com>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<CAAq4oL+3rT=NfS+SxEpsX7Zv-h2taxCrk72r1Z3-E160LW0sfg@mail.gmail.com>
Message-ID: <DB3PR02MB0540BFB8029BDF3A851D9634E4B30@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi!

I cannot see QTBUG-44645 blocking the release, sorry

Br,
Jani

From: Ben Lau [mailto:xbenlau at gmail.com]
Sent: 3. kes?kuuta 2015 13:01
To: Heikkinen Jani
Cc: development at qt-project.org; releasing at qt-project.org
Subject: Re: [Development] Your actions needed, Qt5.5.0 RC & Final is nearing!



On 3 June 2015 at 14:45, Heikkinen Jani <jani.heikkinen at theqtcompany.com<mailto:jani.heikkinen at theqtcompany.com>> wrote:

Hi all,



We are quite close to Qt 5.5.0 RC & final releases. Plan is to put RC out Thu 11.6.2015 & Final Tue 23.6.2015. To be able to keep the schedule we need to make sure all real blockers are fixed in RC so that it will be really RC & there won't be so much changes between RC & Final.  So following tasks needs to be done immediately:



- Please try to fix all blockers during this week so that we can create RC packages at the beginning of next one. Blocker list here: https://bugreports.qt.io/browse/QTBUG-44654

- Please create all changes files for Qt 5.5.0 now, these should be in RC

- Someone, please run those header diffs & binary compatibility checks as soon as possible to be able to be sure there isn't problems there. This needs to be done now because possible fixes should be in RC already

- Start updating Known issues page (https://wiki.qt.io/Qt_5.5.0_Known_Issues)

- Something else?



br,

Jani
Any chance to add QTBUG-44645 to the blocker list? Flickable + PinchArea is working well in Qt 5.3 but it was broken since Qt 5.4.

[QTBUG-44645] Flickable and PinchArea are not working well together - Qt Bug Tracker
https://bugreports.qt.io/browse/QTBUG-44645



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150604/4f4f4532/attachment.html

From christian.kandeler at theqtcompany.com  Thu Jun  4 14:12:05 2015
From: christian.kandeler at theqtcompany.com (Christian Kandeler)
Date: Thu, 4 Jun 2015 14:12:05 +0200
Subject: [Development] Q_OBJECT and "override"
Message-ID: <55704095.3000201@theqtcompany.com>

Hi,

as anyone who uses clang has probably already noticed, this compiler has
recently added "-Winconsistent-missing-override" to the collection of
flags enabled via "-Wall". As a result, you now get literally thousands
of warnings when building any non-trivial Qt project. This is because
the expansion of the Q_OBJECT macro contains virtual overrides that are
not marked with the "override" keyword, so all QObject-derived classes
using Q_OBJECT and making use of the "override" keyword will trigger
this warning. Adding the keyword in the Q_OBJECT definition does not
help in itself, as now all derived classes *not* using "override" would
trigger the warning.
So how to deal with this?
1) Add "override" (or rather Q_DECL_OVERRIDE) to the definition of
Q_OBJECT *and* all QObject-derived classes in Qt.
Pros: Is the correct solution.
Cons: Tedious work, will introduce some noise into the git history.
2) Remove "override" from all QObject-derived classes in Qt.
Pros: Less work than 1)
Cons: Entirely wrong. Discourages developers from using "override" in
their code, for a start.
3) Explicitly disable the warning in the clang mkspecs.
Pros: Easy to do.
Cons: Users might want to enable the warning, but they can't, as they
will then drown in warnings from our headers.
4) Let users deal with the problem by making them turn the warning off.
Pros: Even easier to do.
Cons: See 3). Also seems very lazy.

Opinions?


Christian

From Joerg.Bornemann at theqtcompany.com  Thu Jun  4 14:41:23 2015
From: Joerg.Bornemann at theqtcompany.com (Bornemann Joerg)
Date: Thu, 4 Jun 2015 12:41:23 +0000
Subject: [Development] Q_OBJECT and "override"
In-Reply-To: <55704095.3000201@theqtcompany.com>
References: <55704095.3000201@theqtcompany.com>
Message-ID: <AM3PR02MB097348D9D22BDB4447B24668DB30@AM3PR02MB097.eurprd02.prod.outlook.com>


> 1) Add "override" (or rather Q_DECL_OVERRIDE) to the definition of
> Q_OBJECT *and* all QObject-derived classes in Qt.
[...]
> 2) Remove "override" from all QObject-derived classes in Qt.
[...]
> 3) Explicitly disable the warning in the clang mkspecs.
[...]
> 4) Let users deal with the problem by making them turn the warning off.
[...]

1) is the thing to do, but OTOH it's a lot of work with questionable gain.
2) and 4) are very wrong. IMO, we shouldn't do this.
3) could be a good compromise. There's a variant of this solution by turning the warning off
at the beginning of every header and turning it on again at the end.
We once had the QT_{BEGIN|END}_HEADER macros which could expand to

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wannoyingwarning"

and repectively

#pragma clang diagnostic pop

This way the warning can be turned on for user code.


BR,

Joerg

From frederik.gladhorn at theqtcompany.com  Thu Jun  4 15:29:10 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Thu, 4 Jun 2015 15:29:10 +0200
Subject: [Development] Qt 5.5.0 header diff
Message-ID: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>

It's time for the header diffs, please help review the changes (Qt 5.4.2 to
5.5.0) to make sure nothing that was added to the public headers slipped
through when it shouldn't be there.

I'll send mails in reply to this one with the diffs attached (that will take a
while).

Cheers,
Frederik

Output of header-diff.pl origin/5.4.2..origin/5.5.0:

Found module Qt3DCore in /home/frederik/dev/qt/qt-src-
dev//qt3d/src/core/core.pro
 - Module has 41 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module Qt3DInput in /home/frederik/dev/qt/qt-src-
dev//qt3d/src/input/input.pro
 - Module has 5 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module Qt3DRenderer in /home/frederik/dev/qt/qt-src-
dev//qt3d/src/render/render.pro
 - Module has 74 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module QtAndroidExtras in /home/frederik/dev/qt/qt-src-
dev//qtandroidextras/src/androidextras/androidextras.pro
 - No public headers for module QtAndroidExtras
Found module QtConcurrent in /home/frederik/dev/qt/qt-src-
dev//qtbase/src/concurrent/concurrent.pro
 - Module has 15 public headers now
 - QtConcurrent.diff created
Found module QtCore in /home/frederik/dev/qt/qt-src-
dev//qtbase/src/corelib/corelib.pro
 - Module has 191 public headers now
 - QtCore.diff created
Found module QtDBus in /home/frederik/dev/qt/qt-src-
dev//qtbase/src/dbus/dbus.pro
 - Module has 19 public headers now
 - QtDBus.diff created
Found module QtGui in /home/frederik/dev/qt/qt-src-dev//qtbase/src/gui/gui.pro
 - Module has 128 public headers now
 - QtGui.diff created
Found module QtNetwork in /home/frederik/dev/qt/qt-src-
dev//qtbase/src/network/network.pro
 - Module has 34 public headers now
 - QtNetwork.diff created
Found module QtOpenGL in /home/frederik/dev/qt/qt-src-
dev//qtbase/src/opengl/opengl.pro
 - Module has 8 public headers now
 - QtOpenGL.diff created
Found module QtOpenGLExtensions in /home/frederik/dev/qt/qt-src-
dev//qtbase/src/openglextensions/openglextensions.pro
 - Module has 1 public headers now
 - QtOpenGLExtensions.diff created
Found module QtPlatformSupport in /home/frederik/dev/qt/qt-src-
dev//qtbase/src/platformsupport/platformsupport.pro
 - No public headers for module QtPlatformSupport
Found module QtPrintSupport in /home/frederik/dev/qt/qt-src-
dev//qtbase/src/printsupport/printsupport.pro
 - Module has 9 public headers now
 - QtPrintSupport.diff created
Found module QtSql in /home/frederik/dev/qt/qt-src-dev//qtbase/src/sql/sql.pro
 - Module has 14 public headers now
 - QtSql.diff created
Found module QtTest in /home/frederik/dev/qt/qt-src-
dev//qtbase/src/testlib/testlib.pro
 - Module has 18 public headers now
 - QtTest.diff created
Found module QtWidgets in /home/frederik/dev/qt/qt-src-
dev//qtbase/src/widgets/widgets.pro
 - Module has 135 public headers now
 - QtWidgets.diff created
Found module qtmain in /home/frederik/dev/qt/qt-src-
dev//qtbase/src/winmain/winmain.pro
 - No public headers for module qtmain
Found module QtXml in /home/frederik/dev/qt/qt-src-dev//qtbase/src/xml/xml.pro
 - Module has 3 public headers now
 - QtXml.diff created
Found module QtBluetooth in /home/frederik/dev/qt/qt-src-
dev//qtconnectivity/src/bluetooth/bluetooth.pro
 - Module has 19 public headers now
 - QtBluetooth.diff created
Found module QtNfc in /home/frederik/dev/qt/qt-src-
dev//qtconnectivity/src/nfc/nfc.pro
 - Module has 12 public headers now
 - QtNfc.diff created
Found module QtQuickParticles in /home/frederik/dev/qt/qt-src-
dev//qtdeclarative/src/particles/particles.pro
 - No public headers for module QtQuickParticles
Found module QtQml in /home/frederik/dev/qt/qt-src-
dev//qtdeclarative/src/qml/qml.pro
 - Module has 27 public headers now
 - QtQml.diff created
Found module QtQmlDevTools in /home/frederik/dev/qt/qt-src-
dev//qtdeclarative/src/qmldevtools/qmldevtools.pro
 - No public headers for module QtQmlDevTools
Found module QtQuickTest in /home/frederik/dev/qt/qt-src-
dev//qtdeclarative/src/qmltest/qmltest.pro
 - Module has 2 public headers now
 - QtQuickTest.diff created
Found module QtQuick in /home/frederik/dev/qt/qt-src-
dev//qtdeclarative/src/quick/quick.pro
 - Module has 24 public headers now
 - QtQuick.diff created
Found module QtQuickWidgets in /home/frederik/dev/qt/qt-src-
dev//qtdeclarative/src/quickwidgets/quickwidgets.pro
 - Module has 2 public headers now
 - QtQuickWidgets.diff created
Found module QtDocGallery in /home/frederik/dev/qt/qt-src-
dev//qtdocgallery/src/gallery/gallery.pro
 - Module has 14 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module Enginio in /home/frederik/dev/qt/qt-src-
dev//qtenginio/src/enginio_client/enginio_client.pro
 - Module has 10 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module enginioplugin in /home/frederik/dev/qt/qt-src-
dev//qtenginio/src/enginio_plugin/enginio_plugin.pro
 - No public headers for module enginioplugin
Found module QtFeedback in /home/frederik/dev/qt/qt-src-
dev//qtfeedback/src/feedback/feedback.pro
 - Module has 5 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module QtJsonDb in /home/frederik/dev/qt/qt-src-
dev//qtjsondb/src/client/client.pro
 - No public headers for module QtJsonDb
Found module jsondb in /home/frederik/dev/qt/qt-src-
dev//qtjsondb/src/daemon/daemon.pro
 - No public headers for module jsondb
Found module QtJsonDbJsonStream in /home/frederik/dev/qt/qt-src-
dev//qtjsondb/src/jsonstream/jsonstream.pro
 - No public headers for module QtJsonDbJsonStream
Found module QtJsonDbPartition in /home/frederik/dev/qt/qt-src-
dev//qtjsondb/src/partition/partition.pro
 - No public headers for module QtJsonDbPartition
Found module QtLocation in /home/frederik/dev/qt/qt-src-
dev//qtlocation/src/location/location.pro
 - Module has 42 public headers now
 - QtLocation.diff created
Found module QtPositioning in /home/frederik/dev/qt/qt-src-
dev//qtlocation/src/positioning/positioning.pro
 - Module has 15 public headers now
 - QtPositioning.diff created
Found module QtMacExtras in /home/frederik/dev/qt/qt-src-
dev//qtmacextras/src/macextras/macextras.pro
 - No public headers for module QtMacExtras
Found module qgsttools_p in /home/frederik/dev/qt/qt-src-
dev//qtmultimedia/src/gsttools/gsttools.pro
 - No public headers for module qgsttools_p
Found module QtMultimedia in /home/frederik/dev/qt/qt-src-
dev//qtmultimedia/src/multimedia/multimedia.pro
 - Module has 79 public headers now
 - QtMultimedia.diff created
Found module QtMultimediaWidgets in /home/frederik/dev/qt/qt-src-
dev//qtmultimedia/src/multimediawidgets/multimediawidgets.pro
 - Module has 5 public headers now
 - QtMultimediaWidgets.diff created
Found module QtMultimediaQuick_p in /home/frederik/dev/qt/qt-src-
dev//qtmultimedia/src/qtmultimediaquicktools/qtmultimediaquicktools.pro
 - Module has 3 public headers now
 - QtMultimediaQuick_p.diff created
Found module QtContacts in /home/frederik/dev/qt/qt-src-
dev//qtpim/src/contacts/contacts.pro
 - Module has 67 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module QtOrganizer in /home/frederik/dev/qt/qt-src-
dev//qtpim/src/organizer/organizer.pro
 - Module has 71 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module QtVersit in /home/frederik/dev/qt/qt-src-
dev//qtpim/src/versit/versit.pro
 - Module has 9 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module QtVersitOrganizer in /home/frederik/dev/qt/qt-src-
dev//qtpim/src/versitorganizer/versitorganizer.pro
 - Module has 5 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module QtDeclarative in /home/frederik/dev/qt/qt-src-
dev//qtquick1/src/declarative/declarative.pro
 - Module has 23 public headers now
 - QtDeclarative.diff created
Found module qtquickcontrolsplugin in /home/frederik/dev/qt/qt-src-
dev//qtquickcontrols/src/controls/controls.pro
 - No public headers for module qtquickcontrolsplugin
Found module dialogplugin in /home/frederik/dev/qt/qt-src-
dev//qtquickcontrols/src/dialogs/dialogs.pro
 - No public headers for module dialogplugin
Found module qtquickextrasplugin in /home/frederik/dev/qt/qt-src-
dev//qtquickcontrols/src/extras/extras.pro
 - No public headers for module qtquickextrasplugin
Found module qquicklayoutsplugin in /home/frederik/dev/qt/qt-src-
dev//qtquickcontrols/src/layouts/layouts.pro
 - No public headers for module qquicklayoutsplugin
Found module widgetsplugin in /home/frederik/dev/qt/qt-src-
dev//qtquickcontrols/src/widgets/widgets.pro
 - No public headers for module widgetsplugin
Found module QtQuickCalendar in /home/frederik/dev/qt/qt-src-
dev//qtquickcontrols2/src/calendar/calendar.pro
 - No public headers for module QtQuickCalendar
Found module QtQuickControls in /home/frederik/dev/qt/qt-src-
dev//qtquickcontrols2/src/controls/controls.pro
 - No public headers for module QtQuickControls
Found module QtQuickExtras in /home/frederik/dev/qt/qt-src-
dev//qtquickcontrols2/src/extras/extras.pro
 - No public headers for module QtQuickExtras
Found module QtScript in /home/frederik/dev/qt/qt-src-
dev//qtscript/src/script/script.pro
 - Module has 14 public headers now
 - QtScript.diff created
Found module QtScriptTools in /home/frederik/dev/qt/qt-src-
dev//qtscript/src/scripttools/scripttools.pro
 - Module has 1 public headers now
 - QtScriptTools.diff created
Found module QtSensors in /home/frederik/dev/qt/qt-src-
dev//qtsensors/src/sensors/sensors.pro
 - Module has 26 public headers now
 - QtSensors.diff created
Found module QtSerialPort in /home/frederik/dev/qt/qt-src-
dev//qtserialport/src/serialport/serialport.pro
 - Module has 3 public headers now
 - QtSerialPort.diff created
Found module QtTextToSpeech in /home/frederik/dev/qt/qt-src-
dev//qtspeech/src/tts/tts.pro
 - No public headers for module QtTextToSpeech
Found module QtSvg in /home/frederik/dev/qt/qt-src-dev//qtsvg/src/svg/svg.pro
 - Module has 5 public headers now
 - QtSvg.diff created
Found module QtPublishSubscribe in /home/frederik/dev/qt/qt-src-
dev//qtsystems/src/publishsubscribe/publishsubscribe.pro
 - Module has 4 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module QtServiceFramework in /home/frederik/dev/qt/qt-src-
dev//qtsystems/src/serviceframework/serviceframework.pro
 - Module has 9 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module QtSystemInfo in /home/frederik/dev/qt/qt-src-
dev//qtsystems/src/systeminfo/systeminfo.pro
 - Module has 5 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module QtWaylandClient in /home/frederik/dev/qt/qt-src-
dev//qtwayland/src/client/client.pro
 - No public headers for module QtWaylandClient
Found module QtCompositor in /home/frederik/dev/qt/qt-src-
dev//qtwayland/src/compositor/compositor.pro
 - No public headers for module QtCompositor
Found module QtWebChannel in /home/frederik/dev/qt/qt-src-
dev//qtwebchannel/src/webchannel/webchannel.pro
 - Module has 4 public headers now
 - QtWebChannel.diff created
Found module QtWebEngine in /home/frederik/dev/qt/qt-src-
dev//qtwebengine/src/webengine/webengine.pro
 - Module has 1 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module QtWebEngineWidgets in /home/frederik/dev/qt/qt-src-
dev//qtwebengine/src/webenginewidgets/webenginewidgets.pro
 - Module has 10 public headers now
fatal: bad revision 'origin/5.4.2..origin/5.5.0'
 - Git failed, skipping
Found module QtWebSockets in /home/frederik/dev/qt/qt-src-
dev//qtwebsockets/src/websockets/websockets.pro
 - Module has 6 public headers now
 - QtWebSockets.diff created
Found module declarative_webview in /home/frederik/dev/qt/qt-src-
dev//qtwebview/src/imports/imports.pro
 - No public headers for module declarative_webview
Found module QtAndroidWebView in /home/frederik/dev/qt/qt-src-
dev//qtwebview/src/jar/bundledjar.pro
 - No public headers for module QtAndroidWebView
Found module QtAndroidWebView in /home/frederik/dev/qt/qt-src-
dev//qtwebview/src/jar/distributedjar.pro
 - No public headers for module QtAndroidWebView
Found module QtWebView in /home/frederik/dev/qt/qt-src-
dev//qtwebview/src/webview/webview.pro
 - No public headers for module QtWebView
Found module QtWinExtras in /home/frederik/dev/qt/qt-src-
dev//qtwinextras/src/winextras/winextras.pro
 - No public headers for module QtWinExtras
Found module QtX11Extras in /home/frederik/dev/qt/qt-src-
dev//qtx11extras/src/x11extras/x11extras.pro
 - Module has 2 public headers now
 - QtX11Extras.diff created
Found module QtXmlPatterns in /home/frederik/dev/qt/qt-src-
dev//qtxmlpatterns/src/xmlpatterns/xmlpatterns.pro
 - Module has 15 public headers now
 - QtXmlPatterns.diff created

Results
Modules with no public headers:
        QtAndroidExtras
        QtAndroidWebView
        QtAndroidWebView
        QtCompositor
        QtJsonDb
        QtJsonDbJsonStream
        QtJsonDbPartition
        QtMacExtras
        QtPlatformSupport
        QtQmlDevTools
        QtQuickCalendar
        QtQuickControls
        QtQuickExtras
        QtQuickParticles
        QtTextToSpeech
        QtWaylandClient
        QtWebView
        QtWinExtras
        declarative_webview
        dialogplugin
        enginioplugin
        jsondb
        qgsttools_p
        qquicklayoutsplugin
        qtmain
        qtquickcontrolsplugin
        qtquickextrasplugin
        widgetsplugin
Modules with no changes to public headers:

Modules for which Git failed to retrieve changes:
        Enginio
        Qt3DCore
        Qt3DInput
        Qt3DRenderer
        QtContacts
        QtDocGallery
        QtFeedback
        QtOrganizer
        QtPublishSubscribe
        QtServiceFramework
        QtSystemInfo
        QtVersit
        QtVersitOrganizer
        QtWebEngine
        QtWebEngineWidgets

From aleixpol at kde.org  Thu Jun  4 16:01:01 2015
From: aleixpol at kde.org (Aleix Pol)
Date: Thu, 4 Jun 2015 16:01:01 +0200
Subject: [Development] Q_OBJECT and "override"
In-Reply-To: <AM3PR02MB097348D9D22BDB4447B24668DB30@AM3PR02MB097.eurprd02.prod.outlook.com>
References: <55704095.3000201@theqtcompany.com>
	<AM3PR02MB097348D9D22BDB4447B24668DB30@AM3PR02MB097.eurprd02.prod.outlook.com>
Message-ID: <CACcA1Ro8R-Nc9X0jXW_b3CCfGQBYHUJriaew4TJoLkbWn3sDgw@mail.gmail.com>

On Thu, Jun 4, 2015 at 2:41 PM, Bornemann Joerg
<Joerg.Bornemann at theqtcompany.com> wrote:
>
>> 1) Add "override" (or rather Q_DECL_OVERRIDE) to the definition of
>> Q_OBJECT *and* all QObject-derived classes in Qt.
> [...]
>> 2) Remove "override" from all QObject-derived classes in Qt.
> [...]
>> 3) Explicitly disable the warning in the clang mkspecs.
> [...]
>> 4) Let users deal with the problem by making them turn the warning off.
> [...]
>
> 1) is the thing to do, but OTOH it's a lot of work with questionable gain.
* snip *

> 2) and 4) are very wrong. IMO, we shouldn't do this.
> 3) could be a good compromise. There's a variant of this solution by turning the warning off
> at the beginning of every header and turning it on again at the end.
> We once had the QT_{BEGIN|END}_HEADER macros which could expand to
>
> #pragma clang diagnostic push
> #pragma clang diagnostic ignored "-Wannoyingwarning"
>
> and repectively
>
> #pragma clang diagnostic pop
>
> This way the warning can be turned on for user code.
>
>
> BR,
>
> Joerg

Is it really that much work? I hear there's tools to do so [1] and
it's the compiler telling whether it's correct or not.

Aleix

[1] http://clang.llvm.org/extra/ModernizerUsage.html

From mw_triad at users.sourceforge.net  Thu Jun  4 16:27:49 2015
From: mw_triad at users.sourceforge.net (Matthew Woehlke)
Date: Thu, 04 Jun 2015 10:27:49 -0400
Subject: [Development] Q_OBJECT and "override"
In-Reply-To: <55704095.3000201@theqtcompany.com>
References: <55704095.3000201@theqtcompany.com>
Message-ID: <mkpn95$81e$1@ger.gmane.org>

On 2015-06-04 08:12, Christian Kandeler wrote:
> as anyone who uses clang has probably already noticed, this compiler has
> recently added "-Winconsistent-missing-override" to the collection of
> flags enabled via "-Wall".

What happens if you (push state and) disable the warning at the start of
the Q_OBJECT expansion, and pop state after?

Ideally this would tell clang to not consider those functions for the
purpose of the warning. (And maybe the clang developers would be
amenable to making it work that way if it doesn't currently.)

p.s. I don't use clang, but if I did I would probably have this switched
on as an *error*. Thus, I at least would like to see a solution that
doesn't involve turning it off globally.

--
Matthew


From ritt.ks at gmail.com  Thu Jun  4 16:52:37 2015
From: ritt.ks at gmail.com (Konstantin Ritt)
Date: Thu, 4 Jun 2015 17:52:37 +0300
Subject: [Development] Q_OBJECT and "override"
In-Reply-To: <mkpn95$81e$1@ger.gmane.org>
References: <55704095.3000201@theqtcompany.com> <mkpn95$81e$1@ger.gmane.org>
Message-ID: <CAGVE+RntxAxfhhZ_EtJbepvpf5zr=-UedpwS4gqCQTFHtOaZLQ@mail.gmail.com>

#define Q_OBJECT \

public: \

    Q_OBJECT_CHECK \

    QT_WARNING_PUSH \

    Q_OBJECT_NO_OVERRIDE_WARNING \

    static const QMetaObject staticMetaObject; \

    virtual const QMetaObject *metaObject() const; \

    virtual void *qt_metacast(const char *); \

    virtual int qt_metacall(QMetaObject::Call, int, void **); \

    QT_WARNING_POP \

    QT_TR_FUNCTIONS \

private: \

    Q_DECL_HIDDEN_STATIC_METACALL static void
qt_static_metacall(QObject *, QMetaObject::Call, int, void **); \

    struct QPrivateSignal {};


Regards,
Konstantin

2015-06-04 17:27 GMT+03:00 Matthew Woehlke <mw_triad at users.sourceforge.net>:

> On 2015-06-04 08:12, Christian Kandeler wrote:
> > as anyone who uses clang has probably already noticed, this compiler has
> > recently added "-Winconsistent-missing-override" to the collection of
> > flags enabled via "-Wall".
>
> What happens if you (push state and) disable the warning at the start of
> the Q_OBJECT expansion, and pop state after?
>
> Ideally this would tell clang to not consider those functions for the
> purpose of the warning. (And maybe the clang developers would be
> amenable to making it work that way if it doesn't currently.)
>
> p.s. I don't use clang, but if I did I would probably have this switched
> on as an *error*. Thus, I at least would like to see a solution that
> doesn't involve turning it off globally.
>
> --
> Matthew
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150604/bab7f724/attachment.html

From oswald.buddenhagen at theqtcompany.com  Thu Jun  4 16:55:03 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Thu, 4 Jun 2015 16:55:03 +0200
Subject: [Development] Q_OBJECT and "override"
In-Reply-To: <AM3PR02MB097348D9D22BDB4447B24668DB30@AM3PR02MB097.eurprd02.prod.outlook.com>
References: <55704095.3000201@theqtcompany.com>
	<AM3PR02MB097348D9D22BDB4447B24668DB30@AM3PR02MB097.eurprd02.prod.outlook.com>
Message-ID: <20150604145503.GB7002@troll08.it.local>

On Thu, Jun 04, 2015 at 12:41:23PM +0000, Bornemann Joerg wrote:
> > 1) Add "override" (or rather Q_DECL_OVERRIDE) to the definition of
> > Q_OBJECT *and* all QObject-derived classes in Qt.
> [...]
> > 2) Remove "override" from all QObject-derived classes in Qt.
> [...]
> > 3) Explicitly disable the warning in the clang mkspecs.
> [...]
> > 4) Let users deal with the problem by making them turn the warning off.
> [...]
>
> 1) is the thing to do, but OTOH it's a lot of work with questionable gain.
>
1b) would be making the addition conditional on an external define. this
way each (sub-)project (including qt modules) can decide if/when it adjusts.

fwiw, i don't think the gain would be questionable at all.

From christian.kandeler at theqtcompany.com  Thu Jun  4 17:02:52 2015
From: christian.kandeler at theqtcompany.com (Christian Kandeler)
Date: Thu, 4 Jun 2015 17:02:52 +0200
Subject: [Development] Q_OBJECT and "override"
In-Reply-To: <CAGVE+RntxAxfhhZ_EtJbepvpf5zr=-UedpwS4gqCQTFHtOaZLQ@mail.gmail.com>
References: <55704095.3000201@theqtcompany.com> <mkpn95$81e$1@ger.gmane.org>
	<CAGVE+RntxAxfhhZ_EtJbepvpf5zr=-UedpwS4gqCQTFHtOaZLQ@mail.gmail.com>
Message-ID: <5570689C.3090006@theqtcompany.com>

On 06/04/2015 04:52 PM, Konstantin Ritt wrote:
> #define  Q_OBJECT  \
>
> public:  \
>
>      Q_OBJECT_CHECK  \
>
>      QT_WARNING_PUSH  \
>
>      Q_OBJECT_NO_OVERRIDE_WARNING  \
>
>      static  const  QMetaObject  staticMetaObject;  \
>
>      virtual  const  QMetaObject  *metaObject()  const;  \
>
>      virtual  void  *qt_metacast(const  char  *);  \
>
>      virtual  int  qt_metacall(QMetaObject::Call,  int,  void  **);  \
>
>      QT_WARNING_POP  \

Oh, this is already in 5.5... I overlooked it somehow. Well, that makes
this thread kinda pointless. Sorry about the noise (if the construct
above indeed works).


Christian

From Morten.Sorvig at theqtcompany.com  Thu Jun  4 22:46:17 2015
From: Morten.Sorvig at theqtcompany.com (Sorvig Morten)
Date: Thu, 4 Jun 2015 20:46:17 +0000
Subject: [Development] Cross-platform high-DPI Qt tech preview
Message-ID: <5A7D838A-C76B-43E6-ACE1-9F7CC5CBA2CD@digia.com>

We are happy to share the results of our work on cross-platform high-DPI scaling in Qt, which is planned for Qt 5.6. It is now at a stage where it can be tested by others. You can get the code from our branch in qtbase: wip/highdpi. The branch is open for business, and contributions are welcome. We also have a IRC channel: #qt-highdpi on Freenode. There will also be a session in the Qt Contributors? Summit this weekend. :)

Quick Getting Started

There are three ways to test the high-DPI scaling:

1) Set QT_SCALE_FACTOR (to a number  != 1) and run your favorite Qt app.
2) Try the DPI scale slider in tests/manual/highdpi .
3) Set QT_AUTO_SCREEN_SCALE_FACTOR=1 on Windows or X11 multi-screen setups.

The rest of this mail will describe the changes in detail.

This project is a part of a larger effort of making Qt more resolution independent. There are two approaches in development:

1) Adding resolution independent units to QML / Qt Quick.
2) Scaling with devicePixelRatio.

This project is part of ?Scaling with devicePixelRatio?: implementing devicePixelRatio scaling in cross-platform Qt code. We have had unofficial scaling support for X11 and Windows in Qt 5.4 and 5.5. That was implemented completely in the platform plugins. The main benefits of now moving the scaling logic to QtGui are:

1) Support for devicePixelRatio scaling on platforms that have limited or no native support. (X11, Windows, Android, Embedded linux)
2) Improving the developer experience: any devicePixelRatio can be simulated on any hardware.
3) Support for ?de-scaling? on platforms that natively scales: Qt application can operate entierly in device pixels.

Sidebar: How does devicePixelRatio scaling work again?
devicePixelRatio scaling works by virtualizing the main coordinate system seen by applications. The ?pixel? coordinate system is split into two: device independent pixels and device pixels. Window and event geometry is specified in device independent pixels which are closely related to visual size. Backing stores and graphics output in general are in device pixels which are closely related to the display resolution.

Project Scope

devicePixelRatio scaling is best implemented as a part of the Windowing system, at least for production use. Depending in the level of operating system support the Qt scaling Depending in the level of operating system support the Qt scaling will have known edge case bugs. This also varies with the use case: A single screen with a fullscreen window is relatively simple, multi-screen desktop environments are more complex.

Officially, we aim to support only integer scale factors. However, fractional scale factors do work, since we use qreal everywhere. This means that developers can test and evaluate the effects of fractional scale factors, and it also gives the end user the option to decide whether the results are acceptable or not.

Implementation Overview

The high-DPI patches inserts a coordinate scaling layer in the lower parts of QtGui and introduces a new coordinate system: native pixels. The platform plugins now operate in native pixels and are mostly unaware of the scaling layer added to QtGui. Native pixels are internal to Qt and are not exposed to applications.

Proper layering now becomes more important, effectively restricting where certain API can be called from.

* In the platform plugins: Don?t use QWindow. QPlatformWindow now has geometry accessor convenience functions.
* In the platform plugins: Don?t call QGuiApplication, go through QWindowSystemInterface.
* In QtGui: Don?t use QPlatformFoo classes outside of the corresponding QFoo class (QPlatformWindow, QPlatformScreen)
* In auto tests: Don?t call QWindowSystemInterface, use the QTest event synth. functions.

These are not set-in-stone rules. If you find you need to break one of them, add QHighDpi scaling calls.

API For Setting Scale Factors

(note that since this mail goes to development@ we?re also discussing private API here, which may change or be removed.)

Environment variables:

* QT_DEVICE_PIXEL_RATIO: Now deprecated (but still supported in 5.6).
* QT_SCALE_FACTOR: Sets a global scale factor for the process.
* QT_AUTO_SCREEN_SCALE_FACTOR: Enables a per-screen scale factor defined by the platform plugin based on the physical DPI of each screen. Currently implemented on Xcb and Windows.

Private API:
	QPlatformScreen:pixelDensity() : Tells Qt to apply the given scale factor to all windows on a screen.
	QHighDpiScaling::setScreenFactor(QScreen *, factor): set a screen scaling factor at run-time.  Currently used by the tests/manual/highdpi manual test.

API For Accessing devicePIxelRatio

The devicePixelRatio is the product of the OS and Qt scale factors. The preferred accessor functions are:

	QWindow::devicePixelRatio()
	QPaintDevice::devicePixelRatioF()

For QtGui implementation work the principal functions for converting between native and device independent pixels are:

	T fromNativePixels(T, QWindow *)
	T toNativePixels(T, QWindow *)

plus a number of overloads and variants for handling special cases (screen position mapping, window screen change, etc.). We are currently working on reducing and managing the overload set.

Signed,
Paul, Morten, Friedemann (in absentia)


From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:34 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:34 +0200
Subject: [Development] Qt 5.5.0 header diff: QtSensors.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <4385722.PyXSWR0T9R@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtSensors.diff
Type: text/x-patch
Size: 209 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/e520ef74/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:37 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:37 +0200
Subject: [Development] Qt 5.5.0 header diff: QtQuickTest.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <3312559.9goBsQeUnI@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtQuickTest.diff
Type: text/x-patch
Size: 153 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/a1bc0cdf/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:37 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:37 +0200
Subject: [Development] Qt 5.5.0 header diff: QtLocation.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <6261744.tkdLD445ve@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtLocation.diff
Type: text/x-patch
Size: 636 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/a0dc6a12/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:35 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:35 +0200
Subject: [Development] Qt 5.5.0 header diff: QtOpenGLExtensions.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <2632215.syc9jZgTj6@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtOpenGLExtensions.diff
Type: text/x-patch
Size: 221 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/afbf7553/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:39 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:39 +0200
Subject: [Development] Qt 5.5.0 header diff: QtConcurrent.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <11378874.GLcoUZBEEy@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtConcurrent.diff
Type: text/x-patch
Size: 716 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/2821b9d5/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:41 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:41 +0200
Subject: [Development] Qt 5.5.0 header diff: QtNfc.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <15415845.QQ8kWqcWzS@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtNfc.diff
Type: text/x-patch
Size: 1220 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/3f654dc8/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:38 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:38 +0200
Subject: [Development] Qt 5.5.0 header diff: QtGui.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <2177208.XkNCe2Jqgd@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtGui.diff
Type: text/x-patch
Size: 326701 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/1645f403/attachment-0001.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:42 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:42 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimediaQuick_p.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <2367453.pju45CvlIl@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtMultimediaQuick_p.diff
Type: text/x-patch
Size: 1343 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/dc2fe8e2/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:43 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:43 +0200
Subject: [Development] Qt 5.5.0 header diff: QtWebChannel.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <23501821.llWBKmNAYd@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtWebChannel.diff
Type: text/x-patch
Size: 185 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/2e1668e1/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:44 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:44 +0200
Subject: [Development] Qt 5.5.0 header diff: QtSvg.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1672691.GYKKPxvrAS@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtSvg.diff
Type: text/x-patch
Size: 165 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/ded84dba/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:45 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:45 +0200
Subject: [Development] Qt 5.5.0 header diff: QtXmlPatterns.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1809637.0tBliLTZCz@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtXmlPatterns.diff
Type: text/x-patch
Size: 241 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/4630d051/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:46 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:46 +0200
Subject: [Development] Qt 5.5.0 header diff: QtQuickWidgets.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <8336209.CUrKNWMaJN@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtQuickWidgets.diff
Type: text/x-patch
Size: 1328 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/a217ebfd/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:47 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:47 +0200
Subject: [Development] Qt 5.5.0 header diff: QtTest.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1546666.HYLWss0tDD@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtTest.diff
Type: text/x-patch
Size: 9490 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/ef526107/attachment-0001.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:47 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:47 +0200
Subject: [Development] Qt 5.5.0 header diff: QtSerialPort.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <13919351.W98SSLMXGs@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtSerialPort.diff
Type: text/x-patch
Size: 3663 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/9c445259/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:48 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:48 +0200
Subject: [Development] Qt 5.5.0 header diff: QtDBus.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <3366959.rCAOlxOqDL@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtDBus.diff
Type: text/x-patch
Size: 5027 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/0aac3242/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:49 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:49 +0200
Subject: [Development] Qt 5.5.0 header diff: QtDeclarative.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <4626122.JzJB5NSHdj@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtDeclarative.diff
Type: text/x-patch
Size: 237 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/5925323b/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:50 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:50 +0200
Subject: [Development] Qt 5.5.0 header diff: QtPositioning.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <4062838.8hLyuFTaXD@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtPositioning.diff
Type: text/x-patch
Size: 4807 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/aeac1155/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:51 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:51 +0200
Subject: [Development] Qt 5.5.0 header diff: QtScript.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <2534626.uQvBOehyAq@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtScript.diff
Type: text/x-patch
Size: 173 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/66ea6e84/attachment-0001.bin

From simon.hausmann at theqtcompany.com  Fri Jun  5 10:11:41 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Fri, 5 Jun 2015 10:11:41 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <11849439.KJOb97XXYY@simon-sx58>

On Thursday, June 04, 2015 03:29:10 PM Frederik Gladhorn wrote:
[...]
> Modules for which Git failed to retrieve changes:
[...]
>         QtWebEngine
>         QtWebEngineWidgets

Oops, I suppose we do need to look at the diffs for those though?


Simon

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:52 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:52 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1976461.3aPASfonOU@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtMultimedia.diff
Type: text/x-patch
Size: 7659 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/3f01b7b3/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:53 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:53 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimediaWidgets.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <6547579.Lu5gtAv9iz@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtMultimediaWidgets.diff
Type: text/x-patch
Size: 225 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/7cf1a359/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:10:54 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:10:54 +0200
Subject: [Development] Qt 5.5.0 header diff: QtX11Extras.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1464701.R6Mqf1RKeC@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtX11Extras.diff
Type: text/x-patch
Size: 193 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/3cb46329/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:19 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:19 +0200
Subject: [Development] Qt 5.5.0 header diff: QtWebSockets.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <3834820.72aHHOlcql@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtWebSockets.diff
Type: text/x-patch
Size: 185 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/c6ea5cc8/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:20 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:20 +0200
Subject: [Development] Qt 5.5.0 header diff: QtQuick.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <2259422.RehQiycJvK@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtQuick.diff
Type: text/x-patch
Size: 8480 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/8da67e85/attachment-0001.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:21 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:21 +0200
Subject: [Development] Qt 5.5.0 header diff: QtPrintSupport.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1488979.3gsVCJHsAy@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtPrintSupport.diff
Type: text/x-patch
Size: 6027 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/8c1728ac/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:22 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:22 +0200
Subject: [Development] Qt 5.5.0 header diff: QtScriptTools.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1512483.i68qgNmILq@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtScriptTools.diff
Type: text/x-patch
Size: 257 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/63a86606/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:23 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:23 +0200
Subject: [Development] Qt 5.5.0 header diff: QtOpenGL.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1708492.UtK0z6Ms35@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtOpenGL.diff
Type: text/x-patch
Size: 2880 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/3431708c/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:25 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:25 +0200
Subject: [Development] Qt 5.5.0 header diff: QtBluetooth.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <3312559.9fjI1Dg1ho@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtBluetooth.diff
Type: text/x-patch
Size: 15717 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/a196c665/attachment-0001.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:26 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:26 +0200
Subject: [Development] Qt 5.5.0 header diff: QtSql.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1835064.CmCkqvDHXM@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtSql.diff
Type: text/x-patch
Size: 7815 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/8bb76f14/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:24 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:24 +0200
Subject: [Development] Qt 5.5.0 header diff: QtXml.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <2164084.8YIbvi7b91@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtXml.diff
Type: text/x-patch
Size: 6930 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/29da0aae/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:29 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:29 +0200
Subject: [Development] Qt 5.5.0 header diff: QtNetwork.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1776078.inY8qUWLlI@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtNetwork.diff
Type: text/x-patch
Size: 20855 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/566a3a35/attachment-0001.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:27 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:27 +0200
Subject: [Development] Qt 5.5.0 header diff: QtWidgets.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1931284.uvrcYbAkYc@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtWidgets.diff
Type: text/x-patch
Size: 211786 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/1f00fe6a/attachment-0001.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:30 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:30 +0200
Subject: [Development] Qt 5.5.0 header diff: QtQml.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <1458755.ei2G0iPh77@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtQml.diff
Type: text/x-patch
Size: 4167 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/c2b4c6c1/attachment.bin

From frederik.gladhorn at theqtcompany.com  Fri Jun  5 10:11:28 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Fri, 5 Jun 2015 10:11:28 +0200
Subject: [Development] Qt 5.5.0 header diff: QtCore.diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <3267312.MdcMplLC6g@frederik-thinkcentre-m93p>


-------------- next part --------------
A non-text attachment was scrubbed...
Name: QtCore.diff
Type: text/x-patch
Size: 394695 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/38030604/attachment-0001.bin

From simon.hausmann at theqtcompany.com  Fri Jun  5 12:24:36 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Fri, 5 Jun 2015 12:24:36 +0200
Subject: [Development] Qt 5.5.0 header diff: QtQml.diff
In-Reply-To: <1458755.ei2G0iPh77@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1458755.ei2G0iPh77@frederik-thinkcentre-m93p>
Message-ID: <2759129.5JvK7DuRrG@simon-sx58>

On Friday, June 05, 2015 10:11:30 AM Frederik Gladhorn wrote:
>

There's a bug in this diff:

--- a/src/qml/qml/qqmlerror.h
+++ b/src/qml/qml/qqmlerror.h
@@ -68,8 +68,6 @@ public:
     const char *data() const;
     QByteArray dataByteArray() const;

-    QByteArray metaData(const QString &) const;
-
     void load(QQmlEngine *, const QUrl &);
     void load(QQmlEngine *, const QString &);

@@ -84,24 +82,11 @@ public:
     static bool isSynchronous(const QString &url);
     static bool isSynchronous(const QUrl &url);

-    static bool isBundle(const QString &url);
-    static bool isBundle(const QUrl &url);
-
     static bool isLocalFile(const QString &url);
     static bool isLocalFile(const QUrl &url);

     static QString urlToLocalFileOrQrc(const QString &);
     static QString urlToLocalFileOrQrc(const QUrl &);
-
-    static bool bundleDirectoryExists(const QString &, QQmlEngine *);
-    static bool bundleDirectoryExists(const QUrl &, QQmlEngine *);
-
-    static bool bundleFileExists(const QString &, QQmlEngine *);
-    static bool bundleFileExists(const QUrl &, QQmlEngine *);
-
-    static QString bundleFileName(const QString &, QQmlEngine *);
-    static QString bundleFileName(const QUrl &, QQmlEngine *);
-
 private:
     Q_DISABLE_COPY(QQmlFile)
     QQmlFilePrivate *d;

Those changes were not on qqmlerror.h but on qqmlfile.h. However the class in
question - while exported - is marked as \internal in the docs.

If it's ok with everyone, then I'll rename qqmfile.h into qqmlfile_p.h.



Simon

From giuseppe.dangelo at kdab.com  Fri Jun  5 13:16:49 2015
From: giuseppe.dangelo at kdab.com (Giuseppe D'Angelo)
Date: Fri, 05 Jun 2015 13:16:49 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <55718521.10701@kdab.com>

Il 04/06/2015 15:29, Frederik Gladhorn ha scritto:
> I'll send mails in reply to this one with the diffs attached (that will take a
> while).

I see that a ton of changes are simply style refactorings -- adding
Q_DECL_OVERRIDE, dropping Q_NO_USING, moving Q_ENUMS to Q_ENUM.

Any chance of getting a diff without the noise from those? :\

Anyhow, thank you for taking charge of this.

Cheers,
--
Giuseppe D'Angelo | giuseppe.dangelo at kdab.com | Software Engineer
KDAB (UK) Ltd., a KDAB Group company | Tel: UK +44-1625-809908
KDAB - The Qt Experts

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4048 bytes
Desc: Firma crittografica S/MIME
Url : http://lists.qt-project.org/pipermail/development/attachments/20150605/ac38b568/attachment.bin

From sean.harmer at kdab.com  Fri Jun  5 14:30:58 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Fri, 05 Jun 2015 13:30:58 +0100
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <mkmg10$83o$1@ger.gmane.org>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<mkmg10$83o$1@ger.gmane.org>
Message-ID: <2205273.jfZCdWezOX@cartman>

On Wednesday 03 Jun 2015 11:05:35 Tim Blechmann wrote:
> > We are quite close to Qt 5.5.0 RC & final releases. Plan is to put RC
> > out Thu 11.6.2015 & Final Tue 23.6.2015. To be able to keep the schedule
> > we need to make sure all real blockers are fixed in RC so that it will
> > be really RC & there won't be so much changes between RC & Final.  So
> > following tasks needs to be done immediately:
> >
> >
> > - Please try to fix all blockers during this week so that we can create
> > RC packages at the beginning of next one. Blocker list here:
> > https://bugreports.qt.io/browse/QTBUG-44654
>
> could QTBUG-46143 possibly be added to the list of blockers? it is a P1
> bug in qt3d/qt5.5, as it does not build against the macos10.8 sdk.

A day later than promised...

https://codereview.qt-project.org/#/c/113797/2

Cheers,

Sean
--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
KDAB (UK) Ltd, a KDAB Group company
Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
Mobile: +44 (0)7545 140604
KDAB - Qt Experts

From rjvbertin at gmail.com  Fri Jun  5 15:52:45 2015
From: rjvbertin at gmail.com (=?ISO-8859-1?Q?Ren=E9_J=2EV=2E?= Bertin)
Date: Fri, 05 Jun 2015 15:52:45 +0200
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <2205273.jfZCdWezOX@cartman>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<mkmg10$83o$1@ger.gmane.org> <2205273.jfZCdWezOX@cartman>
Message-ID: <3684916.o10Vjfnb58@portia.local>

On Friday June 05 2015 13:30:58 Sean Harmer wrote:

> > could QTBUG-46143 possibly be added to the list of blockers? it is a P1
> > bug in qt3d/qt5.5, as it does not build against the macos10.8 sdk.
>
> A day later than promised...
>
> https://codereview.qt-project.org/#/c/113797/2

I presume that the patch also takes care of building against earlier SDKs, at least as far as this particular issue goes?

What is the earliest OS X version on which 5.5 is supposed to work, officially?

R.

From sean.harmer at kdab.com  Fri Jun  5 19:00:42 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Fri, 05 Jun 2015 18:00:42 +0100
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <3684916.o10Vjfnb58@portia.local>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>	<mkmg10$83o$1@ger.gmane.org>
	<2205273.jfZCdWezOX@cartman> <3684916.o10Vjfnb58@portia.local>
Message-ID: <5571D5BA.6020703@kdab.com>

On 05/06/2015 14:52, Ren? J.V. Bertin wrote:
> On Friday June 05 2015 13:30:58 Sean Harmer wrote:
>
>>> could QTBUG-46143 possibly be added to the list of blockers? it is a P1
>>> bug in qt3d/qt5.5, as it does not build against the macos10.8 sdk.
>> A day later than promised...
>>
>> https://codereview.qt-project.org/#/c/113797/2
> I presume that the patch also takes care of building against earlier SDKs, at least as far as this particular issue goes?
>
> What is the earliest OS X version on which 5.5 is supposed to work, officially?

For Qt3D, 10.8 is the oldest version handled by the CI. Given recent OS
X updates are free do you really need support for anything older?

Cheers,

Sean

--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel. Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - Qt Experts - Platform-independent software solutions


From rjvbertin at gmail.com  Fri Jun  5 20:07:52 2015
From: rjvbertin at gmail.com (=?ISO-8859-1?Q?Ren=E9_J=2EV=2E?= Bertin)
Date: Fri, 05 Jun 2015 20:07:52 +0200
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <5571D5BA.6020703@kdab.com>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<3684916.o10Vjfnb58@portia.local> <5571D5BA.6020703@kdab.com>
Message-ID: <1672484.qpn6ZozOQ0@portia.local>

On Friday June 05 2015 18:00:42 Sean Harmer wrote:

> > What is the earliest OS X version on which 5.5 is supposed to work, officially?
>
> For Qt3D, 10.8 is the oldest version handled by the CI. Given recent OS

I didn't ask about Qt3D??

> X updates are free do you really need support for anything older?

That's the perverse other side of the medal of free OS updates, and the remark surprises me coming from the managing director of a company that sells support...

Linux has always been free, yet do people feel the need not to run anything but the latest version?
The hardware to run the OS on is *not* free, and not all still perfectly functional computers will run the latest software, esp. not if it's a recent OS out of Cupertino.

Anyway, the question was not about needs I feel, but about the official stance, so that I know what to expect (and not to attempt) when I get to updating the MacPorts Qt5 port.

R.

From sean.harmer at kdab.com  Fri Jun  5 19:18:28 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Fri, 05 Jun 2015 18:18:28 +0100
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <1672484.qpn6ZozOQ0@portia.local>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>	<3684916.o10Vjfnb58@portia.local>
	<5571D5BA.6020703@kdab.com> <1672484.qpn6ZozOQ0@portia.local>
Message-ID: <5571D9E4.3080904@kdab.com>

On 05/06/2015 19:07, Ren? J.V. Bertin wrote:
> On Friday June 05 2015 18:00:42 Sean Harmer wrote:
>
>>> What is the earliest OS X version on which 5.5 is supposed to work, officially?
>> For Qt3D, 10.8 is the oldest version handled by the CI. Given recent OS
> I didn't ask about Qt3D??

But you did ask in a branch of a thread about a Qt3D change, so I
answered with respect to the part that I have knowledge about.

> X updates are free do you really need support for anything older?
> That's the perverse other side of the medal of free OS updates, and the remark surprises me coming from the managing director of a company that sells support...
>
> Linux has always been free, yet do people feel the need not to run anything but the latest version?
> The hardware to run the OS on is *not* free, and not all still perfectly functional computers will run the latest software, esp. not if it's a recent OS out of Cupertino.
>
> Anyway, the question was not about needs I feel, but about the official stance, so that I know what to expect (and not to attempt) when I get to updating the MacPorts Qt5 port.

I was asking because I'm genuinely curious about the answer. I myself am
using a Mac from 2011 that happily runs 10.10. I was not inferring that
everybody should upgrade, but wondering how much of a need still remains
to drive support for older flavours.

As a director of a company that sells support I have to justify
investments into supporting said older releases, so if there is no
requirement or demand for it then we won't consider it. As it stands
Qt3D has a minimum requirement of OpenGL 2 or OpenGL ES 2 but we don't
have support for anything older than OS X 10.8 in the CI so support for
say 10.7 can only be on a best efforts basis. Of course if somebody
wants to pay for such support, then we would be happy to investigate this.

Looking at the CI for qtbase for e.g. shows a similar story for OS X
versions but I can't say what the official support is there.

Kind regards,

Sean

--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel. Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - Qt Experts - Platform-independent software solutions


From edward.sutton at subsite.com  Fri Jun  5 20:23:34 2015
From: edward.sutton at subsite.com (Edward Sutton)
Date: Fri, 5 Jun 2015 18:23:34 +0000
Subject: [Development] Your actions needed,
 Qt5.5.0 RC & Final is nearing!
In-Reply-To: <5571D5BA.6020703@kdab.com>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<mkmg10$83o$1@ger.gmane.org> <2205273.jfZCdWezOX@cartman>
	<3684916.o10Vjfnb58@portia.local> <5571D5BA.6020703@kdab.com>
Message-ID: <FCCB2FB1-9C90-4E69-80AB-BC6ACD7BA20F@subsite.com>

>Given recent OS X updates are free do you really need support for anything older?

Supporting only OS X 10.8 and newer is reasonable IMO.


There are many good and usable Apple computers that will unfortunately live on OS X 10.8 until they die.

Anything older than this can never be updated to OS X Mavericks 10.9

https://support.apple.com/en-us/HT201364

OS X Mavericks system requirements
Learn about the system requirements for OS X Mavericks v10.9.

To install Mavericks, you need one of these Macs:

     *   iMac (Mid-2007 or later)
     *   MacBook (13-inch Aluminum, Late 2008), (13-inch, Early 2009 or later)
     *   MacBook Pro (13-inch, Mid-2009 or later)
     *   MacBook Pro (15-inch or 17-inch, Mid/Late 2007 or later)
     *   MacBook Air (Late 2008 or later)
     *   Mac mini (Early 2009 or later)
     *   Mac Pro (Early 2008 or later)
     *   Xserve (Early 2009)


-Ed



On Jun 5, 2015, at 12:00 PM, Sean Harmer <sean.harmer at kdab.com<mailto:sean.harmer at kdab.com>> wrote:

On 05/06/2015 14:52, Ren? J.V. Bertin wrote:
On Friday June 05 2015 13:30:58 Sean Harmer wrote:

could QTBUG-46143 possibly be added to the list of blockers? it is a P1
bug in qt3d/qt5.5, as it does not build against the macos10.8 sdk.
A day later than promised...

https://codereview.qt-project.org/#/c/113797/2
I presume that the patch also takes care of building against earlier SDKs, at least as far as this particular issue goes?

What is the earliest OS X version on which 5.5 is supposed to work, officially?

For Qt3D, 10.8 is the oldest version handled by the CI. Given recent OS
X updates are free do you really need support for anything older?

Cheers,

Sean

--
Dr Sean Harmer | sean.harmer at kdab.com<mailto:sean.harmer at kdab.com> | Managing Director UK
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel. Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - Qt Experts - Platform-independent software solutions

_______________________________________________
Development mailing list
Development at qt-project.org<mailto:Development at qt-project.org>
http://lists.qt-project.org/mailman/listinfo/development

This email and any files transmitted with it from The Charles Machine Works, Inc. are confidential and intended solely for the use of the individual or entity to which they are addressed. If you have received this email in error please notify the sender. Our company accepts no liability for the contents of this email, or for the consequences of any actions taken on the basis of the information provided, unless that information is subsequently confirmed in writing. Please note that any views or opinions presented in this email are solely those of the author and do not necessarily represent those of the company. Finally, the recipient should check this email and any attachments for the presence of viruses. The company accepts no liability for any damage caused by any virus transmitted by this email.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150605/24ce9b7f/attachment-0001.html

From sean.harmer at kdab.com  Fri Jun  5 20:06:07 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Fri, 05 Jun 2015 19:06:07 +0100
Subject: [Development] Qt 5.5.0 header diff: QtGui.diff
In-Reply-To: <2177208.XkNCe2Jqgd@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2177208.XkNCe2Jqgd@frederik-thinkcentre-m93p>
Message-ID: <5571E50F.50906@kdab.com>

The OpenGL changes within QtGui look sane to me. Thanks for generating
the diffs.

Cheers,

Sean

On 05/06/2015 09:10, Frederik Gladhorn wrote:
>
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development


--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel. Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - Qt Experts - Platform-independent software solutions

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150605/b44042eb/attachment.html

From rjvbertin at gmail.com  Fri Jun  5 21:13:39 2015
From: rjvbertin at gmail.com (=?ISO-8859-1?Q?Ren=E9_J=2EV=2E?= Bertin)
Date: Fri, 05 Jun 2015 21:13:39 +0200
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <5571D9E4.3080904@kdab.com>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<1672484.qpn6ZozOQ0@portia.local> <5571D9E4.3080904@kdab.com>
Message-ID: <4232457.OCZxrzlteF@patux>

On Friday June 05 2015 18:18:28 Sean Harmer wrote:

>But you did ask in a branch of a thread about a Qt3D change, so I
>answered with respect to the part that I have knowledge about.

That wasn't evident to me from the thread's subject :)

>I was asking because I'm genuinely curious about the answer. I myself am

I don't really have an answer and I'm also not trying to make a point to support back to 10.7 . MacPorts does have a more or less official policy how far back they support, but many individual ports go well beyond that, supporting even PPC Macs and thus 10.5 . 10.7 is rather common though, and I know many still use it.
My Mac from 2011 runs 10.9, I haven't yet decided if I'll go beyond that (not for another point release or 2 I think and then we'll see if it's still alive and kickin').
That said, I'd have never upgraded it from 10.6 if I'd had a chance (so I completely skipped 10.7 and 10.8), and I still miss that version for a bunch of reasons.

>using a Mac from 2011 that happily runs 10.10. I was not inferring that
>everybody should upgrade, but wondering how much of a need still remains
>to drive support for older flavours.

I simply don't know how well-used Qt is in say scientific research circles, where people 1) rarely have money for the latest & greatest and 2) have very good reasons to update as little as possible if they're not 3) locked-in to using old software that requires ditto OS and hardware.

>say 10.7 can only be on a best efforts basis. Of course if somebody
>wants to pay for such support, then we would be happy to investigate this.

Wouldn't that be your accountants' needs rather than yours? ;)

R.

From rjvbertin at gmail.com  Fri Jun  5 21:45:37 2015
From: rjvbertin at gmail.com (=?ISO-8859-1?Q?Ren=E9_J=2EV=2E?= Bertin)
Date: Fri, 05 Jun 2015 21:45:37 +0200
Subject: [Development] Fwd: [Qt bugreports] (QTBUG-46505) assertion failure
	(=> crash) in harfbuzz-shaper
Message-ID: <1484160.r5sGoJfAjs@portia.local>

Hi,

As asked in the bug report below: is it necessary to handle this situation with an assert/abort, instead of simply returning (with whatever error the void function in question can return)?

Thanks,
Ren?

----------  Forwarded Message  ----------

Subject: [Qt bugreports] (QTBUG-46505) assertion failure (=> crash) in harfbuzz-shaper
Date: Friday June 05 2015, 17:12:15
From: Ren? Bertin (via JIRA) <jira-noreply at qt-project.org>
To: rjvbertin at gmail.com

	Ren? Bertin created an issue

Qt /  QTBUG-46505
assertion failure (=> crash) in harfbuzz-shaper
Issue Type:	 Bug
Affects Versions:	 4.8.7
Assignee:	Thiago Macieira
Components:	 Core: Other
Created:	 05/Jun/15 5:12 PM
Environment:
OS X 10.9.5 with Qt 4.8.7 built through a custom MacPorts port
Priority:	 Not Evaluated
Reporter:	Ren? Bertin
I've run twice in succession into an assertion failure in harfbuzz-shaper.cpp line 484 . Sadly I cannot determine what combination of text and font cause the issue.
Is it necessary to abort here, or are there more graceful ways to handle the error?
I'm using the harfbuzz library from MacPorts, version 0.9.40 .
Code Type:       X86-64 (Native)
Parent Process:  tcsh [95718]
Responsible:     Terminal [936]
User ID:         505

Date/Time:       2015-06-05 18:47:31.627 +0200
OS Version:      Mac OS X 10.9.5 (13F1077)
Report Version:  11
Anonymous UUID:  64B814D9-356F-6F85-8341-E17C1354A330

Sleep/Wake UUID: 69ABB6DD-3D80-4B02-9FCF-EF5D156F2919

Crashed Thread:  0  Dispatch queue: com.apple.main-thread

Exception Type:  EXC_CRASH (SIGABRT)
Exception Codes: 0x0000000000000000, 0x0000000000000000

Application Specific Information:
Assertion failed: (glyph_pos == item->num_glyphs), function HB_HeuristicSetGlyphAttributes, file ../3rdparty/harfbuzz/src/harfbuzz-shaper.cpp, line 484.


Thread 0 Crashed:: Dispatch queue: com.apple.main-thread
0   libsystem_kernel.dylib        	0x00007fff8dcee292 __kill + 10
1   libkdeui.5.dylib              	0x0000000106a72706 KCrash::defaultCrashHandler(int) + 326 (kcrash.cpp:352)
2   libsystem_platform.dylib      	0x00007fff865665aa _sigtramp + 26
3   ???                           	000000000000000000 0 + 0
4   libsystem_c.dylib             	0x00007fff91d85b1a abort + 125
5   libsystem_c.dylib             	0x00007fff91d4f9bf __assert_rtn + 321
6   QtCore                        	0x0000000108206fee HB_HeuristicSetGlyphAttributes + 1102
7   QtCore                        	0x0000000108207092 HB_BasicShape + 82 (harfbuzz-shaper.cpp:618)
8   QtCore                        	0x00000001082082b1 HB_ShapeItem + 49 (harfbuzz-shaper.cpp:1420)
9   QtGui                         	0x0000000107228709 QTextEngine::shapeTextWithHarfbuzz(int) const + 3177 (qtextengine.cpp:1342)
10  QtGui                         	0x0000000107229b7a QTextEngine::shapeText(int) const + 186 (qtextengine.cpp:924)
11  QtGui                         	0x0000000107229ab0 QTextEngine::shape(int) const + 576 (qtextengine.cpp:1452)
12  QtGui                         	0x000000010722d4f9 QTextEngine::width(int, int) const + 537 (qtextengine.cpp:1687)
13  QtGui                         	0x000000010723016d QTextEngine::elidedText(Qt::TextElideMode, QFixed const&, int) const + 461 (qtextengine.cpp:2518)
14  QtGui                         	0x000000010720d7eb QFontMetrics::elidedText(QString const&, Qt::TextElideMode, int, int) const + 683 (qtextengine_p.h:653)
15  libmessagelist.4.dylib        	0x0000000115db1e56 paint_left_aligned_elided_text(QString const&, MessageList::Core::Theme::ContentItem*, QPainter*, int&, int, int&, Qt::LayoutDirection, QFont const&) + 118
16  libmessagelist.4.dylib        	0x0000000115daee1e MessageList::Core::ThemeDelegate::paint(QPainter*, QStyleOptionViewItem const&, QModelIndex const&) const + 22494
17  QtGui                         	0x00000001074cf275 QTreeView::drawRow(QPainter*, QStyleOptionViewItem const&, QModelIndex const&) const + 3813 (qtreeview.cpp:1685)
18  QtGui                         	0x00000001074cd2f3 QTreeView::drawTree(QPainter*, QRegion const&) const + 931 (qtreeview.cpp:1438)
19  QtGui                         	0x00000001074cce8a QTreeView::paintEvent(QPaintEvent*) + 346 (qabstractitemview_p.h:182)
20  QtGui                         	0x000000010708141e QWidget::event(QEvent*) + 1198 (qwidget.cpp:8546)
21  QtGui                         	0x000000010739c92d QFrame::event(QEvent*) + 45 (qframe.cpp:557)
22  QtGui                         	0x0000000107415f9c QAbstractScrollArea::viewportEvent(QEvent*) + 108 (qabstractscrollarea.cpp:1043)
23  QtGui                         	0x000000010748e0a4 QAbstractItemView::viewportEvent(QEvent*) + 1108 (qabstractitemview.cpp:1644)
24  QtGui                         	0x00000001074ccc1a QTreeView::viewportEvent(QEvent*) + 218 (qtreeview.cpp:1252)
25  QtGui                         	0x0000000107416775 QAbstractScrollAreaFilter::eventFilter(QObject*, QEvent*) + 37 (qabstractscrollarea_p.h:116)
26  QtCore                        	0x000000010829f3ec QCoreApplicationPrivate::sendThroughObjectEventFilters(QObject*, QEvent*) + 124 (qcoreapplication.cpp:1065)
27  QtGui                         	0x0000000107031bcb QApplicationPrivate::notify_helper(QObject*, QEvent*) + 235 (qapplication.cpp:4561)
28  QtGui                         	0x0000000107034b7d QApplication::notify(QObject*, QEvent*) + 7693 (qapplication.cpp:4530)
29  QtCore                        	0x000000010829f0c6 QCoreApplication::notifyInternal(QObject*, QEvent*) + 118 (qcoreapplication.cpp:968)
30  QtGui                         	0x000000010707cb90 QWidgetPrivate::drawWidget(QPaintDevice*, QRegion const&, QPoint const&, int, QPainter*, QWidgetBackingStore*) + 1984 (qwidget.cpp:5601)
31  QtGui                         	0x00000001071f5dd9 QWidgetBackingStore::sync() + 3321 (qbackingstore.cpp:1367)
32  QtGui                         	0x0000000107075c7f QWidgetPrivate::syncBackingStore() + 239 (qwidget.cpp:1894)
33  QtGui                         	0x0000000107081749 QWidget::event(QEvent*) + 2009 (qwidget.cpp:8693)
34  QtGui                         	0x00000001073b4fb1 QMainWindow::event(QEvent*) + 993 (qmainwindow.cpp:1478)
35  libkdeui.5.dylib              	0x0000000106b3058a KXmlGuiWindow::event(QEvent*) + 26 (kxmlguiwindow.cpp:126)
36  QtGui                         	0x0000000107031bdb QApplicationPrivate::notify_helper(QObject*, QEvent*) + 251 (qapplication.cpp:4565)
37  QtGui                         	0x0000000107034b7d QApplication::notify(QObject*, QEvent*) + 7693 (qapplication.cpp:4530)
38  QtCore                        	0x000000010829f0c6 QCoreApplication::notifyInternal(QObject*, QEvent*) + 118 (qcoreapplication.cpp:968)
39  QtCore                        	0x000000010829fc2e QCoreApplicationPrivate::sendPostedEvents(QObject*, int, QThreadData*) + 686 (qcoreapplication.h:231)
40  com.apple.CoreFoundation      	0x00007fff911925b1 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17
41  com.apple.CoreFoundation      	0x00007fff91183c62 __CFRunLoopDoSources0 + 242
42  com.apple.CoreFoundation      	0x00007fff911833ef __CFRunLoopRun + 831
43  com.apple.CoreFoundation      	0x00007fff91182e75 CFRunLoopRunSpecific + 309
44  com.apple.HIToolbox           	0x00007fff8f138a0d RunCurrentEventLoopInMode + 226
45  com.apple.HIToolbox           	0x00007fff8f1387b7 ReceiveNextEventCommon + 479
46  com.apple.HIToolbox           	0x00007fff8f1385bc _BlockUntilNextEventMatchingListInModeWithFilter + 65
47  com.apple.AppKit              	0x00007fff8c47624e _DPSNextEvent + 1434
48  com.apple.AppKit              	0x00007fff8c47589b -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 122
49  com.apple.AppKit              	0x00007fff8c46999c -[NSApplication run] + 553
50  QtGui                         	0x0000000106fe6a7b QEventDispatcherMac::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 2059
51  QtCore                        	0x000000010829c45f QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) + 495 (qglobal.h:2434)
52  QtCore                        	0x000000010829f677 QCoreApplication::exec() + 199 (qcoreapplication.cpp:1227)
53  kontact                       	0x00000001049309ef main + 4175
54  libdyld.dylib                 	0x00007fff91ef75fd start + 1
 	Add Comment

This message was sent by Atlassian JIRA (v6.3.9#6339-sha1:46fa261)


-----------------------------------------

From thiago.macieira at intel.com  Sat Jun  6 00:23:52 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 00:23:52 +0200
Subject: [Development] Qt 4.8.6 win32-msvc2008 compilation. error
	LNK2001: unresolved external symbol __imp__q_atomic_increment
In-Reply-To: <CAFA1cDeKwM7bCBFniELPPOQdDe=DvVXmc9uULMJAqzzXJY-i-Q@mail.gmail.com>
References: <CAFA1cDdOr4HaHD__V-cMObU-3UBcQ-GLdSf57tsVCsEF8F9t5A@mail.gmail.com>
	<2371324.CKLuunueQm@tjmaciei-mobl4>
	<CAFA1cDeKwM7bCBFniELPPOQdDe=DvVXmc9uULMJAqzzXJY-i-Q@mail.gmail.com>
Message-ID: <3984503.6CSizsXd4G@tjmaciei-mobl4>

On Wednesday 03 June 2015 08:20:23 Soraya Santana de la Fe wrote:
> I have found the problem and why QT_ARCH_WINDOWS was not defined. I was
> using a diferent folder for my includes, comming from a linux compilation
> instead the one generated by the "make install" command of my new windows
> compilation. After this I see that I cannot share the includes for two
> different architectures, is that correct?

You can, for all files *except* qconfig.h. You need to have separate qconfig.h as
well as separate mkspecs/qconfig.pri, mkspecs/qmodule.pri, mkspecs/default. You
usually use a separate qmake, but sharing that is possible provided the above
restrictions are taken into account.

The easiest way to do all of that is to separate the Qt builds and headers
entirely.

Note: there's no qmake option to search for the mkspecs/* files I mentioned.
For qconfig.h, you can easily hack it. Linux distributions do that for Qt 4, by
replacing qconfig.h with a dispatcher that looks like:

#ifdef __i386__
#  include "qconfig-i386.h"
#elif defined(__x86_64__))
#  include "qconfig-x86_64.h"
#
	...
#endif

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 00:26:59 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 00:26:59 +0200
Subject: [Development] date/time adjust for (auto) testing
In-Reply-To: <556EA0F8.5090906@familiesomers.nl>
References: <556EA0F8.5090906@familiesomers.nl>
Message-ID: <3456761.hJZLGcPmyu@tjmaciei-mobl4>

On Wednesday 03 June 2015 08:38:48 Andr? Somers wrote:
> Hi,
>
> We have applications that use the current date and time at places spread
> around the code. For normal operations, that works very nicely. However,
> we find that for (auto) testing, it would be very convenient if we could
> trick the application into believing it is some other date/time, so that
> we can test if certain behaviours work the way we would like to
> automatically. Currently, these tests take a lot of time because we
> actually need to manually adjust the system date and time, do some
> stuff, then adjust again, etc.
>
> It would be really confortable if there was some control to set a
> date/time offset (so the time keeps running) or a fixed date/time to be
> returned from currentDate(), currentTime() or currentDateTime()
> respectively. I guess access to such a thing does not belong in the main
> Qt classes, but is really a testing tool, so perhaps it could find
> refuge in QtTest somewhere. Would a contribution adding such a thing
> stand any chance of being accepted, or would this be considered out of
> scope or even unwanted?

Yes, I think so.

The only gotcha is that the functions that would most benefit from the feature
*are* the functions you mentioned. It would be so nice to properly test that
we handle daylight savings transitions correctly. So what functions /
functionality are you thinking of testing that would require this?

One way to do that is to use ELF interception of the glibc gettimeofday()
function. On Windows, interception is also possible, but requires a very ugly
hack.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 00:29:08 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 00:29:08 +0200
Subject: [Development] date/time adjust for (auto) testing
In-Reply-To: <VI1PR02MB06222C42E7D48F306D6AAB4BF1B40@VI1PR02MB0622.eurprd02.prod.outlook.com>
References: <556EA0F8.5090906@familiesomers.nl>
	<VI1PR02MB06222C42E7D48F306D6AAB4BF1B40@VI1PR02MB0622.eurprd02.prod.outlook.com>
Message-ID: <1854563.LOrXEPv9aV@tjmaciei-mobl4>

On Wednesday 03 June 2015 08:00:54 Curtis Mitch wrote:
> Sounds like a great thing to have if you can get it working. The QDateTime
> tests themselves would benefit from this quite a lot.
>
> Perhaps you've already seen, but it looks like Thiago attempted something
> similar with a8c74ddcf78604c9038ba2a2bea81e445e4b3c58:
>
> http://code.qt.io/cgit/qt/qtbase.git/tree/tests/auto/corelib/tools/qdatetime
> /tst_qdatetime.cpp#n2988

That's not the same. Timezones on Linux are a property of the application and
can easily and trivially be changed.

Changing the time is much more difficult.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 00:31:59 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 00:31:59 +0200
Subject: [Development] Q_OBJECT and "override"
In-Reply-To: <5570689C.3090006@theqtcompany.com>
References: <55704095.3000201@theqtcompany.com>
	<CAGVE+RntxAxfhhZ_EtJbepvpf5zr=-UedpwS4gqCQTFHtOaZLQ@mail.gmail.com>
	<5570689C.3090006@theqtcompany.com>
Message-ID: <1629617.Jku55yS9jE@tjmaciei-mobl4>

On Thursday 04 June 2015 17:02:52 Christian Kandeler wrote:
> On 06/04/2015 04:52 PM, Konstantin Ritt wrote:
> > #define  Q_OBJECT  \
> >
> > public:  \
> >
> >      Q_OBJECT_CHECK  \
> >
> >      QT_WARNING_PUSH  \
> >
> >      Q_OBJECT_NO_OVERRIDE_WARNING  \
> >
> >      static  const  QMetaObject  staticMetaObject;  \
> >
> >      virtual  const  QMetaObject  *metaObject()  const;  \
> >
> >      virtual  void  *qt_metacast(const  char  *);  \
> >
> >      virtual  int  qt_metacall(QMetaObject::Call,  int,  void  **);  \
> >
> >      QT_WARNING_POP  \
>
> Oh, this is already in 5.5... I overlooked it somehow. Well, that makes
> this thread kinda pointless. Sorry about the noise (if the construct
> above indeed works).

Yup, it does. At least until Clang changes behaviour of how pragmas apply to
these kinds of warnings...

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 00:34:06 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 00:34:06 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <6289912.fYC0FcaE5U@tjmaciei-mobl4>

On Thursday 04 June 2015 15:29:10 Frederik Gladhorn wrote:
> Found module QtWinExtras in /home/frederik/dev/qt/qt-src-
> dev//qtwinextras/src/winextras/winextras.pro
>  - No public headers for module QtWinExtras

Note that the script only checks the modules that your qmake actually ran on.
So QtWinExtras, QtMacExtras, QtAndroidExtras don't get compiled on regular
Linux, so there is no header diff for them.

Maintainers of those modules need to effect the diff manually.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 00:35:01 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 00:35:01 +0200
Subject: [Development] Qt 5.5.0 header diff: QtDBus.diff
In-Reply-To: <3366959.rCAOlxOqDL@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<3366959.rCAOlxOqDL@frederik-thinkcentre-m93p>
Message-ID: <5926174.ajUmtzrnx2@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:48 Frederik Gladhorn wrote:
>

Looks fine.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 00:36:14 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 00:36:14 +0200
Subject: [Development] Fwd: [Qt bugreports] (QTBUG-46505) assertion
	failure (=> crash) in harfbuzz-shaper
In-Reply-To: <1484160.r5sGoJfAjs@portia.local>
References: <1484160.r5sGoJfAjs@portia.local>
Message-ID: <2329621.cobxss5MHf@tjmaciei-mobl4>

On Friday 05 June 2015 21:45:37 Ren? J.V. Bertin wrote:
> Hi,
>
> As asked in the bug report below: is it necessary to handle this situation
> with an assert/abort, instead of simply returning (with whatever error the
> void function in question can return)?

The assert is inside HB, so it's not our choice.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 09:49:48 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 09:49:48 +0200
Subject: [Development] Qt 5.5.0 header diff: QtSensors.diff
In-Reply-To: <4385722.PyXSWR0T9R@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<4385722.PyXSWR0T9R@frederik-thinkcentre-m93p>
Message-ID: <1484939.pnlUsP48ZR@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:34 Frederik Gladhorn wrote:
>

No changes, good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 09:49:54 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 09:49:54 +0200
Subject: [Development] Qt 5.5.0 header diff: QtOpenGLExtensions.diff
In-Reply-To: <2632215.syc9jZgTj6@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2632215.syc9jZgTj6@frederik-thinkcentre-m93p>
Message-ID: <2796937.jKsKNhpGfQ@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:35 Frederik Gladhorn wrote:
>
No changes, good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 09:50:02 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 09:50:02 +0200
Subject: [Development] Qt 5.5.0 header diff: QtLocation.diff
In-Reply-To: <6261744.tkdLD445ve@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<6261744.tkdLD445ve@frederik-thinkcentre-m93p>
Message-ID: <2364181.nzNaGx7q3r@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:37 Frederik Gladhorn wrote:
>
Looks good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 09:50:05 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 09:50:05 +0200
Subject: [Development] Qt 5.5.0 header diff: QtQuickTest.diff
In-Reply-To: <3312559.9goBsQeUnI@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<3312559.9goBsQeUnI@frederik-thinkcentre-m93p>
Message-ID: <6208401.g74WyMtEnS@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:37 Frederik Gladhorn wrote:
>
No changes, good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:02:13 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:02:13 +0200
Subject: [Development] Qt 5.5.0 header diff: QtGui.diff
In-Reply-To: <2177208.XkNCe2Jqgd@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2177208.XkNCe2Jqgd@frederik-thinkcentre-m93p>
Message-ID: <1468265.c4vYzalqnx@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:38 Frederik Gladhorn wrote:
> +++ b/src/gui/accessible/qaccessible.h
> @@ -60,7 +60,6 @@ class QTextCursor;
>  class Q_GUI_EXPORT QAccessible
> @@ -635,6 +636,12 @@ public:
>      static const QString &showMenuAction();
>      static const QString &setFocusAction();
>      static const QString &toggleAction();
> +    static const QString &scrollLeftAction();
> +    static const QString &scrollRightAction();
> +    static const QString &scrollUpAction();
> +    static const QString &scrollDownAction();
> +    static const QString &nextPageAction();
> +    static const QString &previousPageAction();
>  };

This is not Qt-like API. The strings are initialised on first use (all of them)
but they are translated, which means they will not obey a change in
translation settings.

The old ones can't be fixed now, but we should fix the new ones not to return a
const reference.

Reviewed up to math3d and it was good up to that.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:02:43 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:02:43 +0200
Subject: [Development] Qt 5.5.0 header diff: QtConcurrent.diff
In-Reply-To: <11378874.GLcoUZBEEy@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<11378874.GLcoUZBEEy@frederik-thinkcentre-m93p>
Message-ID: <3432051.xJBqArzIqM@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:39 Frederik Gladhorn wrote:
>
Looks good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:03:22 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:03:22 +0200
Subject: [Development] Qt 5.5.0 header diff: QtNfc.diff
In-Reply-To: <15415845.QQ8kWqcWzS@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<15415845.QQ8kWqcWzS@frederik-thinkcentre-m93p>
Message-ID: <1560676.dduGMc7zZ4@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:41 Frederik Gladhorn wrote:
> +    //TODO Qt 6 the mimetype should be QString as it is UTF-8

Looks good, except the comment. We usually use "### Qt6" as a marker, not
"TODO".
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:03:45 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:03:45 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimediaQuick_p.diff
In-Reply-To: <2367453.pju45CvlIl@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2367453.pju45CvlIl@frederik-thinkcentre-m93p>
Message-ID: <1465274.Qnz3DKGoFU@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:42 Frederik Gladhorn wrote:
>
Private library.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:03:49 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:03:49 +0200
Subject: [Development] Qt 5.5.0 header diff: QtWebChannel.diff
In-Reply-To: <23501821.llWBKmNAYd@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<23501821.llWBKmNAYd@frederik-thinkcentre-m93p>
Message-ID: <1463783.INHM7eJldA@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:43 Frederik Gladhorn wrote:
>
No changes, good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:04:09 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:04:09 +0200
Subject: [Development] Qt 5.5.0 header diff: QtSvg.diff
In-Reply-To: <1672691.GYKKPxvrAS@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1672691.GYKKPxvrAS@frederik-thinkcentre-m93p>
Message-ID: <1801157.NKuL6g2OfL@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:44 Frederik Gladhorn wrote:
>
No changes, good.

We ought to stop revving the version number for libraries that did not update
at all...
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:04:12 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:04:12 +0200
Subject: [Development] Qt 5.5.0 header diff: QtXmlPatterns.diff
In-Reply-To: <1809637.0tBliLTZCz@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1809637.0tBliLTZCz@frederik-thinkcentre-m93p>
Message-ID: <3105422.aJLVVYjhM6@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:45 Frederik Gladhorn wrote:
>
No changes, good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:04:53 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:04:53 +0200
Subject: [Development] Qt 5.5.0 header diff: QtQuickWidgets.diff
In-Reply-To: <8336209.CUrKNWMaJN@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<8336209.CUrKNWMaJN@frederik-thinkcentre-m93p>
Message-ID: <7468991.fXrknh8AKi@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:46 Frederik Gladhorn wrote:
> +#ifndef QT_NO_DRAGANDDROP
> +    virtual void dragEnterEvent(QDragEnterEvent *);
> +    virtual void dragMoveEvent(QDragMoveEvent *);
> +    virtual void dragLeaveEvent(QDragLeaveEvent *);
> +    virtual void dropEvent(QDropEvent *);
> +#endif
> +

Is this a public libary?

Are the above overrides or not? If they are overrides, add Q_DECL_OVERRIDE.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:06:24 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:06:24 +0200
Subject: [Development] Qt 5.5.0 header diff: QtSerialPort.diff
In-Reply-To: <13919351.W98SSLMXGs@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<13919351.W98SSLMXGs@frederik-thinkcentre-m93p>
Message-ID: <2748757.F6pBU58Fgn@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:47 Frederik Gladhorn wrote:
> +#if QT_DEPRECATED_SINCE(5, 2)
> +    QT_DEPRECATED void dataErrorPolicyChanged(QSerialPort::DataErrorPolicy
> policy);
> +#endif
>      void dataTerminalReadyChanged(bool set);
>      void requestToSendChanged(bool set);
>      void error(QSerialPort::SerialPortError serialPortError);
> -    void settingsRestoredOnCloseChanged(bool restore);
> +#if QT_DEPRECATED_SINCE(5, 3)
> +    QT_DEPRECATED void settingsRestoredOnCloseChanged(bool restore);
> +#endif

Retroactive deprecations are not allowed. Please change the macros to (5,5),
even if the functions had been marked as deprecated in the documentation.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:11:45 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:11:45 +0200
Subject: [Development] Qt 5.5.0 header diff: QtTest.diff
In-Reply-To: <1546666.HYLWss0tDD@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1546666.HYLWss0tDD@frederik-thinkcentre-m93p>
Message-ID: <1918988.UFCupMqHcA@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:47 Frederik Gladhorn wrote:
> +    Q_TESTLIB_EXPORT QString qExtractTestData(const QString &dirName);
>

This API isn't finished. The function needs to return a QTemporaryDir (which
implies passing in by output parameter) so that the caller properly cleans up
the extracted test data.

The rest looks good. I'd have put the qgpu_features function inside the QTest
namespace, like everything else, though.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:12:12 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:12:12 +0200
Subject: [Development] Qt 5.5.0 header diff: QtDeclarative.diff
In-Reply-To: <4626122.JzJB5NSHdj@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<4626122.JzJB5NSHdj@frederik-thinkcentre-m93p>
Message-ID: <1615014.oavF6yzLhs@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:49 Frederik Gladhorn wrote:
>
No changes, good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:13:00 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:13 +0200
Subject: [Development] Qt 5.5.0 header diff: QtPositioning.diff
In-Reply-To: <4062838.8hLyuFTaXD@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<4062838.8hLyuFTaXD@frederik-thinkcentre-m93p>
Message-ID: <5537491.vQKCN8pi1O@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:50 Frederik Gladhorn wrote:
> -    qreal distanceTo(const QGeoCoordinate &other) const;
> -    qreal azimuthTo(const QGeoCoordinate &other) const;
> +    Q_INVOKABLE qreal distanceTo(const QGeoCoordinate &other) const;
> +    Q_INVOKABLE qreal azimuthTo(const QGeoCoordinate &other) const;
>

>From C++, the module looks good.

>From QML, should there be some Q_REVISION above?
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:13:04 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:13:04 +0200
Subject: [Development] Qt 5.5.0 header diff: QtScript.diff
In-Reply-To: <2534626.uQvBOehyAq@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2534626.uQvBOehyAq@frederik-thinkcentre-m93p>
Message-ID: <3020499.CZSaSRaW7G@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:51 Frederik Gladhorn wrote:
>
No changes, good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:13:38 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:13:38 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <1976461.3aPASfonOU@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1976461.3aPASfonOU@frederik-thinkcentre-m93p>
Message-ID: <159288930.WH2g5y2n1F@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:52 Frederik Gladhorn wrote:
>
Looks good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:13:41 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:13:41 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimediaWidgets.diff
In-Reply-To: <6547579.Lu5gtAv9iz@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<6547579.Lu5gtAv9iz@frederik-thinkcentre-m93p>
Message-ID: <716791650.zMIrOfNpfJ@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:53 Frederik Gladhorn wrote:
>
No changes, good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:13:45 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:13:45 +0200
Subject: [Development] Qt 5.5.0 header diff: QtX11Extras.diff
In-Reply-To: <1464701.R6Mqf1RKeC@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1464701.R6Mqf1RKeC@frederik-thinkcentre-m93p>
Message-ID: <2562401.exzrpgqagZ@tjmaciei-mobl4>

On Friday 05 June 2015 10:10:54 Frederik Gladhorn wrote:
>
No changes, good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:13:54 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:13:54 +0200
Subject: [Development] Qt 5.5.0 header diff: QtWebSockets.diff
In-Reply-To: <3834820.72aHHOlcql@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<3834820.72aHHOlcql@frederik-thinkcentre-m93p>
Message-ID: <1466769.uE26xL4ijj@tjmaciei-mobl4>

On Friday 05 June 2015 10:11:19 Frederik Gladhorn wrote:
>
No changes, good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:14:44 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:14:44 +0200
Subject: [Development] Qt 5.5.0 header diff: QtQuick.diff
In-Reply-To: <2259422.RehQiycJvK@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2259422.RehQiycJvK@frederik-thinkcentre-m93p>
Message-ID: <2270760.8ERj8QCWO7@tjmaciei-mobl4>

On Friday 05 June 2015 10:11:20 Frederik Gladhorn wrote:
>
Looks good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:15:17 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:15:17 +0200
Subject: [Development] Qt 5.5.0 header diff: QtPrintSupport.diff
In-Reply-To: <1488979.3gsVCJHsAy@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1488979.3gsVCJHsAy@frederik-thinkcentre-m93p>
Message-ID: <3716373.vXAWnMiNor@tjmaciei-mobl4>

On Friday 05 June 2015 10:11:21 Frederik Gladhorn wrote:
>
Looks good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:15:21 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:15:21 +0200
Subject: [Development] Qt 5.5.0 header diff: QtScriptTools.diff
In-Reply-To: <1512483.i68qgNmILq@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1512483.i68qgNmILq@frederik-thinkcentre-m93p>
Message-ID: <1993521.en1FiEV61q@tjmaciei-mobl4>

On Friday 05 June 2015 10:11:22 Frederik Gladhorn wrote:
>
No changes, good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:15:37 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:15:37 +0200
Subject: [Development] Qt 5.5.0 header diff: QtOpenGL.diff
In-Reply-To: <1708492.UtK0z6Ms35@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1708492.UtK0z6Ms35@frederik-thinkcentre-m93p>
Message-ID: <1631506.gafM5LUSs8@tjmaciei-mobl4>

On Friday 05 June 2015 10:11:23 Frederik Gladhorn wrote:
>
Looks good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:17:09 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:17:09 +0200
Subject: [Development] Qt 5.5.0 header diff: QtBluetooth.diff
In-Reply-To: <3312559.9fjI1Dg1ho@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<3312559.9fjI1Dg1ho@frederik-thinkcentre-m93p>
Message-ID: <2717551.b9cqWj7Zcn@tjmaciei-mobl4>

On Friday 05 June 2015 10:11:25 Frederik Gladhorn wrote:
>
Looks good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 10:17:43 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 10:17:43 +0200
Subject: [Development] Qt 5.5.0 header diff: QtSql.diff
In-Reply-To: <1835064.CmCkqvDHXM@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1835064.CmCkqvDHXM@frederik-thinkcentre-m93p>
Message-ID: <57345586.WjKCsUleqy@tjmaciei-mobl4>

On Friday 05 June 2015 10:11:26 Frederik Gladhorn wrote:
>
Looks good.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From rjvbertin at gmail.com  Sat Jun  6 10:20:56 2015
From: rjvbertin at gmail.com (=?ISO-8859-1?Q?Ren=E9_J=2EV=2E?= Bertin)
Date: Sat, 06 Jun 2015 10:20:56 +0200
Subject: [Development] Fwd: [Qt bugreports] (QTBUG-46505) assertion
	failure (=> crash) in harfbuzz-shaper
In-Reply-To: <2329621.cobxss5MHf@tjmaciei-mobl4>
References: <1484160.r5sGoJfAjs@portia.local>
	<2329621.cobxss5MHf@tjmaciei-mobl4>
Message-ID: <1946269.TsBGGEumCO@patux>

On Saturday June 06 2015 00:36:14 Thiago Macieira wrote:

Yes, I noticed that Qt4 doesn't use the system harfbuzz for whatever reason.

>> As asked in the bug report below: is it necessary to handle this situation
>> with an assert/abort, instead of simply returning (with whatever error the
>> void function in question can return)?
>
>The assert is inside HB, so it's not our choice.

Isn't that a bit easy if you're shipping an old version that is no longer maintained? Seems the least one could do in this particular case is to ensure that in release mode the stuff is built with -DNDEBUG to deactivate the assert() side-effects (and "take it like a man" when that leads to other crashes and bug reports :) )

R

From rjvbertin at gmail.com  Sat Jun  6 10:24:34 2015
From: rjvbertin at gmail.com (=?ISO-8859-1?Q?Ren=E9_J=2EV=2E?= Bertin)
Date: Sat, 06 Jun 2015 10:24:34 +0200
Subject: [Development] Fwd: [Qt bugreports] (QTBUG-46505) assertion
	failure (=> crash) in harfbuzz-shaper
In-Reply-To: <2329621.cobxss5MHf@tjmaciei-mobl4>
References: <1484160.r5sGoJfAjs@portia.local>
	<2329621.cobxss5MHf@tjmaciei-mobl4>
Message-ID: <11031282.4BNI5akUps@patux>

On Saturday June 06 2015 00:36:14 Thiago Macieira wrote:

Reminds me: configure --help suggests that even when building without -harfbuzz, one can activate harfbuzz by using an env. variable. From what I recall I never even found trace of the env. variable name in the code, so if that's still supposed to work, how could it?

R.

From kde at carewolf.com  Sat Jun  6 10:52:20 2015
From: kde at carewolf.com (Allan Sandfeld Jensen)
Date: Sat, 6 Jun 2015 10:52:20 +0200
Subject: [Development] Qt 5.5.0 header diff: QtDeclarative.diff
In-Reply-To: <4626122.JzJB5NSHdj@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<4626122.JzJB5NSHdj@frederik-thinkcentre-m93p>
Message-ID: <201506061052.20621.kde@carewolf.com>

On Friday 05 June 2015, Frederik Gladhorn wrote:
>

Would there be any way to generate diffs or changes for QML APIs?

`Allan

From kde at carewolf.com  Sat Jun  6 11:03:43 2015
From: kde at carewolf.com (Allan Sandfeld Jensen)
Date: Sat, 6 Jun 2015 11:03:43 +0200
Subject: [Development] Qt 5.5.0 header diff: QtGui.diff
In-Reply-To: <2177208.XkNCe2Jqgd@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2177208.XkNCe2Jqgd@frederik-thinkcentre-m93p>
Message-ID: <201506061103.44187.kde@carewolf.com>

On Friday 05 June 2015, Frederik Gladhorn wrote:
>
Something is wrong with the diff. The qpen.h diff is listed as
src/gui/painting/qpdfwriter.h.

On the topic of qpen.h, I am a little concerned about the addition of
Q_DECL_NOTHROW to the two non-inlined methods QPen(const QPen &pen) and
QPen &operator=(const QPen &pen). Q_DECL_NOEXCEPT should be fine I think, but
throw() is represented in the C++ mangled name with MSVC.

`Allan

From thiago.macieira at intel.com  Sat Jun  6 11:17:30 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 11:17:30 +0200
Subject: [Development] Qt 5.5.0 header diff: QtCore.diff
In-Reply-To: <3267312.MdcMplLC6g@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<3267312.MdcMplLC6g@frederik-thinkcentre-m93p>
Message-ID: <4121929.FLSJ3T6r3Y@tjmaciei-mobl4>

On Friday 05 June 2015 10:11:28 Frederik Gladhorn wrote:
>

I can't tell if the qmetatype.h template magic is binary compatible or not. As
evidenced by a recent push [1] about the IsGadget flag, it isn't.

I'm going to put a stop to this. qmetatype.h template magic is now frozen as
of Qt 5.5 and until Qt 6.0, aside from bugfixes or pure additions that do not
modify existing template classes.

[1] https://codereview.qt-project.org/113652

> +++ b/src/corelib/plugin/qfactoryinterface.h
>      Q_DECLARE_FLAGS(LoadHints, LoadHint)
> +    Q_FLAG(LoadHint)
> +    Q_FLAG(LoadHints)

Do we need both Q_FLAG? That looks like a mistake.

> +// ### Qt6: check if there's a better way
> +class QStringList : public QList<QString>
[...]
> -    inline void sort(Qt::CaseSensitivity cs = Qt::CaseSensitive);
> -    inline int removeDuplicates();

The above works only because:
 1) QStringList is not exported
 2) the functions in question are inlines

However, if someone derives from QStringList and exports a class, using MSVC,
then this may be binary incompatible. See qvector_msvc.h.

I have not and will not investigate this further, so I don't know if this is
real or not. If there's a bug reported on this, I will probably close it with
"you're committing too many mistakes" (using MSVC and deriving from
QStirngList).

The rest looks good, but I hope I didn't miss anything in the Q_DECL_NOTHROW,
Q_DECL_OVERRIDE and Q_DECL_CONSTEXPR noise.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 11:20:08 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 11:20:08 +0200
Subject: [Development] Qt 5.5.0 header diff: QtNetwork.diff
In-Reply-To: <1776078.inY8qUWLlI@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1776078.inY8qUWLlI@frederik-thinkcentre-m93p>
Message-ID: <2387768.eR7SJGWK1C@tjmaciei-mobl4>

On Friday 05 June 2015 10:11:29 Frederik Gladhorn wrote:
> +    // EC settings.
> +    QVector<QSslEllipticCurve> ellipticCurves() const;
> +    void setEllipticCurves(const QVector<QSslEllipticCurve> &curves);
> +    static void setDefaultEllipticCurves(const QVector<QSslEllipticCurve>
> &curves); +    static QVector<QSslEllipticCurve> defaultEllipticCurves();
> +    static QVector<QSslEllipticCurve> supportedEllipticCurves();
> +

These should be in QSslConfiguration, not QSslSocket.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 11:21:15 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 11:21:15 +0200
Subject: [Development] Qt 5.5.0 header diff: QtQml.diff
In-Reply-To: <2759129.5JvK7DuRrG@simon-sx58>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1458755.ei2G0iPh77@frederik-thinkcentre-m93p>
	<2759129.5JvK7DuRrG@simon-sx58>
Message-ID: <2562408.r6RMUbPfN3@tjmaciei-mobl4>

On Friday 05 June 2015 12:24:36 Simon Hausmann wrote:
> Those changes were not on qqmlerror.h but on qqmlfile.h. However the class
> in  question - while exported - is marked as \internal in the docs.
>
> If it's ok with everyone, then I'll rename qqmfile.h into qqmlfile_p.h.

If it is not used, sure.

There's a bug in the script that it reports the wrong header sometimes.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From cavendish.qi at gmail.com  Sat Jun  6 11:23:19 2015
From: cavendish.qi at gmail.com (Liang Qi)
Date: Sat, 6 Jun 2015 11:23:19 +0200
Subject: [Development] Qt 5.5.0 header diff: QtDeclarative.diff
In-Reply-To: <201506061052.20621.kde@carewolf.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<4626122.JzJB5NSHdj@frederik-thinkcentre-m93p>
	<201506061052.20621.kde@carewolf.com>
Message-ID: <CAHceRrhT1kApcmYY6BE6HzrHNoCnKhe2kdijSoiC39mNKX2XjQ@mail.gmail.com>

On 6 June 2015 at 10:52, Allan Sandfeld Jensen <kde at carewolf.com> wrote:

> On Friday 05 June 2015, Frederik Gladhorn wrote:
> >
>
> Would there be any way to generate diffs or changes for QML APIs?
>

Perhaps a diff for all plugins.qmltypes files? But I guess that not all
were updated yet.

--
http://www.qiliang.net
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150606/e1561948/attachment.html

From giuseppe.dangelo at kdab.com  Sat Jun  6 11:30:39 2015
From: giuseppe.dangelo at kdab.com (Giuseppe D'Angelo)
Date: Sat, 06 Jun 2015 11:30:39 +0200
Subject: [Development] Qt 5.5.0 header diff: QtNetwork.diff
In-Reply-To: <2387768.eR7SJGWK1C@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>	<1776078.inY8qUWLlI@frederik-thinkcentre-m93p>
	<2387768.eR7SJGWK1C@tjmaciei-mobl4>
Message-ID: <5572BDBF.6060800@kdab.com>

Il 06/06/2015 11:20, Thiago Macieira ha scritto:
> These should be in QSslConfiguration, not QSslSocket.

They're in both, just like ciphers, certificates etc.

--
Giuseppe D'Angelo | giuseppe.dangelo at kdab.com | Software Engineer
KDAB (UK) Ltd., a KDAB Group company | Tel: UK +44-1625-809908
KDAB - The Qt Experts

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4048 bytes
Desc: Firma crittografica S/MIME
Url : http://lists.qt-project.org/pipermail/development/attachments/20150606/1dfb81b6/attachment.bin

From thiago.macieira at intel.com  Sat Jun  6 13:25:10 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 13:25:10 +0200
Subject: [Development] Fwd: [Qt bugreports] (QTBUG-46505) assertion
	failure (=> crash) in harfbuzz-shaper
In-Reply-To: <1946269.TsBGGEumCO@patux>
References: <1484160.r5sGoJfAjs@portia.local>
	<2329621.cobxss5MHf@tjmaciei-mobl4> <1946269.TsBGGEumCO@patux>
Message-ID: <2158214.lhGcIkuhNC@tjmaciei-mobl4>

On Saturday 06 June 2015 10:20:56 Ren? J.V. Bertin wrote:
> On Saturday June 06 2015 00:36:14 Thiago Macieira wrote:
>
> Yes, I noticed that Qt4 doesn't use the system harfbuzz for whatever reason.
> >> As asked in the bug report below: is it necessary to handle this
> >> situation
> >> with an assert/abort, instead of simply returning (with whatever error
> >> the
> >> void function in question can return)?
> >
> >The assert is inside HB, so it's not our choice.
>
> Isn't that a bit easy if you're shipping an old version that is no longer
> maintained? Seems the least one could do in this particular case is to
> ensure that in release mode the stuff is built with -DNDEBUG to deactivate
> the assert() side-effects (and "take it like a man" when that leads to
> other crashes and bug reports :) )

If you're hitting an assert, disabling the assert will make the problem worse.
It means code will assume that the assert succeeded and proceed to make
decisions on it.

Example:

	assert(ptr);
	ptr->i = 0;

Anyway, if this code is in the old hardbuzz-non-NG, what is preventing us from
switching to NG?

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 13:26:48 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 13:26:48 +0200
Subject: [Development] Qt 5.5.0 header diff: QtGui.diff
In-Reply-To: <201506061103.44187.kde@carewolf.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2177208.XkNCe2Jqgd@frederik-thinkcentre-m93p>
	<201506061103.44187.kde@carewolf.com>
Message-ID: <1952902.DijgNpOE59@tjmaciei-mobl4>

On Saturday 06 June 2015 11:03:43 Allan Sandfeld Jensen wrote:
> On the topic of qpen.h, I am a little concerned about the addition of
> Q_DECL_NOTHROW to the two non-inlined methods QPen(const QPen &pen) and
> QPen &operator=(const QPen &pen). Q_DECL_NOEXCEPT should be fine I think,
> but  throw() is represented in the C++ mangled name with MSVC.

The mangling scheme supports throw(), but I don't think that MSVC adds it to
the functions.

Unless you've actually seen it used in the wild.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sat Jun  6 13:27:33 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 13:27:33 +0200
Subject: [Development] Qt 5.5.0 header diff: QtNetwork.diff
In-Reply-To: <5572BDBF.6060800@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2387768.eR7SJGWK1C@tjmaciei-mobl4> <5572BDBF.6060800@kdab.com>
Message-ID: <1437465.oSMvkFyLob@tjmaciei-mobl4>

On Saturday 06 June 2015 11:30:39 Giuseppe D'Angelo wrote:
> Il 06/06/2015 11:20, Thiago Macieira ha scritto:
> > These should be in QSslConfiguration, not QSslSocket.
>
> They're in both, just like ciphers, certificates etc.

Then why do we need them in QSslSocket?
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From Lars.Knoll at theqtcompany.com  Sat Jun  6 14:03:01 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Sat, 6 Jun 2015 12:03:01 +0000
Subject: [Development] Qt 5.5.0 header diff: QtXml.diff
In-Reply-To: <2164084.8YIbvi7b91@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2164084.8YIbvi7b91@frederik-thinkcentre-m93p>
Message-ID: <606F8812-DFB9-4055-BF37-07CD72D5853F@theqtcompany.com>

Looks good.

Cheers,
Lars




On 05/06/15 10:11, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Frederik Gladhorn" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of frederik.gladhorn at theqtcompany.com> wrote:

>

From giuseppe.dangelo at kdab.com  Sat Jun  6 14:22:20 2015
From: giuseppe.dangelo at kdab.com (Giuseppe D'Angelo)
Date: Sat, 06 Jun 2015 14:22:20 +0200
Subject: [Development] Qt 5.5.0 header diff: QtNetwork.diff
In-Reply-To: <1437465.oSMvkFyLob@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>	<2387768.eR7SJGWK1C@tjmaciei-mobl4>
	<5572BDBF.6060800@kdab.com> <1437465.oSMvkFyLob@tjmaciei-mobl4>
Message-ID: <5572E5FC.4000909@kdab.com>

Il 06/06/2015 13:27, Thiago Macieira ha scritto:
> Then why do we need them in QSslSocket?

Technically they are be needed there, indeed, but I didn't want to cause
an API asymmetry with the other functions for ciphers, certificates and
so on, that's all.

--
Giuseppe D'Angelo | giuseppe.dangelo at kdab.com | Software Engineer
KDAB (UK) Ltd., a KDAB Group company | Tel: UK +44-1625-809908
KDAB - The Qt Experts

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4048 bytes
Desc: Firma crittografica S/MIME
Url : http://lists.qt-project.org/pipermail/development/attachments/20150606/d6437f8c/attachment.bin

From thiago.macieira at intel.com  Sat Jun  6 15:26:26 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 06 Jun 2015 15:26:26 +0200
Subject: [Development] Qt 5.5.0 header diff: QtNetwork.diff
In-Reply-To: <5572E5FC.4000909@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1437465.oSMvkFyLob@tjmaciei-mobl4> <5572E5FC.4000909@kdab.com>
Message-ID: <3440322.SYCdOgITqm@tjmaciei-mobl4>

On Saturday 06 June 2015 14:22:20 Giuseppe D'Angelo wrote:
> Il 06/06/2015 13:27, Thiago Macieira ha scritto:
> > Then why do we need them in QSslSocket?
>
> Technically they are be needed there, indeed, but I didn't want to cause
> an API asymmetry with the other functions for ciphers, certificates and
> so on, that's all.

The symmetry only existed because we added them to QSslSocket before
QSslCertificate existed.

I'd rather new API existed only in QSslConfiguration. That way, we don't need
to duplicate in QSslSocket.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From rjvbertin at gmail.com  Sat Jun  6 15:31:49 2015
From: rjvbertin at gmail.com (=?ISO-8859-1?Q?Ren=E9_J=2EV=2E?= Bertin)
Date: Sat, 06 Jun 2015 15:31:49 +0200
Subject: [Development] Fwd: [Qt bugreports] (QTBUG-46505) assertion
	failure (=> crash) in harfbuzz-shaper
In-Reply-To: <2158214.lhGcIkuhNC@tjmaciei-mobl4>
References: <1484160.r5sGoJfAjs@portia.local> <1946269.TsBGGEumCO@patux>
	<2158214.lhGcIkuhNC@tjmaciei-mobl4>
Message-ID: <1648153.Xa3Wbc79ZE@portia.local>

On Saturday June 06 2015 13:25:10 Thiago Macieira wrote:

> If you're hitting an assert, disabling the assert will make the problem worse.

Of course, but that doesn't mean by definition that the assert was there to avoid a crash. I've already seen them used as a cheap way to verify assumptions, or to put a watch on a special case that might need special attention but isn't easy to trigger IRL. The assert() documentation does suggest it's accepted or at least usual practise to build production code with -DNDEBUG...

In this particular case I removed the assert and the crash went away.

Annex. question: 3rdparty/harfbuzz aside, is there any code in Qt that compiles differently when using -DNDEBUG, for instance because it uses assert() directly?

> 	assert(ptr);
> 	ptr->i = 0;

Frankly, I think there's very little reason to use asserts in production code, at least when there are other ways to handle a fatal error situation. Even if there are no good ways to recover gracefully and continue execution, one could at least try to let the application exit correctly to avoid data loss. After all the assert is there to test for a condition that could lead to bad things but shouldn't yet have.

> Anyway, if this code is in the old hardbuzz-non-NG, what is preventing us from
> switching to NG?

You tell me :)

R.

From rjvbertin at gmail.com  Sat Jun  6 16:48:47 2015
From: rjvbertin at gmail.com (=?ISO-8859-1?Q?Ren=E9_J=2EV=2E?= Bertin)
Date: Sat, 06 Jun 2015 16:48:47 +0200
Subject: [Development] crash in qt_mac_create_imagemask while printing from
	KDE application
Message-ID: <2277955.xDIP4Fh5e1@portia.local>

Hello,

Is there anything that can be done with a backtrace like the one below that would make it worthwhile to file a bug report?
Some prodding after liberal use of `volatile` in qt_mac_create_imagemask suggests that px->pixels==NULL

R.

(lldb) bt all
* thread #1: tid = 0x6280a, 0x00007fff8914fe20 libsystem_kernel.dylib`__wait4 + 8, queue = 'com.apple.main-thread', stop reason = signal SIGSTOP
  * frame #0: 0x00007fff8914fe20 libsystem_kernel.dylib`__wait4 + 8
    frame #1: 0x000000010dab494e libkdeui.5.dylib`KCrash::startProcess(int, char const**, bool) [inlined] startProcessInternal(argc=<unavailable>, directly=<unavailable>) + 265 at kcrash.cpp:556
    frame #2: 0x000000010dab4845 libkdeui.5.dylib`KCrash::startProcess(argc=<unavailable>, argv=<unavailable>, waitAndExit=<unavailable>) + 21 at kcrash.cpp:538
    frame #3: 0x000000010dab3a79 libkdeui.5.dylib`KCrash::defaultCrashHandler(sig=<unavailable>) + 1209 at kcrash.cpp:441
    frame #4: 0x00007fff886fd5aa libsystem_platform.dylib`_sigtramp + 26
    frame #5: 0x000000010e681c21 QtGui`qt_mac_create_imagemask(pixmap=<unavailable>, sr=0x00007fff5360b620) + 1057 at qpixmap_mac.cpp:1090
    frame #6: 0x000000010e78f9ff QtGui`qt_mac_draw_pattern(info=0x00007fef4c72fa80, c=0x00007fef4c70fab0) + 1167 at qpaintengine_mac.cpp:494
    frame #7: 0x00007fff91f998e8 CoreGraphics`CGPatternDelegateDrawPattern + 66
    frame #8: 0x00000001256c775a libPDFRIP.A.dylib`PDFPatternEmitDefinition + 1299
    frame #9: 0x00000001256c79c6 libPDFRIP.A.dylib`emitPatternDefinition + 14
    frame #10: 0x00007fff8962b382 CoreFoundation`__CFSetApplyFunction_block_invoke + 18
    frame #11: 0x00007fff8960f8fc CoreFoundation`CFBasicHashApply + 124
    frame #12: 0x00007fff8962b33d CoreFoundation`CFSetApplyFunction + 173
    frame #13: 0x00000001256c7993 libPDFRIP.A.dylib`PDFPatternSetEmitDefinitions + 71
    frame #14: 0x00000001256bda0c libPDFRIP.A.dylib`emit_page_resources(PDFDocument*) + 59
    frame #15: 0x00000001256bd9b0 libPDFRIP.A.dylib`PDFDocumentEndPage + 73
    frame #16: 0x00000001256bc570 libPDFRIP.A.dylib`pdf_EndPage + 17
    frame #17: 0x00007fff8f374ea3 PrintCore`pdfSpoolingEndPage(void*, void*) + 345
    frame #18: 0x00007fff8f36c835 PrintCore`PJCEndPage(OpaquePMPrintSession*) + 40
    frame #19: 0x00007fff8f34a3b6 PrintCore`PMSessionEndPageNoDialog + 80
    frame #20: 0x000000010e58c69a QtGui`non-virtual thunk to QMacPrintEngine::newPage() + 26
    frame #21: 0x000000010e713183 QtGui`QPrinter::newPage(this=<unavailable>) + 35 at qprinter.cpp:1829
    frame #22: 0x0000000120b4ff8a libkatepartinterfaces.4.dylib`KatePrinter::print(doc=0x00007fef4c1dfff0) + 8794 at kateprinter.cpp:393
    frame #23: 0x00000001209a61da libkatepartinterfaces.4.dylib`KateDocument::qt_static_metacall(QObject*, QMetaObject::Call, int, void**) [inlined] KateDocument::print() + 1994 at katedocument.cpp:1855
    frame #24: 0x00000001209a61d2 libkatepartinterfaces.4.dylib`KateDocument::qt_static_metacall(_o=0x00007fef4c1dfff0, _c=<unavailable>, _id=<unavailable>, _a=0x00007fff5360c790) + 1986 at katedocument.moc:267
    frame #25: 0x000000010f421c1b QtCore`QMetaObject::activate(sender=0x00007fef4c4621c0, m=<unavailable>, local_signal_index=<unavailable>, argv=<unavailable>) + 2363 at qobject.cpp:3638
    frame #26: 0x000000010e5c8e69 QtGui`QAction::activate(QAction::ActionEvent) [inlined] QAction::triggered(this=0x00007fef4c4621c0, _t1=false) + 233 at moc_qaction.cpp:277
    frame #27: 0x000000010e5c8e41 QtGui`QAction::activate(this=0x00007fef4c4621c0, event=<unavailable>) + 193 at qaction.cpp:1257
    frame #28: 0x000000010e57bdf1 QtGui`-[QCocoaMenuLoader qtDispatcherToQAction:] + 65
    frame #29: 0x00007fff8e9a9260 AppKit`-[NSApplication sendAction:to:from:] + 327
    frame #30: 0x00007fff8e9c41c8 AppKit`-[NSMenuItem _corePerformAction] + 394
    frame #31: 0x00007fff8e9c3f04 AppKit`-[NSCarbonMenuImpl performActionWithHighlightingForItemAtIndex:] + 117
    frame #32: 0x00007fff8e9c307c AppKit`-[NSMenu performKeyEquivalent:] + 289
    frame #33: 0x00007fff8e9bf8e1 AppKit`-[NSApplication _handleKeyEquivalent:] + 822
    frame #34: 0x00007fff8e92eacc AppKit`-[NSApplication sendEvent:] + 3293
    frame #35: 0x000000010e57c2e1 QtGui`-[QNSApplication sendEvent:] + 97
    frame #36: 0x00007fff8e77e9f9 AppKit`-[NSApplication run] + 646
    frame #37: 0x000000010e585a7b QtGui`QEventDispatcherMac::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 2059
    frame #38: 0x000000010f40547f QtCore`QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) [inlined] QFlags<QEventLoop::ProcessEventsFlag>::QFlags(this=0x00007fff00000024) + 9 at qglobal.h:2434
    frame #39: 0x000000010f405476 QtCore`QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) [inlined] QFlags<QEventLoop::ProcessEventsFlag>::QFlags(this=0x00007fff00000024) at qglobal.h:2434
    frame #40: 0x000000010f405476 QtCore`QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) [inlined] QFlags<QEventLoop::ProcessEventsFlag>::operator|(f=<unavailable>) const + 59 at qeventloop.cpp:149
    frame #41: 0x000000010f40543b QtCore`QEventLoop::exec(this=0x00007fff5360cf50, flags=(i = 0)) + 427 at qeventloop.cpp:204
    frame #42: 0x000000010f408697 QtCore`QCoreApplication::exec() + 199 at qcoreapplication.cpp:1227
    frame #43: 0x000000010c607afa kdevelop`main(argc=<unavailable>, argv=<unavailable>) + 54122 at main.cpp:582
    frame #44: 0x00007fff8915c5fd libdyld.dylib`start + 1
    frame #45: 0x00007fff8915c5fd libdyld.dylib`start + 1



From rjvbertin at gmail.com  Sat Jun  6 23:34:56 2015
From: rjvbertin at gmail.com (=?UTF-8?B?UmVuw6kgSi4gVi4=?= Bertin)
Date: Sat, 06 Jun 2015 23:34:56 +0200
Subject: [Development] crash in qt_mac_create_imagemask while printing
	from KDE application
References: <2277955.xDIP4Fh5e1@portia.local>
Message-ID: <4956836.b6SQu5btpI@portia.local>

Ren? J.V. Bertin wrote:

In addition to px->pixels==NULL (which it isn't always when the crash occurs), I also notice that px->bytesPerRow has a
suspicious value. When I see the line `srow = sptr + (y * (sbpr / 4));`, I think that sbpr (px->bytesPerRow) should be equal
or a known multiple of the mask width `sw`, correct?

The question is, why would px (pixmap.data.data()) seem to be corrupt if pixmap itself is allocated one level up in the
backtrace? Is this a case of missing initialisation, perhaps?

R.


> Is there anything that can be done with a backtrace like the one below
> that would make it worthwhile to file a bug report? Some prodding after
> liberal use of `volatile` in qt_mac_create_imagemask suggests that
> px->pixels==NULL
>
> R.
>
> (lldb) bt all
> * thread #1: tid = 0x6280a, 0x00007fff8914fe20
> libsystem_kernel.dylib`__wait4 + 8, queue = 'com.apple.main-thread', stop
> reason = signal SIGSTOP
>   * frame #0: 0x00007fff8914fe20 libsystem_kernel.dylib`__wait4 + 8
>     frame #1: 0x000000010dab494e
>     libkdeui.5.dylib`KCrash::startProcess(int, char const**, bool)
>     [inlined] startProcessInternal(argc=<unavailable>,
>     directly=<unavailable>) + 265 at kcrash.cpp:556 frame #2:
>     0x000000010dab4845
>     libkdeui.5.dylib`KCrash::startProcess(argc=<unavailable>,
>     argv=<unavailable>, waitAndExit=<unavailable>) + 21 at kcrash.cpp:538
>     frame #3: 0x000000010dab3a79
>     libkdeui.5.dylib`KCrash::defaultCrashHandler(sig=<unavailable>) + 1209
>     at kcrash.cpp:441 frame #4: 0x00007fff886fd5aa
>     libsystem_platform.dylib`_sigtramp + 26 frame #5: 0x000000010e681c21
>     QtGui`qt_mac_create_imagemask(pixmap=<unavailable>,
>     sr=0x00007fff5360b620) + 1057 at qpixmap_mac.cpp:1090 frame #6:
>     0x000000010e78f9ff QtGui`qt_mac_draw_pattern(info=0x00007fef4c72fa80,
>     c=0x00007fef4c70fab0) + 1167 at qpaintengine_mac.cpp:494 frame #7:



From olivier at woboq.com  Sun Jun  7 09:07:56 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Sun, 07 Jun 2015 09:07:56 +0200
Subject: [Development] Qt 5.5.0 header diff: QtSvg.diff
In-Reply-To: <1801157.NKuL6g2OfL@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1672691.GYKKPxvrAS@frederik-thinkcentre-m93p>
	<1801157.NKuL6g2OfL@tjmaciei-mobl4>
Message-ID: <2353519.6AC9Iz62gZ@finn>

On Saturday 6. June 2015 10:04:09 Thiago Macieira wrote:
> On Friday 05 June 2015 10:10:44 Frederik Gladhorn wrote:
>
> No changes, good.
>
> We ought to stop revving the version number for libraries that did not
> update at all...

Maybe there was no API, But if you look a git loog, you will see several
commits that adds feature, fix bugs, or optimize QtSvg.

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org

From Lars.Knoll at theqtcompany.com  Sun Jun  7 09:32:02 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Sun, 7 Jun 2015 07:32:02 +0000
Subject: [Development] Qt 5.5.0 header diff: QtNetwork.diff
In-Reply-To: <3440322.SYCdOgITqm@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1437465.oSMvkFyLob@tjmaciei-mobl4> <5572E5FC.4000909@kdab.com>
	<3440322.SYCdOgITqm@tjmaciei-mobl4>
Message-ID: <DFCB7594-B2A8-41F2-B3CB-BC4DB5A0C33A@theqtcompany.com>


On 06/06/15 15:26, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Thiago Macieira" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of thiago.macieira at intel.com> wrote:

>On Saturday 06 June 2015 14:22:20 Giuseppe D'Angelo wrote:
>> Il 06/06/2015 13:27, Thiago Macieira ha scritto:
>> > Then why do we need them in QSslSocket?
>>
>> Technically they are be needed there, indeed, but I didn't want to cause
>> an API asymmetry with the other functions for ciphers, certificates and
>> so on, that's all.
>
>The symmetry only existed because we added them to QSslSocket before
>QSslCertificate existed.
>
>I'd rather new API existed only in QSslConfiguration. That way, we don't need
>to duplicate in QSslSocket.

In that case you should probably also deprecate the methods in QSslSocket.

Cheers,
Lars


From Lars.Knoll at theqtcompany.com  Sun Jun  7 09:49:19 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Sun, 7 Jun 2015 07:49:19 +0000
Subject: [Development] Qt 5.5.0 header diff: QtQuickWidgets.diff
In-Reply-To: <7468991.fXrknh8AKi@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<8336209.CUrKNWMaJN@frederik-thinkcentre-m93p>
	<7468991.fXrknh8AKi@tjmaciei-mobl4>
Message-ID: <274DF2E0-DF66-4BE5-B956-96D068BF52BD@theqtcompany.com>

On 06/06/15 10:04, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Thiago Macieira" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of thiago.macieira at intel.com> wrote:



>On Friday 05 June 2015 10:10:46 Frederik Gladhorn wrote:
>> +#ifndef QT_NO_DRAGANDDROP
>> +    virtual void dragEnterEvent(QDragEnterEvent *);
>> +    virtual void dragMoveEvent(QDragMoveEvent *);
>> +    virtual void dragLeaveEvent(QDragLeaveEvent *);
>> +    virtual void dropEvent(QDropEvent *);
>> +#endif
>> +
>
>Is this a public libary?

Yes.
>
>
>Are the above overrides or not? If they are overrides, add Q_DECL_OVERRIDE.

The methods are overrides.

The change looks good except for the missing Q_DECL_OVERRIDE. So far the drag events have been catched in the generic ::event() reimplementation, so nobody could have subclassed these methods in any meaningful way anyway.

Cheers,
Lars


From sergio.martins at kdab.com  Sun Jun  7 22:04:51 2015
From: sergio.martins at kdab.com (Sergio Martins)
Date: Sun, 07 Jun 2015 21:04:51 +0100
Subject: [Development] Q_OBJECT and "override"
In-Reply-To: <CACcA1Ro8R-Nc9X0jXW_b3CCfGQBYHUJriaew4TJoLkbWn3sDgw@mail.gmail.com>
References: <55704095.3000201@theqtcompany.com>
	<AM3PR02MB097348D9D22BDB4447B24668DB30@AM3PR02MB097.eurprd02.prod.outlook.com>
	<CACcA1Ro8R-Nc9X0jXW_b3CCfGQBYHUJriaew4TJoLkbWn3sDgw@mail.gmail.com>
Message-ID: <5853129.ahNpUFEuYA@desktop>

On Thursday, June 04, 2015 16:01:01 Aleix Pol wrote:

>
> Is it really that much work? I hear there's tools to do so [1] and
> it's the compiler telling whether it's correct or not.
>
> Aleix

I've added Q_DECL_OVERRIDE to some kdepim libraries with clang-modernize and 5
minutes of my time.

I also tried it on qtbase but it didn't work though, it failed to find some Qt
headers, looks like a bug in clang-modernize or the tool I used to build the
compilation database (bear). Maybe someone else wants to give it a shot ?




Regards,
--
S?rgio Martins | sergio.martins at kdab.com | Software Engineer
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel: Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - The Qt Experts

From steveire at gmail.com  Mon Jun  8 01:11:23 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Mon, 08 Jun 2015 01:11:23 +0200
Subject: [Development] Some Qt3D feedback
Message-ID: <ml2j2r$eg3$1@ger.gmane.org>


Hello,

Congrats to Paul, Sean and others working on getting this module in a
releasable state for Qt 5.5!

I have not reviewed the code, but I found some items to raise:

1) The include/Qt3DCore/Window file doesn't have a Q prefix.

as every other header does. Should probably be Qt3DWindow.

2) A private header is included in a public header:

 include/Qt3DCore$ grep private/ *.h
 qaspectjobmanager.h:#include <Qt3DCore/private/qt3dcore_global_p.h>

This is concerning - Don't we have a unit test preventing that?

3) The cmake unit tests don't pass.

It is easily fixable, but does this mean that the cmake tests are not run
for this module? That is concerning.

Are unit tests run for this module in CI at all?

4) Private dependencies

 git grep -w -e QT --and -e private

shows a bunch of content. Shouldn't they be added to QT_PRIVATE instead?

5) Qt3D namespace

This is the first time that all classes in a library are in a namespace.
Previously only enums (in various modules) and free functions (in
QtConcurrent) have been put in namespaces.

In QtConcurrent, the module name also appears in the header file, but that
is not followed by Qt3D libraries.

Given that Qt has never put classes in a namespace like this, is there
something to be consistent about here?

6) QParameter is a very generic name

I realise it is in a namespace, but still...

Qt3DParamter might be better *and* more consistent. Similar applies to other
classes.

7) Unneeded Q_DECLARE_METATYPE

Using the macro for QObject derived types is not needed. I saw

 Q_DECLARE_METATYPE(Qt3D::QNode *)

and similar for QParameter and then stopped searching.

8) Docs in headers.

I saw one method documented in qparameter.h instead of in the cpp and I
didn't look for more.

Thanks,

Steve.



From jani.heikkinen at theqtcompany.com  Mon Jun  8 06:59:10 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Mon, 8 Jun 2015 04:59:10 +0000
Subject: [Development] New Qt5.5.0-RC snapshot available
Message-ID: <DB3PR02MB0540869090D2B2D31D7B2477E4BF0@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi all,


New snapshot for Qt5.5.0 RC available.

Windows: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-05_79/

Linux: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-05_101/

Mac: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-05_83/


Content is not the final RC one but should be really near so please inform me immediately if you find something broken & which should block the release.

We are trying to pur RC out this Thursday & final Tue 23.6.2015 so please don't try to get any nice-to-have's in anymore.


Maintainers: For the coming releases please make sure

- All findings from header diff is fixed today

- all known issues are listed in https://wiki.qt.io/Qt_5.5.0_Known_Issues

- Change files are created & found from https://wiki.qt.io/Change-files-in-Qt-5.5.0#Qt_5.5.0_Change_files

* Missing:

** qtandroidextras: http://code.qt.io/cgit/qt/qtandroidextras.git/tree/dist/changes-5.5.0?h=5.5.0

** qtbase: http://code.qt.io/cgit/qt/qtbase.git/tree/dist/changes-5.5.0?h=5.5.0

** qtconnectivity: http://code.qt.io/cgit/qt/qtconnectivity.git/tree/dist/changes-5.5.0?h=5.5.0

** qtdoc: http://code.qt.io/cgit/qt/qtdoc.git/tree/dist/changes-5.5.0?h=5.5.0

** qtenginio: http://code.qt.io/cgit/qt/qtenginio.git/tree/dist/changes-1.1.2?h=1.1.2

** qtgraphicaleffects: http://code.qt.io/cgit/qt/qtgraphicaleffects.git/tree/dist/changes-5.5.0?h=5.5.0

** qtlocation: http://code.qt.io/cgit/qt/qtlocation.git/tree/dist/changes-5.5.0?h=5.5.0

** qtmacextras: http://code.qt.io/cgit/qt/qtmacextras.git/tree/dist/changes-5.5.0?h=5.5.0

** qtmultimedia: http://code.qt.io/cgit/qt/qtmultimedia.git/tree/dist/changes-5.5.0?h=5.5.0

** qtquick1: http://code.qt.io/cgit/qt/qtquick1.git/tree/dist/changes-5.5.0?h=5.5.0

** qtscript: http://code.qt.io/cgit/qt/qtscript.git/tree/dist/changes-5.5.0?h=5.5.0

** qtsensors: http://code.qt.io/cgit/qt/qtsensors.git/tree/dist/changes-5.5.0?h=5.5.0

** qtserialport: http://code.qt.io/cgit/qt/qtserialport.git/tree/dist/changes-5.5.0?h=5.5.0

** qtsvg: http://code.qt.io/cgit/qt/qtsvg.git/tree/dist/changes-5.5.0?h=5.5.0

** qttranslations: http://code.qt.io/cgit/qt/qttranslations.git/tree/dist/changes-5.5.0?h=5.5.0

** qttools: http://code.qt.io/cgit/qt/qttools.git/tree/dist/changes-5.5.0?h=5.5.0

** qtwayland: http://code.qt.io/cgit/qt/qtwayland.git/tree/dist/changes-5.5.0?h=5.5.0

** qtwebchannel: http://code.qt.io/cgit/qt/qtwebchannel.git/tree/dist/changes-5.5.0?h=5.5.0

** qtwebengine: http://code.qt.io/cgit/qt/qtwebengine.git/tree/dist/changes-5.5.0?h=5.5.0

** qtwebkit-examples: http://code.qt.io/cgit/qt/qtwebkit-examples.git/tree/dist/changes-5.5.0?h=5.5.0

** qtx11extras: http://code.qt.io/cgit/qt/qtx11extras.git/tree/dist/changes-5.5.0?h=5.5.0

** qtxmlpatterns: http://code.qt.io/cgit/qt/qtxmlpatterns.git/tree/dist/changes-5.5.0?h=5.5.0


br,

Jani
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150608/6513b6ac/attachment.html

From coroberti at gmail.com  Mon Jun  8 08:15:23 2015
From: coroberti at gmail.com (Robert Iakobashvili)
Date: Mon, 8 Jun 2015 09:15:23 +0300
Subject: [Development] Qt for iOS: API to pass Application Name to
	UIApplicationMain
Message-ID: <CAE-Nr6wYJ3_ffYez28FD9h1DF1xNmG31m_h1VxvZDVSOxLTJ2A@mail.gmail.com>

Hi,
To develop and use application-specific class for
an application instead the default UIApplication,
user may wish to pass the name of an UIApplication derivative
to iOS in UIApplicationMain

In qioseventdispatcher.mm nil is passed as the 3-rd argument:

return UIApplicationMain(argc, argv, nil,
NSStringFromClass([QIOSApplicationDelegate class]));

Is there any other way to pass the name of application-specific
derivative of UIApplication besides patching the sources?

Thank you in advance.

Regards,
Robert

From soraya.santanaf at gmail.com  Mon Jun  8 08:53:39 2015
From: soraya.santanaf at gmail.com (Soraya Santana de la Fe)
Date: Mon, 8 Jun 2015 08:53:39 +0200
Subject: [Development] Qt 4.8.6 win32-msvc2008 compilation. error
 LNK2001: unresolved external symbol __imp__q_atomic_increment
In-Reply-To: <3984503.6CSizsXd4G@tjmaciei-mobl4>
References: <CAFA1cDdOr4HaHD__V-cMObU-3UBcQ-GLdSf57tsVCsEF8F9t5A@mail.gmail.com>
	<2371324.CKLuunueQm@tjmaciei-mobl4>
	<CAFA1cDeKwM7bCBFniELPPOQdDe=DvVXmc9uULMJAqzzXJY-i-Q@mail.gmail.com>
	<3984503.6CSizsXd4G@tjmaciei-mobl4>
Message-ID: <CAFA1cDfhUerQ04e6wEXuvxSGkCJ0Jsy7=TpEEsZ=JgE7VCUNTw@mail.gmail.com>

Thankyou Thiago! good to know that it is posible to share the includes.
Anyway propably I will take the easiest option: separate the includes
entirely.

Best

2015-06-06 0:23 GMT+02:00 Thiago Macieira <thiago.macieira at intel.com>:

> On Wednesday 03 June 2015 08:20:23 Soraya Santana de la Fe wrote:
> > I have found the problem and why QT_ARCH_WINDOWS was not defined. I was
> > using a diferent folder for my includes, comming from a linux compilation
> > instead the one generated by the "make install" command of my new windows
> > compilation. After this I see that I cannot share the includes for two
> > different architectures, is that correct?
>
> You can, for all files *except* qconfig.h. You need to have separate
> qconfig.h as
> well as separate mkspecs/qconfig.pri, mkspecs/qmodule.pri,
> mkspecs/default. You
> usually use a separate qmake, but sharing that is possible provided the
> above
> restrictions are taken into account.
>
> The easiest way to do all of that is to separate the Qt builds and headers
> entirely.
>
> Note: there's no qmake option to search for the mkspecs/* files I
> mentioned.
> For qconfig.h, you can easily hack it. Linux distributions do that for Qt
> 4, by
> replacing qconfig.h with a dispatcher that looks like:
>
> #ifdef __i386__
> #  include "qconfig-i386.h"
> #elif defined(__x86_64__))
> #  include "qconfig-x86_64.h"
> #
>         ...
> #endif
>
> --
> Thiago Macieira - thiago.macieira (AT) intel.com
>   Software Architect - Intel Open Source Technology Center
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
>



--
Soraya Santana de la Fe
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150608/0df01f5a/attachment-0001.html

From alexander.blasche at theqtcompany.com  Mon Jun  8 09:26:49 2015
From: alexander.blasche at theqtcompany.com (Blasche Alexander)
Date: Mon, 8 Jun 2015 07:26:49 +0000
Subject: [Development] Qt 5.5.0 header diff: QtPositioning.diff
In-Reply-To: <5537491.vQKCN8pi1O@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<4062838.8hLyuFTaXD@frederik-thinkcentre-m93p>
	<5537491.vQKCN8pi1O@tjmaciei-mobl4>
Message-ID: <AM2PR02MB05642AEA8C7A33E59C7B8AC49EBF0@AM2PR02MB0564.eurprd02.prod.outlook.com>

> -----Original Message-----
> Thiago Macieira
> On Friday 05 June 2015 10:10:50 Frederik Gladhorn wrote:
> > -    qreal distanceTo(const QGeoCoordinate &other) const;
> > -    qreal azimuthTo(const QGeoCoordinate &other) const;
> > +    Q_INVOKABLE qreal distanceTo(const QGeoCoordinate &other) const;
> > +    Q_INVOKABLE qreal azimuthTo(const QGeoCoordinate &other) const;
> >
>
> >From C++, the module looks good.
>
> >From QML, should there be some Q_REVISION above?

It is not required. The above two functions existed in Qt 5.4 already. We merely swap the C++ object handling the QML representation for QGeoCoordinate. QGeoCoordinate is the new C++ handler and it needs to make the functionality available via Q_INVOKABLE.

--
Alex

From olivier at woboq.com  Mon Jun  8 10:01:34 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Mon, 08 Jun 2015 10:01:34 +0200
Subject: [Development] Q_OBJECT and "override"
In-Reply-To: <5853129.ahNpUFEuYA@desktop>
References: <55704095.3000201@theqtcompany.com>
	<CACcA1Ro8R-Nc9X0jXW_b3CCfGQBYHUJriaew4TJoLkbWn3sDgw@mail.gmail.com>
	<5853129.ahNpUFEuYA@desktop>
Message-ID: <2292437.ChBdrcikxm@finn>

On Sunday 7. June 2015 21:04:51 Sergio Martins wrote:
> On Thursday, June 04, 2015 16:01:01 Aleix Pol wrote:
> > Is it really that much work? I hear there's tools to do so [1] and
> > it's the compiler telling whether it's correct or not.
> >
> > Aleix
>
> I've added Q_DECL_OVERRIDE to some kdepim libraries with clang-modernize and
> 5 minutes of my time.
>
> I also tried it on qtbase but it didn't work though, it failed to find some
> Qt headers, looks like a bug in clang-modernize or the tool I used to build
> the compilation database (bear). Maybe someone else wants to give it a shot
> ?

I have already run clang-modernize on qt-base a few month ago to add
Q_DECL_OVERRIDE.
(So Qt 5.5 has it almost everywhere)

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org


From marc.mutz at kdab.com  Mon Jun  8 11:07:26 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 8 Jun 2015 11:07:26 +0200
Subject: [Development] Qt 5.5.0 header diff: QtWidgets.diff
In-Reply-To: <1931284.uvrcYbAkYc@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1931284.uvrcYbAkYc@frederik-thinkcentre-m93p>
Message-ID: <201506081107.27225.marc.mutz@kdab.com>

On Friday 05 June 2015 10:11:27 Frederik Gladhorn wrote:
> diff --git a/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
> b/src/widgets/widgets/qmaccocoaviewcontainer_mac.h index a98d30f..5920c1f
> 100644
> --- a/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
> +++ b/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
> @@ -52,7 +52,6 @@ public:
>      NSView *nativeView() const;
>
>  protected:
> -    void init(NSView *parentView);
>      bool event(QEvent *ev);
>
>  private:

This diff seems wrong. In Qt 5.5, the header
src/widgets/widgets/qmaccocoaviewcontainer_mac.h looks like this:

QT_BEGIN_NAMESPACE

class QMacCocoaViewContainerPrivate;
class Q_WIDGETS_EXPORT QMacCocoaViewContainer : public QWidget
{
    Q_OBJECT
public:
    QMacCocoaViewContainer(NSView *cocoaViewToWrap, QWidget *parent = 0);
    virtual ~QMacCocoaViewContainer();

    void setCocoaView(NSView *view);
    NSView *cocoaView() const;

private:
    Q_DECLARE_PRIVATE(QMacCocoaViewContainer)
};

QT_END_NAMESPACE


--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Mon Jun  8 11:14:42 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 8 Jun 2015 11:14:42 +0200
Subject: [Development] Qt 5.5.0 header diff: QtWidgets.diff
In-Reply-To: <201506081107.27225.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1931284.uvrcYbAkYc@frederik-thinkcentre-m93p>
	<201506081107.27225.marc.mutz@kdab.com>
Message-ID: <201506081114.43134.marc.mutz@kdab.com>

On Monday 08 June 2015 11:07:26 Marc Mutz wrote:
> On Friday 05 June 2015 10:11:27 Frederik Gladhorn wrote:
> > diff --git a/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
> > b/src/widgets/widgets/qmaccocoaviewcontainer_mac.h index a98d30f..5920c1f
> > 100644
> > --- a/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
> > +++ b/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
> >
> > @@ -52,7 +52,6 @@ public:
> >      NSView *nativeView() const;
> >
> >  protected:
> > -    void init(NSView *parentView);
> >
> >      bool event(QEvent *ev);
> >
> >  private:
> This diff seems wrong. In Qt 5.5, the header
> src/widgets/widgets/qmaccocoaviewcontainer_mac.h looks like this:
>
> QT_BEGIN_NAMESPACE
>
> class QMacCocoaViewContainerPrivate;
> class Q_WIDGETS_EXPORT QMacCocoaViewContainer : public QWidget
> {
>     Q_OBJECT
> public:
>     QMacCocoaViewContainer(NSView *cocoaViewToWrap, QWidget *parent = 0);
>     virtual ~QMacCocoaViewContainer();
>
>     void setCocoaView(NSView *view);
>     NSView *cocoaView() const;
>
> private:
>     Q_DECLARE_PRIVATE(QMacCocoaViewContainer)
> };
>
> QT_END_NAMESPACE

There's no actual diff between 5.4 and 5.5 in this header file.

Rest looks good, too, though I'd have made QSpacerItem::sizePolicy() const
inline: https://codereview.qt-project.org/113873

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From giuseppe.dangelo at kdab.com  Mon Jun  8 10:25:35 2015
From: giuseppe.dangelo at kdab.com (Giuseppe D'Angelo)
Date: Mon, 08 Jun 2015 10:25:35 +0200
Subject: [Development] Qt 5.5.0 header diff: QtNetwork.diff
In-Reply-To: <3440322.SYCdOgITqm@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>	<1437465.oSMvkFyLob@tjmaciei-mobl4>
	<5572E5FC.4000909@kdab.com> <3440322.SYCdOgITqm@tjmaciei-mobl4>
Message-ID: <5575517F.2090308@kdab.com>

Il 06/06/2015 15:26, Thiago Macieira ha scritto:
> The symmetry only existed because we added them to QSslSocket before
> QSslCertificate existed.
>
> I'd rather new API existed only in QSslConfiguration. That way, we don't need
> to duplicate in QSslSocket.

Richard, Peter, do you concur on this? I can create a patch if everyone
agrees.

Of course, yes, this also means deprecating the other duplicated methods.

Cheers,
--
Giuseppe D'Angelo | giuseppe.dangelo at kdab.com | Software Engineer
KDAB (UK) Ltd., a KDAB Group company | Tel: UK +44-1625-809908
KDAB - The Qt Experts

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4048 bytes
Desc: Firma crittografica S/MIME
Url : http://lists.qt-project.org/pipermail/development/attachments/20150608/01de2244/attachment.bin

From jani.heikkinen at theqtcompany.com  Mon Jun  8 10:51:08 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Mon, 8 Jun 2015 08:51:08 +0000
Subject: [Development] Header diff related changes
Message-ID: <DB3PR02MB05409BB20C3FC4BC4E719992E4BF0@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi all,

I tried to collect "change requests" from header diffs. We need to get needed changes in RC so we need to get needed fixes in really soon, preferably today.

QtQml:
rename qqmfile.h into qqmlfile_p.h. (Simon Hausman)?

QtGui:
src/gui/accessible/qaccessible.h :
This is not Qt-like API. The strings are initialised on first use (all of them)
but they are translated, which means they will not obey a change in
translation settings.
The old ones can't be fixed now, but we should fix the new ones not to return a
const reference.we should fix the new ones not to return a const reference.

On the topic of qpen.h, I am a little concerned about the addition of
Q_DECL_NOTHROW to the two non-inlined methods QPen(const QPen &pen) and
QPen &operator=(const QPen &pen). Q_DECL_NOEXCEPT should be fine I think, but
throw() is represented in the C++ mangled name with MSVC.

QtQuickWidgets:
add Q_DECL_OVERRIDE.

QtSerialPort:
Retroactive deprecations are not allowed. Please change the macros to (5,5),
even if the functions had been marked as deprecated in the documentation.

QtTest:
Q_TESTLIB_EXPORT QString qExtractTestData(const QString &dirName);

This API isn't finished. The function needs to return a QTemporaryDir (which
implies passing in by output parameter) so that the caller properly cleans up
the extracted test data.

The rest looks good. I'd have put the qgpu_features function inside the QTest
namespace, like everything else, though.

QtCore:
I can't tell if the qmetatype.h template magic is binary compatible or not. As
evidenced by a recent push [1] about the IsGadget flag, it isn't.

I'm going to put a stop to this. qmetatype.h template magic is now frozen as
of Qt 5.5 and until Qt 6.0, aside from bugfixes or pure additions that do not
modify existing template classes.

[1] https://codereview.qt-project.org/113652

> +    Q_FLAG(LoadHint)
> +    Q_FLAG(LoadHints)
Do we need both Q_FLAG? That looks like a mistake.

> +// ### Qt6: check if there's a better way
> +class QStringList : public QList<QString>
[...]
> -    inline void sort(Qt::CaseSensitivity cs = Qt::CaseSensitive);
> -    inline int removeDuplicates();
The above works only because:
 1) QStringList is not exported
 2) the functions in question are inlines

However, if someone derives from QStringList and exports a class, using MSVC,
then this may be binary incompatible. See qvector_msvc.h.

QtNetwork:
> +    // EC settings.
> +    QVector<QSslEllipticCurve> ellipticCurves() const;
> +    void setEllipticCurves(const QVector<QSslEllipticCurve> &curves);
> +    static void setDefaultEllipticCurves(const QVector<QSslEllipticCurve>
> &curves); +    static QVector<QSslEllipticCurve> defaultEllipticCurves();
> +    static QVector<QSslEllipticCurve> supportedEllipticCurves();
> +

These should be in QSslConfiguration, not QSslSocket.

Best regards,
Jani Heikkinen
Release Manager | The Qt Company

The Qt Company / Digia Finland Ltd, Elektroniikkatie 10, 90590 Oulu, Finland
Email: jani.heikkinen at theqtcompany.com | Mobile: + 358 50 48 73 735
www.qt.io |Qt Blog: http://blog.qt.digia.com/ | Twitter: @QtbyDigia, @Qtproject Facebook: www.facebook.com/qt



From olivier at woboq.com  Mon Jun  8 11:28:48 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Mon, 08 Jun 2015 11:28:48 +0200
Subject: [Development] Qt 5.5.0 header diff: QtCore.diff
In-Reply-To: <4121929.FLSJ3T6r3Y@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<3267312.MdcMplLC6g@frederik-thinkcentre-m93p>
	<4121929.FLSJ3T6r3Y@tjmaciei-mobl4>
Message-ID: <4081158.bDuXqVuWYx@finn>

On Saturday 6. June 2015 11:17:30 Thiago Macieira wrote:
> On Friday 05 June 2015 10:11:28 Frederik Gladhorn wrote:
>
>
> I can't tell if the qmetatype.h template magic is binary compatible or not.
> As evidenced by a recent push [1] about the IsGadget flag, it isn't.
>
> I'm going to put a stop to this. qmetatype.h template magic is now frozen as
> of Qt 5.5 and until Qt 6.0, aside from bugfixes or pure additions that do
> not modify existing template classes.
>
> [1] https://codereview.qt-project.org/113652

The problem here is the qFail. We can just remove the qFail in this case (what
the patch does) and we will be fine.

There is no reason to stop improving qmetatype.

> >      Q_DECLARE_FLAGS(LoadHints, LoadHint)
> >
> > +    Q_FLAG(LoadHint)
> > +    Q_FLAG(LoadHints)
>
> Do we need both Q_FLAG? That looks like a mistake.


The code was just moved from Q_FLAGS to Q_FLAG.  Both were there before and I
kept it like that.

It cannot really be changed otherwise code like
staticQtMetaObject.indexOfEnumerator("LoadHint") or
staticQtMetaObject.indexOfEnumerator("LoadHints") will break.

The use of Q_ENUMS and Q_FLAGS with QFlags types is not really consistent
within Qt.

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org


From qt at csipa.in.rs  Mon Jun  8 12:16:28 2015
From: qt at csipa.in.rs (Attila Csipa)
Date: Mon, 08 Jun 2015 11:16:28 +0100
Subject: [Development] Humiditysensor
Message-ID: <55756B7C.9090705@csipa.in.rs>

Hi,

Looking at the sensor list in the current sensors module, I noticed one
missing: humidity. I'm doing some sensor synthesis and nowadays
higher-end Android devices also come with humidity sensors, so it would
be great to have this as well. On Android at least there seems to be no
reason why not to have it as it behaves exactly like all the other
sensors, which are supported.
http://developer.android.com/guide/topics/sensors/sensors_environment.html

Is anyone aware of any work in this area?

Best regards,
Attila

From marc.mutz at kdab.com  Mon Jun  8 15:21:50 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 8 Jun 2015 15:21:50 +0200
Subject: [Development] Qt 5.5.0 header diff: QtLocation.diff
In-Reply-To: <6261744.tkdLD445ve@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<6261744.tkdLD445ve@frederik-thinkcentre-m93p>
Message-ID: <201506081521.51350.marc.mutz@kdab.com>

On Friday 05 June 2015 10:10:37 Frederik Gladhorn wrote:
> diff --git a/src/location/maps/qgeocodereply.h
> b/src/location/maps/qgeocodereply.h index a30a863..f713e42 100644
> --- a/src/location/maps/qgeocodereply.h
> +++ b/src/location/maps/qgeocodereply.h
> @@ -56,7 +59,7 @@ class QGeoServiceProviderPrivate;
>  class Q_LOCATION_EXPORT QGeoServiceProvider : public QObject
>  {
>      Q_OBJECT
> -
> +    Q_ENUMS(Error)
>  public:
>      enum Error {
>          NoError,

Should be Q_ENUM(Error) after the enum Error?

But can be fixed in BC way.

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Mon Jun  8 15:26:26 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 8 Jun 2015 15:26:26 +0200
Subject: [Development] Qt 5.5.0 header diff: QtTest.diff
In-Reply-To: <1918988.UFCupMqHcA@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1546666.HYLWss0tDD@frederik-thinkcentre-m93p>
	<1918988.UFCupMqHcA@tjmaciei-mobl4>
Message-ID: <201506081526.26970.marc.mutz@kdab.com>

On Saturday 06 June 2015 10:11:45 Thiago Macieira wrote:
> return a QTemporaryDir (which
> implies passing in by output parameter)

Or simply return QSharedPointer<QTemporaryDir>...

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Mon Jun  8 15:38:21 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 8 Jun 2015 15:38:21 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <1976461.3aPASfonOU@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1976461.3aPASfonOU@frederik-thinkcentre-m93p>
Message-ID: <201506081538.21904.marc.mutz@kdab.com>

On Friday 05 June 2015 10:10:52 Frederik Gladhorn wrote:
> +    typedef QPair<qreal, qreal> FrameRateRange;

Should be a struct, not a QPair:

   FrameRateChange chg = ...;
   chg.first... // what's first???
   chg.second... // what's second???

>      enum Status {
>          UnavailableStatus,
>          UnloadedStatus,
> @@ -169,6 +172,21 @@ public:
>      void setViewfinder(QGraphicsVideoItem *viewfinder);
>      void setViewfinder(QAbstractVideoSurface *surface);
>
> +    QCameraViewfinderSettings viewfinderSettings() const;
> +    void setViewfinderSettings(const QCameraViewfinderSettings &settings);
> +
> +    QList<QCameraViewfinderSettings> supportedViewfinderSettings(
> +            const QCameraViewfinderSettings &settings =
> QCameraViewfinderSettings()) const;

QCameraViewFinderSettings isn't marked as movable, so should be held in
QVector instead.

> +    QList<QSize> supportedViewfinderResolutions(
> +            const QCameraViewfinderSettings &settings =
> QCameraViewfinderSettings()) const;

QList<QSize> should be QVector<QSize>


> +    QList<FrameRateRange> supportedViewfinderFrameRateRanges(
> +            const QCameraViewfinderSettings &settings =

QList<FrameRateChange> should be QVector<FrameRateChange>

> QCameraViewfinderSettings()) const; +
> +    QList<QVideoFrame::PixelFormat> supportedViewfinderPixelFormats(
> +            const QCameraViewfinderSettings &settings =
> QCameraViewfinderSettings()) const;

QList<PixelFormat> should be QVector<PixelFormat> (enum PixelFormat)

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Mon Jun  8 15:42:07 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 8 Jun 2015 15:42:07 +0200
Subject: [Development] Qt 5.5.0 header diff: QtBluetooth.diff
In-Reply-To: <3312559.9fjI1Dg1ho@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<3312559.9fjI1Dg1ho@frederik-thinkcentre-m93p>
Message-ID: <201506081542.08091.marc.mutz@kdab.com>

On Friday 05 June 2015 10:11:25 Frederik Gladhorn wrote:
> +    bool operator==(const QBluetoothHostInfo &other) const;
> +    bool operator!=(const QBluetoothHostInfo &other) const;
> +

should be non-member (friends, if needed)

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Mon Jun  8 15:44:56 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 8 Jun 2015 15:44:56 +0200
Subject: [Development] Qt 5.5.0 header diff: QtQml.diff
In-Reply-To: <1458755.ei2G0iPh77@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1458755.ei2G0iPh77@frederik-thinkcentre-m93p>
Message-ID: <201506081544.57254.marc.mutz@kdab.com>

On Friday 05 June 2015 10:11:30 Frederik Gladhorn wrote:
> +    static bool startTcpDebugServer(int port, bool block = false,
> +                                    const QString &hostName = QString());

boolean argument should be an enum.

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From joerg.bornemann at theqtcompany.com  Mon Jun  8 14:57:19 2015
From: joerg.bornemann at theqtcompany.com (Joerg Bornemann)
Date: Mon, 8 Jun 2015 14:57:19 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <201506081538.21904.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>	<1976461.3aPASfonOU@frederik-thinkcentre-m93p>
	<201506081538.21904.marc.mutz@kdab.com>
Message-ID: <5575912F.20804@theqtcompany.com>

On 08-Jun-15 15:38, Marc Mutz wrote:

> QList<QSize> should be QVector<QSize>

Speaking of that, should we adjust the following recommendation in the docs?

"For most purposes, QList is the right class to use. Its index-based API
is more convenient than QLinkedList's iterator-based API, and it is
usually faster than QVector because of the way it stores its items in
memory. It also expands to less code in your executable."


BR,

Joerg

From oswald.buddenhagen at theqtcompany.com  Mon Jun  8 15:04:47 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Mon, 8 Jun 2015 15:04:47 +0200
Subject: [Development] Qt 5.5.0 header diff: QtTest.diff
In-Reply-To: <201506081526.26970.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1546666.HYLWss0tDD@frederik-thinkcentre-m93p>
	<1918988.UFCupMqHcA@tjmaciei-mobl4>
	<201506081526.26970.marc.mutz@kdab.com>
Message-ID: <20150608130447.GA19880@troll08.it.local>

On Mon, Jun 08, 2015 at 03:26:26PM +0200, Marc Mutz wrote:
> On Saturday 06 June 2015 10:11:45 Thiago Macieira wrote:
> > return a QTemporaryDir (which
> > implies passing in by output parameter)
>
> Or simply return QSharedPointer<QTemporaryDir>...
>
smart pointers in the api are not liked by binding authors ...

From Yoann.Lopes at theqtcompany.com  Mon Jun  8 15:17:26 2015
From: Yoann.Lopes at theqtcompany.com (Lopes Yoann)
Date: Mon, 8 Jun 2015 13:17:26 +0000
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <201506081538.21904.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1976461.3aPASfonOU@frederik-thinkcentre-m93p>
	<201506081538.21904.marc.mutz@kdab.com>
Message-ID: <307BC97B-9BD2-465E-B431-FE8C5F4F653A@digia.com>


> On 08 Jun 2015, at 15:38, Marc Mutz <marc.mutz at kdab.com> wrote:
>
> On Friday 05 June 2015 10:10:52 Frederik Gladhorn wrote:
>> +    typedef QPair<qreal, qreal> FrameRateRange;
>
> Should be a struct, not a QPair:
>
>   FrameRateChange chg = ...;
>   chg.first... // what's first???
>   chg.second... // what's second???

It?s "?Range", not ??Change" ;)
I think having ?first? and ?second? for a range is pretty self-explanatory.

?
Yoann

From sean.harmer at kdab.com  Mon Jun  8 15:18:33 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Mon, 08 Jun 2015 14:18:33 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <ml2j2r$eg3$1@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org>
Message-ID: <2646160.nJGqpQo0xz@cartman>

Hey Steve,

thanks for the feedback!

On Monday 08 Jun 2015 01:11:23 Stephen Kelly wrote:
> Hello,
>
> Congrats to Paul, Sean and others working on getting this module in a
> releasable state for Qt 5.5!
>
> I have not reviewed the code, but I found some items to raise:
>
> 1) The include/Qt3DCore/Window file doesn't have a Q prefix.
>
> as every other header does. Should probably be Qt3DWindow.

Right, this actually needs removing and something temporary putting in place
in the examples for now. The window class doesn't do much at all but there is
a need for more full featured integration points. My current thoughts on what
we should aim for are:

1) A convenience window to be used with Qt3D that has a standard camera and
handles aspect ratio changes etc and also uses a default framegraph (that can
be changed by the user). QML and C++ versions.

2) Qt3D Widget to embed a Qt3D scene into a QWidget hierarchy. Likely
analogous to QOpenGLWidget but with the above Qt3D plumbing.

3) Embed Qt3D into a Qt Quick 2 scene. Already available via the Scene3D Qt
Quick 2 element (provided by Qt3D module).

4) Use Qt Quick within Qt3D as e.g. a texture provider so that it is possible
to use a Qt Quick 2 render within the 3D world.

I'll try to tidy up and move the existing Window thing to the examples later
today or tomorrow.

> 2) A private header is included in a public header:
>
>  include/Qt3DCore$ grep private/ *.h
>  qaspectjobmanager.h:#include <Qt3DCore/private/qt3dcore_global_p.h>
>
> This is concerning - Don't we have a unit test preventing that?

I can't find that. Is that from the 5.5 branch?

> 3) The cmake unit tests don't pass.
>
> It is easily fixable, but does this mean that the cmake tests are not run
> for this module? That is concerning.
>
> Are unit tests run for this module in CI at all?

Hmm I thought they were, but obviously not. I'm looking at making the test
work now.

> 4) Private dependencies
>
>  git grep -w -e QT --and -e private
>
> shows a bunch of content. Shouldn't they be added to QT_PRIVATE instead?

Right, https://codereview.qt-project.org/#/c/113899/

> 5) Qt3D namespace
>
> This is the first time that all classes in a library are in a namespace.
> Previously only enums (in various modules) and free functions (in
> QtConcurrent) have been put in namespaces.
>
> In QtConcurrent, the module name also appears in the header file, but that
> is not followed by Qt3D libraries.
>
> Given that Qt has never put classes in a namespace like this, is there
> something to be consistent about here?
>
> 6) QParameter is a very generic name
>
> I realise it is in a namespace, but still...
>
> Qt3DParamter might be better *and* more consistent. Similar applies to other
> classes.

It's precisely because of these kinds of issues that we decided to use
namespaces in Qt3D rather than the poor-man's prefix name spacing.

If it's required to not use namespaces to be part of the Qt project then we
can of course change it. However, I would argue against doing so, especially
in the light of being able to use some more modern C++ features in upcoming QT
versions. Name spaces are supported everywhere these days so why not just use
them, especially in a new add-on module?

> 7) Unneeded Q_DECLARE_METATYPE
>
> Using the macro for QObject derived types is not needed. I saw
>
>  Q_DECLARE_METATYPE(Qt3D::QNode *)
>
> and similar for QParameter and then stopped searching.

Thanks, https://codereview.qt-project.org/#/c/113906/

> 8) Docs in headers.
>
> I saw one method documented in qparameter.h instead of in the cpp and I
> didn't look for more.

The docs need a lot of work. I have some time set aside for doc writing this
week and will do a clean up pass for such issues.

Thanks again,

Sean

--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
KDAB (UK) Ltd, a KDAB Group company
Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
Mobile: +44 (0)7545 140604
KDAB - Qt Experts

From thiago.macieira at intel.com  Mon Jun  8 15:29:46 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 08 Jun 2015 09:29:46 -0400
Subject: [Development] Qt 5.5.0 header diff: QtTest.diff
In-Reply-To: <201506081526.26970.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1918988.UFCupMqHcA@tjmaciei-mobl4>
	<201506081526.26970.marc.mutz@kdab.com>
Message-ID: <2749126.RENZs6Z5sl@tjmaciei-mobl4>

On Monday 08 June 2015 15:26:26 Marc Mutz wrote:
> On Saturday 06 June 2015 10:11:45 Thiago Macieira wrote:
> > return a QTemporaryDir (which
> > implies passing in by output parameter)
>
> Or simply return QSharedPointer<QTemporaryDir>...

Right, but no one has done it yet.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From oswald.buddenhagen at theqtcompany.com  Mon Jun  8 15:31:26 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Mon, 8 Jun 2015 15:31:26 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <307BC97B-9BD2-465E-B431-FE8C5F4F653A@digia.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1976461.3aPASfonOU@frederik-thinkcentre-m93p>
	<201506081538.21904.marc.mutz@kdab.com>
	<307BC97B-9BD2-465E-B431-FE8C5F4F653A@digia.com>
Message-ID: <20150608133126.GB19880@troll08.it.local>

On Mon, Jun 08, 2015 at 01:17:26PM +0000, Lopes Yoann wrote:
>
> > On 08 Jun 2015, at 15:38, Marc Mutz <marc.mutz at kdab.com> wrote:
> >
> > On Friday 05 June 2015 10:10:52 Frederik Gladhorn wrote:
> >> +    typedef QPair<qreal, qreal> FrameRateRange;
> >
> > Should be a struct, not a QPair:
> >
> >   FrameRateChange chg = ...;
> >   chg.first... // what's first???
> >   chg.second... // what's second???
>
> It?s "?Range", not ??Change" ;)
> I think having ?first? and ?second? for a range is pretty self-explanatory.
>
well, "lower bound" and "upper bound" are more natural.
also, it's more consistent to standardize on "no QPair in the api".

From thiago.macieira at intel.com  Mon Jun  8 15:32:42 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 08 Jun 2015 09:32:42 -0400
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <5575912F.20804@theqtcompany.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<201506081538.21904.marc.mutz@kdab.com>
	<5575912F.20804@theqtcompany.com>
Message-ID: <17924569.LBFhTLPqK0@tjmaciei-mobl4>

On Monday 08 June 2015 14:57:19 Joerg Bornemann wrote:
> On 08-Jun-15 15:38, Marc Mutz wrote:
> > QList<QSize> should be QVector<QSize>
>
> Speaking of that, should we adjust the following recommendation in the docs?
>
> "For most purposes, QList is the right class to use. Its index-based API
> is more convenient than QLinkedList's iterator-based API, and it is
> usually faster than QVector because of the way it stores its items in
> memory. It also expands to less code in your executable."

No.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Mon Jun  8 15:34:30 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 08 Jun 2015 09:34:30 -0400
Subject: [Development] Qt 5.5.0 header diff: QtCore.diff
In-Reply-To: <4081158.bDuXqVuWYx@finn>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<4121929.FLSJ3T6r3Y@tjmaciei-mobl4> <4081158.bDuXqVuWYx@finn>
Message-ID: <1510085.0bKmGSJ0Xu@tjmaciei-mobl4>

On Monday 08 June 2015 11:28:48 Olivier Goffart wrote:
> On Saturday 6. June 2015 11:17:30 Thiago Macieira wrote:
> > On Friday 05 June 2015 10:11:28 Frederik Gladhorn wrote:
> >
> >
> > I can't tell if the qmetatype.h template magic is binary compatible or
> > not.
> > As evidenced by a recent push [1] about the IsGadget flag, it isn't.
> >
> > I'm going to put a stop to this. qmetatype.h template magic is now frozen
> > as of Qt 5.5 and until Qt 6.0, aside from bugfixes or pure additions that
> > do not modify existing template classes.
> >
> > [1] https://codereview.qt-project.org/113652
>
> The problem here is the qFail. We can just remove the qFail in this case
> (what the patch does) and we will be fine.
>
> There is no reason to stop improving qmetatype.

The qFatal was there for a good reason.

The freeze stays: no new flags in QMetaType until Qt 6, no more messing with
the template black magic.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Mon Jun  8 15:32:30 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 08 Jun 2015 09:32:30 -0400
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <201506081538.21904.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1976461.3aPASfonOU@frederik-thinkcentre-m93p>
	<201506081538.21904.marc.mutz@kdab.com>
Message-ID: <1455094.akMoYBW97O@tjmaciei-mobl4>

On Monday 08 June 2015 15:38:21 Marc Mutz wrote:
> > +    QList<QSize> supportedViewfinderResolutions(
> > +            const QCameraViewfinderSettings &settings =
> > QCameraViewfinderSettings()) const;
>
> QList<QSize> should be QVector<QSize>

We know that QList is defective, but let's keep it in API. We'll get a chance
to fix QList for Qt 6.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Mon Jun  8 15:36:21 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 08 Jun 2015 09:36:21 -0400
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
Message-ID: <31864008.sKonZy68u6@tjmaciei-mobl4>

On Thursday 04 June 2015 15:29:10 Frederik Gladhorn wrote:
> It's time for the header diffs, please help review the changes (Qt 5.4.2 to
> 5.5.0) to make sure nothing that was added to the public headers slipped
> through when it shouldn't be there.

We seem to be doing API reviews and finding mistakes in the code. Please note
that the header diff does not include new files, so we're not doing API reviews
on any new classes.

API reviews should have been done twice already, before RC stage. It needs to
be done once before the API is merged and once again between the alpha and
beta releases.

Are we skimping on our processes?
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From milian.wolff at kdab.com  Mon Jun  8 15:40:01 2015
From: milian.wolff at kdab.com (Milian Wolff)
Date: Mon, 08 Jun 2015 15:40:01 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <17924569.LBFhTLPqK0@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<5575912F.20804@theqtcompany.com>
	<17924569.LBFhTLPqK0@tjmaciei-mobl4>
Message-ID: <4217461.s3QucPt74C@milian-kdab2>

On Monday 08 June 2015 09:32:42 Thiago Macieira wrote:
> On Monday 08 June 2015 14:57:19 Joerg Bornemann wrote:
> > On 08-Jun-15 15:38, Marc Mutz wrote:
> > > QList<QSize> should be QVector<QSize>
> >
> > Speaking of that, should we adjust the following recommendation in the
> > docs?
> >
> > "For most purposes, QList is the right class to use. Its index-based API
> > is more convenient than QLinkedList's iterator-based API, and it is
> > usually faster than QVector because of the way it stores its items in
> > memory. It also expands to less code in your executable."
>
> No.

Why not? It's simply a bad recommendation.
--
Milian Wolff | milian.wolff at kdab.com | Software Engineer
KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
Tel: +49-30-521325470
KDAB - The Qt Experts

From olivier at woboq.com  Mon Jun  8 15:58:23 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Mon, 08 Jun 2015 15:58:23 +0200
Subject: [Development] Qt 5.5.0 header diff: QtCore.diff
In-Reply-To: <1510085.0bKmGSJ0Xu@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<4081158.bDuXqVuWYx@finn> <1510085.0bKmGSJ0Xu@tjmaciei-mobl4>
Message-ID: <23535458.KGxaUdofMC@finn>

On Monday 8. June 2015 09:34:30 Thiago Macieira wrote:
> On Monday 08 June 2015 11:28:48 Olivier Goffart wrote:
> > On Saturday 6. June 2015 11:17:30 Thiago Macieira wrote:
> > > On Friday 05 June 2015 10:11:28 Frederik Gladhorn wrote:
> > >
> > >
> > > I can't tell if the qmetatype.h template magic is binary compatible or
> > > not.
> > > As evidenced by a recent push [1] about the IsGadget flag, it isn't.
> > >
> > > I'm going to put a stop to this. qmetatype.h template magic is now
> > > frozen
> > > as of Qt 5.5 and until Qt 6.0, aside from bugfixes or pure additions
> > > that
> > > do not modify existing template classes.
> > >
> > > [1] https://codereview.qt-project.org/113652
> >
> > The problem here is the qFail. We can just remove the qFail in this case
> > (what the patch does) and we will be fine.
> >
> > There is no reason to stop improving qmetatype.
>
> The qFatal was there for a good reason.

It was there for a good reason for the existing flags.
But for new flags of course it does not make sens.

> The freeze stays: no new flags in QMetaType until Qt 6, no more messing with
> the template black magic.

You can't mandate that.


From marc.mutz at kdab.com  Mon Jun  8 22:14:00 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 8 Jun 2015 22:14:00 +0200
Subject: [Development] Qt 5.5.0 header diff: QtTest.diff
In-Reply-To: <2749126.RENZs6Z5sl@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<201506081526.26970.marc.mutz@kdab.com>
	<2749126.RENZs6Z5sl@tjmaciei-mobl4>
Message-ID: <201506082214.00726.marc.mutz@kdab.com>

On Monday 08 June 2015 15:29:46 Thiago Macieira wrote:
> On Monday 08 June 2015 15:26:26 Marc Mutz wrote:
> > On Saturday 06 June 2015 10:11:45 Thiago Macieira wrote:
> > > return a QTemporaryDir (which
> > > implies passing in by output parameter)
> >
> >
> >
> > Or simply return QSharedPointer<QTemporaryDir>...
>
> Right, but no one has done it yet.

https://codereview.qt-project.org/113933

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Mon Jun  8 22:31:15 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 8 Jun 2015 22:31:15 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <31864008.sKonZy68u6@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<31864008.sKonZy68u6@tjmaciei-mobl4>
Message-ID: <201506082231.15815.marc.mutz@kdab.com>

On Monday 08 June 2015 15:36:21 Thiago Macieira wrote:
> On Thursday 04 June 2015 15:29:10 Frederik Gladhorn wrote:
> > It's time for the header diffs, please help review the changes (Qt 5.4.2
> > to 5.5.0) to make sure nothing that was added to the public headers
> > slipped through when it shouldn't be there.
>
> We seem to be doing API reviews and finding mistakes in the code. Please
> note that the header diff does not include new files, so we're not doing
> API reviews on any new classes.
>
> API reviews should have been done twice already, before RC stage. It needs
> to be done once before the API is merged and once again between the alpha
> and beta releases.
>
> Are we skimping on our processes?

Looking at some of the classes in modules other than QtBase, I get the feeling
they were not widely reviewed, no.

It would probably be a good idea to do an additional header diff (incl. new
headers) on the ML after the alpha. I don't follow the development of modules
other than QtBase closely, nor do I want to, and apparently I'm too strict a
reviewer to be regularly invited on new API :)

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From thiago.macieira at intel.com  Mon Jun  8 23:50:31 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 08 Jun 2015 17:50:31 -0400
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <4217461.s3QucPt74C@milian-kdab2>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<17924569.LBFhTLPqK0@tjmaciei-mobl4>
	<4217461.s3QucPt74C@milian-kdab2>
Message-ID: <17487808.fDnk2s2GTt@tjmaciei-mobl4>

On Monday 08 June 2015 15:40:01 Milian Wolff wrote:
> On Monday 08 June 2015 09:32:42 Thiago Macieira wrote:
> > On Monday 08 June 2015 14:57:19 Joerg Bornemann wrote:
> > > On 08-Jun-15 15:38, Marc Mutz wrote:
> > > > QList<QSize> should be QVector<QSize>
> > >
> > > Speaking of that, should we adjust the following recommendation in the
> > > docs?
> > >
> > > "For most purposes, QList is the right class to use. Its index-based API
> > > is more convenient than QLinkedList's iterator-based API, and it is
> > > usually faster than QVector because of the way it stores its items in
> > > memory. It also expands to less code in your executable."
> >
> > No.
>
> Why not? It's simply a bad recommendation.

See the other email: we want to keep QList in the API.

We could expand the recommendation with more uses, though.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Mon Jun  8 23:57:23 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 08 Jun 2015 17:57:23 -0400
Subject: [Development] Qt 5.5.0 header diff: QtCore.diff
In-Reply-To: <23535458.KGxaUdofMC@finn>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1510085.0bKmGSJ0Xu@tjmaciei-mobl4> <23535458.KGxaUdofMC@finn>
Message-ID: <1671590.F4WWUZh0H1@tjmaciei-mobl4>

On Monday 08 June 2015 15:58:23 Olivier Goffart wrote:
> > > There is no reason to stop improving qmetatype.
> >
> >
> >
> > The qFatal was there for a good reason.
>
> It was there for a good reason for the existing flags.
> But for new flags of course it does not make sens.

It did make sense: the idea was that registering new flags would cause the very
incompatibility we're seeing here. I'm not entirely convinced that we
discussed all scenarios at QtCS, so I'm still skeptical about allowing the
IsGadget flag. I insist that we \omitvalue for now, until we understand the
consequences better.

And it's not just the flag. I'm not convinced about the template detection
either. You had to apply two late fixes to the detection so that we wouldn't
break source compatibility or create unnecessary warnings.

> > The freeze stays: no new flags in QMetaType until Qt 6, no more messing
> > with the template black magic.
>
> You can't mandate that.

Yes, I can. As the maintainer, I have the authority and mandate to oversee the
changes to the module I maintain and that includes blocking changes I am
unsatisfied with.

A mailing list consensus can overrule me, as can the Chief Maintainer.

We stay frozen until further notice. If you have new flags you want to propose,
you can do it, but we'll need a mailing list discussion before the change is
allowed.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Mon Jun  8 23:58:28 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 08 Jun 2015 17:58:28 -0400
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <201506082231.15815.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<31864008.sKonZy68u6@tjmaciei-mobl4>
	<201506082231.15815.marc.mutz@kdab.com>
Message-ID: <2002162.x4dfIt0olG@tjmaciei-mobl4>

On Monday 08 June 2015 22:31:15 Marc Mutz wrote:
> It would probably be a good idea to do an additional header diff (incl. new
> headers) on the ML after the alpha. I don't follow the development of
> modules other than QtBase closely, nor do I want to, and apparently I'm too
> strict a reviewer to be regularly invited on new API

Well, that's exactly the kind of people we want reviewing our APIs...
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From milian.wolff at kdab.com  Tue Jun  9 00:12:47 2015
From: milian.wolff at kdab.com (Milian Wolff)
Date: Tue, 09 Jun 2015 00:12:47 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <17487808.fDnk2s2GTt@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<4217461.s3QucPt74C@milian-kdab2>
	<17487808.fDnk2s2GTt@tjmaciei-mobl4>
Message-ID: <1753481.z6ogvUOHOR@agathebauer>

On Monday 08 June 2015 17:50:31 Thiago Macieira wrote:
> On Monday 08 June 2015 15:40:01 Milian Wolff wrote:
> > On Monday 08 June 2015 09:32:42 Thiago Macieira wrote:
> > > On Monday 08 June 2015 14:57:19 Joerg Bornemann wrote:
> > > > On 08-Jun-15 15:38, Marc Mutz wrote:
> > > > > QList<QSize> should be QVector<QSize>
> > > >
> > > > Speaking of that, should we adjust the following recommendation in the
> > > > docs?
> > > >
> > > > "For most purposes, QList is the right class to use. Its index-based
> > > > API
> > > > is more convenient than QLinkedList's iterator-based API, and it is
> > > > usually faster than QVector because of the way it stores its items in
> > > > memory. It also expands to less code in your executable."
> > >
> > > No.
> >
> > Why not? It's simply a bad recommendation.
>
> See the other email: we want to keep QList in the API.
>
> We could expand the recommendation with more uses, though.

Sorry Thiago, but imo your answers are not on topic: The documentation is
/wrong/. QList is _not_ the right container class to use "for most purposes".
If, inside Qt, it is currently (ab)used for historical reasons, well then
fine. But can be /please/ get rid of the prominent endorsement in the
documentation? Saying it should be preferred when interacting with existing
(Qt) API is something altogether different than saying it should be used by
default. It is *not* usually faster than QVector, and that is /especially/
because of the way it stores items in memory. That it expands to less code is
afaik true, but only to a small margin, according to the measurements done by
e.g. Volker Krause on KF5 code.

Bye

--
Milian Wolff | milian.wolff at kdab.com | Software Engineer
KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
Tel: +49-30-521325470
KDAB - The Qt Experts
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 5903 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150609/b6b669c6/attachment.bin

From thiago.macieira at intel.com  Tue Jun  9 00:27:40 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 08 Jun 2015 18:27:40 -0400
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <1753481.z6ogvUOHOR@agathebauer>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<17487808.fDnk2s2GTt@tjmaciei-mobl4>
	<1753481.z6ogvUOHOR@agathebauer>
Message-ID: <26554337.DVeXdDP5Gu@tjmaciei-mobl4>

On Tuesday 09 June 2015 00:12:47 Milian Wolff wrote:
> Sorry Thiago, but imo your answers are not on topic: The documentation is
> /wrong/. QList is _not_ the right container class to use "for most
> purposes". If, inside Qt, it is currently (ab)used for historical reasons,
> well then fine. But can be /please/ get rid of the prominent endorsement in
> the documentation? Saying it should be preferred when interacting with
> existing (Qt) API is something altogether different than saying it should
> be used by default. It is *not* usually faster than QVector, and that is
> /especially/ because of the way it stores items in memory. That it expands
> to less code is afaik true, but only to a small margin, according to the
> measurements done by e.g. Volker Krause on KF5 code.

Fair enough, go ahead and change it.

But Qt API that doesn't explicitly need an array for the data should continue
to use QList.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From apmontgomery at gmail.com  Tue Jun  9 00:39:18 2015
From: apmontgomery at gmail.com (Alex Montgomery)
Date: Mon, 8 Jun 2015 15:39:18 -0700
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <26554337.DVeXdDP5Gu@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<17487808.fDnk2s2GTt@tjmaciei-mobl4>
	<1753481.z6ogvUOHOR@agathebauer>
	<26554337.DVeXdDP5Gu@tjmaciei-mobl4>
Message-ID: <CAHzpX3Bb4EDwFOaFdfjALRuT2TyUnUvRhM7hwpQDZ4aA2+Vtqw@mail.gmail.com>

On Mon, Jun 8, 2015 at 3:27 PM, Thiago Macieira <thiago.macieira at intel.com>
wrote:

> On Tuesday 09 June 2015 00:12:47 Milian Wolff wrote:
> > Sorry Thiago, but imo your answers are not on topic: The documentation is
> > /wrong/. QList is _not_ the right container class to use "for most
> > purposes". If, inside Qt, it is currently (ab)used for historical
> reasons,
> > well then fine. But can be /please/ get rid of the prominent endorsement
> in
> > the documentation? Saying it should be preferred when interacting with
> > existing (Qt) API is something altogether different than saying it should
> > be used by default. It is *not* usually faster than QVector, and that is
> > /especially/ because of the way it stores items in memory. That it
> expands
> > to less code is afaik true, but only to a small margin, according to the
> > measurements done by e.g. Volker Krause on KF5 code.
>
> Fair enough, go ahead and change it.
>

+1 for not lying to Qt users. Our company has had to change a lot of our
critical-path code to use QVector in recent months, and we probably
would've started that way if not for the offending documentation.

Regards,
Alex Montgomery

Director of Tools Technology
Telltale Games
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150608/547a9ad7/attachment-0001.html

From perezmeyer at gmail.com  Tue Jun  9 03:25:12 2015
From: perezmeyer at gmail.com (Lisandro =?ISO-8859-1?Q?Dami=E1n_Nicanor_P=E9rez?= Meyer)
Date: Mon, 08 Jun 2015 22:25:12 -0300
Subject: [Development] Qt Location and Geoclue 2
Message-ID: <3759729.CTaqCfNESn@luna>

Hi! I have just received a bug [debbug] in which geoclue maintainrs states
that he wants to get geoclue removed in favor of geoclue2. And it seems I'm
not alone [fedbug].

I searched the web and it seems the work on this has stoped. Does anyone knows
the state for this?

Thanks in advance, Lisandro.

[debbug] <https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=788108>
[fedbug]

--
Lisandro Dami?n Nicanor P?rez Meyer
http://perezmeyer.com.ar/
http://perezmeyer.blogspot.com/
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 819 bytes
Desc: This is a digitally signed message part.
Url : http://lists.qt-project.org/pipermail/development/attachments/20150608/835dd0f3/attachment.bin

From mccarthy.aaron at gmail.com  Tue Jun  9 07:22:54 2015
From: mccarthy.aaron at gmail.com (Aaron McCarthy)
Date: Tue, 09 Jun 2015 15:22:54 +1000
Subject: [Development] Qt Location and Geoclue 2
In-Reply-To: <3759729.CTaqCfNESn@luna>
References: <3759729.CTaqCfNESn@luna>
Message-ID: <1589785.MyJRrQ5lSl@yuki>

Hi,

On Mon, 8 Jun 2015 22:25:12 Lisandro Dami?n Nicanor P?rez Meyer wrote:
> Hi! I have just received a bug [debbug] in which geoclue maintainrs states
> that he wants to get geoclue removed in favor of geoclue2. And it seems I'm
> not alone [fedbug].
>
> I searched the web and it seems the work on this has stoped. Does anyone
> knows the state for this?
>
> Thanks in advance, Lisandro.
>
> [debbug] <https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=788108>
> [fedbug]

John Layt started working on a Geoclue 2 plugin some time ago[1]. I'm not sure
how much progress was made.

[1] https://codereview.qt-project.org/88630

Cheers,

--
Aaron McCarthy

From simon.hausmann at theqtcompany.com  Tue Jun  9 09:02:24 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Tue, 9 Jun 2015 09:02:24 +0200
Subject: [Development] qqmlengine/qqmlimport access
In-Reply-To: <556E23DB.7060107@gmail.com>
References: <CAChgv6pQA2-dEJ9_kb3NhnFGhFY-crP5rGCeHdLDSgx0L-ObZw@mail.gmail.com>
	<556E23DB.7060107@gmail.com>
Message-ID: <2540157.FnAxODOLcB@simon-sx58>

On Tuesday, June 02, 2015 03:44:59 PM rpzrpzrpz at gmail.com wrote:
> On 5/29/2015 9:53 AM, mark diener wrote:
> > Hello dev list:
> >
> > Qt 5.4.1.
> >
> > At the top of qqmlimport_p.h, it discusses how it is NOT part of the QT
> > API and subject to change.
> >
> > In qqmlengine.h, there is addImportPath( ) to allow qqmlimport to
> > resolve types using a module/qmldir file.
> >
> > But ByteArray derived components have no equivalent treatment:
> >
> >
> > QByteArray  gbytes("import  QtQuick  2.4\n  Rectangle  {
> > objectName:\"myRecto\"\n  color:  \"blue\"  }");
> >
> > QQmlComponent  gcomponent(&gengine)  ;
> >
> > gcomponent.setData(gbytes,QUrl("Myrectangle.qml"));
> >
> >
> > How to add the QQmlComponent in the QQmlEngine import database so that
> > QQmlImports::addImplicitImport( ) can resolve component type?
> >
> > There is no new C++ type here, just a new component defined in QML, so
> > qmlRegisterType<C++type>(bla,bla,bla) is a fail.
> >
> > Or maybe there is a non-qmldir file method to use importExtension with
> > QQmlComponent?  (qmldir file alternative)
> >
> > Does QQmlEngine have a public access way to achieve the following:
> >
> > QQmlEngine::addImportComponent(QString gname,QQmlComponent& gcomponent) ;
> > QQmlEngine::removeImportComponent(QString gname) ;
> >
> > In QML, I could either have an importExtension()  OR an implicitImport()
> > in qqmlimports.
> >
> > Thanks,
> >
> > Mark
>
> Simon:
>
> I think the absence of responses from the dev list indicates I have
> touched on a topic dead zone that resides in your area as QML/core
> maintainer.
>
>  From what I can tell, the QML component cache and import mechanisms
> lack any public access members for direct query,loading, and removal.

Yes.

> There are the blunt force methods of QQmlEngine->clearComponentCache()
> and QQmlEngine->trimComponentCache().
>
> Maybe after the 5.5 release, I would like to explore adding public
> access member functions to QQmlEngine.h/cpp:
>
> int QQmlEngine::loadComponent(QQmlComponent& component, QString&
> importQmlName);
>
> int QQmlEngine::clearComponent(QString& importQmlName);
>
> bool QQmlEngine::isComponentLoaded(QString& component);
>
> The biggest concern I see is the caveat warnings given by qqmlimport.h

I'm wondering what the specific use-cases are. More specifically what criteria
would be used to call these functions?

If you'd like to "pre-load" components, then I agree that we could have
dedicated API for this, although you can already do this today by creating an
async QQmlComponent and just not call create() on it.

> Another concern I have is the Render Thread issues VS Gui thread issues.
>
> What group of devs is current this?
>
> Does that group even talk to strangers?

Hehe.


Simon

From jani.heikkinen at theqtcompany.com  Tue Jun  9 09:21:56 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Tue, 9 Jun 2015 07:21:56 +0000
Subject: [Development] New Qt5.5.0-RC snapshot available
In-Reply-To: <CAMp7mVu9cuzjbVWo-FcW6eu99a99hox+DZ6rOzu+siFgi6nXbg@mail.gmail.com>
References: <DB3PR02MB0540869090D2B2D31D7B2477E4BF0@DB3PR02MB0540.eurprd02.prod.outlook.com>,
	<CAMp7mVu9cuzjbVWo-FcW6eu99a99hox+DZ6rOzu+siFgi6nXbg@mail.gmail.com>
Message-ID: <AM3PR02MB05340AA25037F978EB493E10E4BE0@AM3PR02MB0534.eurprd02.prod.outlook.com>

>> On 9 June 2015 at 00:48, Richard Moore <rich at kde.org> wrote:

>> On 8 June 2015 at 05:59, Heikkinen Jani <jani.heikkinen at theqtcompany.com<mailto:jani.heikkinen at theqtcompany.com>> wrote:

Maintainers: For the coming releases please make sure

- All findings from header diff is fixed today

??
?



>> ?Please don't make impossible requests.
>>
>> Rich.



Well, on the other hand I understand your point. But on the other not. Everyone should know that RC is planned to happen Thu 11.6 and everything needs to be ready before that. It should be maintainers who knows their modules & make sure needed things are done & their module is ready early enough (APIs are ready, tests works, changes file is done etc). I have sent several reminders about the schedule & things to be done. And still there is quite many change files missing for example...


What comes specially to those header diffs and process: I am wondering if that massive header diff process is working at all. It is done so late that it has to be just a sanitycheck that everything is Ok. I think maintainers must take care of header reviews much earlier & make sure API is ready.


For me it seems there is quite many changes needed for headers in Qt5.5.0. Most of those aren't done yet so it seems to be sure there isn't enough time to do all needed changes & create new packages for RC so that RC can be out as planned. So I need your help:


- What are the changes still needed for 5.5.0 RC (related to headers)?

- What is LE when all these changes are done (to be able to estimate RC & final schedule) ?


br,

Jani


________________________________
L?hett?j?: richmoore44 at gmail.com <richmoore44 at gmail.com> k?ytt?j?n puolestaRichard Moore <rich at kde.org>
L?hetetty: 9. kes?kuuta 2015 0:48
Vastaanottaja: Heikkinen Jani
Aihe: Re: [Development] New Qt5.5.0-RC snapshot available



On 8 June 2015 at 05:59, Heikkinen Jani <jani.heikkinen at theqtcompany.com<mailto:jani.heikkinen at theqtcompany.com>> wrote:

Maintainers: For the coming releases please make sure

- All findings from header diff is fixed today

??
?



?Please don't make impossible requests.

Rich.
?

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150609/613e6cdc/attachment.html

From Lars.Knoll at theqtcompany.com  Tue Jun  9 09:35:45 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Tue, 9 Jun 2015 07:35:45 +0000
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <2002162.x4dfIt0olG@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<31864008.sKonZy68u6@tjmaciei-mobl4>
	<201506082231.15815.marc.mutz@kdab.com>
	<2002162.x4dfIt0olG@tjmaciei-mobl4>
Message-ID: <CFEE0265-F435-46DE-8AFD-5D7336A3F8F6@theqtcompany.com>


On 08/06/15 23:58, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Thiago Macieira" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of thiago.macieira at intel.com> wrote:

>On Monday 08 June 2015 22:31:15 Marc Mutz wrote:
>> It would probably be a good idea to do an additional header diff (incl. new
>> headers) on the ML after the alpha. I don't follow the development of
>> modules other than QtBase closely, nor do I want to, and apparently I'm too
>> strict a reviewer to be regularly invited on new API

Agree. Let's put this into our planning for 5.6. One header diff/review at the time we branch 5.6, and a final one to cross-check before the RC.


>
>Well, that's exactly the kind of people we want reviewing our APIs...

Thiago's right. If there's one place we want to be very strict it's on our APIs. Everything else we can still fix later on, but APIs are out there and will stick for a long time, so we better get them right.

Cheers,
Lars




From kalle.viironen at theqtcompany.com  Tue Jun  9 09:40:27 2015
From: kalle.viironen at theqtcompany.com (Viironen Kalle)
Date: Tue, 9 Jun 2015 07:40:27 +0000
Subject: [Development] New Qt5.5.0-RC snapshot available
In-Reply-To: <AM3PR02MB05340AA25037F978EB493E10E4BE0@AM3PR02MB0534.eurprd02.prod.outlook.com>
References: <DB3PR02MB0540869090D2B2D31D7B2477E4BF0@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<CAMp7mVu9cuzjbVWo-FcW6eu99a99hox+DZ6rOzu+siFgi6nXbg@mail.gmail.com>
	<AM3PR02MB05340AA25037F978EB493E10E4BE0@AM3PR02MB0534.eurprd02.prod.outlook.com>
Message-ID: <D19C7196.6690%kalle.viironen@theqtcompany.com>



From:  Heikkinen Jani <jani.heikkinen at theqtcompany.com<mailto:jani.heikkinen at theqtcompany.com>>
Date:  Tuesday 9 June 2015 10:21
To:  Richard Moore <rich at kde.org<mailto:rich at kde.org>>
Cc:  "development at qt-project.org<mailto:development at qt-project.org>" <development at qt-project.org<mailto:development at qt-project.org>>
Subject:  Re: [Development] New Qt5.5.0-RC snapshot available


Well, on the other hand I understand your point. But on the other not. Everyone should know that RC is planned to happen Thu 11.6 and everything needs to be ready before that. It should be maintainers who knows their modules & make sure needed things are done & their module is ready early enough (APIs are ready, tests works, changes file is done etc). I have sent several reminders about the schedule & things to be done. And still there is quite many change files missing for example...


I think that we should have a through discussion about the module maintainership model at some point. To me it seems that the model just isn?t working as it was planned. At least we should discuss and agree that what are the responsibilities of module maintainers and how to track that those responsibilities are being taken care of.

-Kalle
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150609/d94ee67e/attachment.html

From jlayt at kde.org  Tue Jun  9 09:48:11 2015
From: jlayt at kde.org (John Layt)
Date: Tue, 9 Jun 2015 08:48:11 +0100
Subject: [Development] Qt Location and Geoclue 2
In-Reply-To: <1589785.MyJRrQ5lSl@yuki>
References: <3759729.CTaqCfNESn@luna>
	<1589785.MyJRrQ5lSl@yuki>
Message-ID: <CAM1DM6=VQuqjuRaMtO7GWb85hJ0cWR45VfcNxnbb8jRzQmbWRQ@mail.gmail.com>

On 9 June 2015 at 06:22, Aaron McCarthy <mccarthy.aaron at gmail.com> wrote:

> Hi,
>
> On Mon, 8 Jun 2015 22:25:12 Lisandro Dami?n Nicanor P?rez Meyer wrote:
> > Hi! I have just received a bug [debbug] in which geoclue maintainrs
> states
> > that he wants to get geoclue removed in favor of geoclue2. And it seems
> I'm
> > not alone [fedbug].
> >
> > I searched the web and it seems the work on this has stoped. Does anyone
> > knows the state for this?
> >
> > Thanks in advance, Lisandro.
> >
> > [debbug] <https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=788108>
> > [fedbug]
>
> John Layt started working on a Geoclue 2 plugin some time ago[1]. I'm not
> sure
> how much progress was made.
>
> [1] https://codereview.qt-project.org/88630
>
>
 Hi,

I was halfway through migrating it to using the Qt DBus compiler which is
the state shown in that code review. That's about as far as I got before I
burnt out last year, but I'm just starting to get back into Qt work again
so I may be able to progress it soon, unless someone else wishes to pick it
up. I know the Geoclue maintainer is organising another Geoclue hack
weekend in London soon, so maybe I can finish it off then.

Cheers!

John.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150609/be651e50/attachment.html

From Morten.Sorvig at theqtcompany.com  Tue Jun  9 10:27:09 2015
From: Morten.Sorvig at theqtcompany.com (Sorvig Morten)
Date: Tue, 9 Jun 2015 08:27:09 +0000
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <5571D5BA.6020703@kdab.com>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<mkmg10$83o$1@ger.gmane.org> <2205273.jfZCdWezOX@cartman>
	<3684916.o10Vjfnb58@portia.local> <5571D5BA.6020703@kdab.com>
Message-ID: <76272928-93F8-4F93-A060-C56A15D92F01@digia.com>


> On 05 Jun 2015, at 19:00, Sean Harmer <sean.harmer at kdab.com> wrote:
>
> On 05/06/2015 14:52, Ren? J.V. Bertin wrote:
>> On Friday June 05 2015 13:30:58 Sean Harmer wrote:
>>
>>>> could QTBUG-46143 possibly be added to the list of blockers? it is a P1
>>>> bug in qt3d/qt5.5, as it does not build against the macos10.8 sdk.
>>> A day later than promised...
>>>
>>> https://codereview.qt-project.org/#/c/113797/2
>> I presume that the patch also takes care of building against earlier SDKs, at least as far as this particular issue goes?
>>
>> What is the earliest OS X version on which 5.5 is supposed to work, officially?
>
> For Qt3D, 10.8 is the oldest version handled by the CI. Given recent OS
> X updates are free do you really need support for anything older?

I?m aiming for supporting 10.7 as ?deprecated? in the 5.5 release. It currently does not compile - the lack of CI testing is showing. I?m focusing on QtBase.

I think it?s OK if other modules, and especially new modules, have stricter requirements. Qt users can make a decision if the provided OS version support is acceptable before starting to use the module.

In general my opinion is that Qt as middleware should try very hard to not get in the way when it comes to OS and compiler requirements.

Morten



From marc.mutz at kdab.com  Tue Jun  9 11:44:28 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Tue, 9 Jun 2015 11:44:28 +0200
Subject: [Development] Qt 5.5.0 header diff: QtMultimedia.diff
In-Reply-To: <26554337.DVeXdDP5Gu@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1753481.z6ogvUOHOR@agathebauer>
	<26554337.DVeXdDP5Gu@tjmaciei-mobl4>
Message-ID: <201506091144.29204.marc.mutz@kdab.com>

On Tuesday 09 June 2015 00:27:40 Thiago Macieira wrote:
> But Qt API that doesn't explicitly need an array for the data should
> continue  to use QList.

I disagree insofar as it concerns new types.

Either a new type put into a QList is optimally efficient (sizeof == sizeof
void* and at least Q_MOVABLE_TYPE), or the new type is not put into QList. For
existing types, I think we agree to keep them, unless a change is relatively
painless (like the FormatRange in QTextEngine/QTextLayout) or the problem is
relatively painful (also FormatRange) or other parts of Qt already keep the
type in QVector (again, FormatRange).

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From sean.harmer at kdab.com  Tue Jun  9 11:01:51 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Tue, 09 Jun 2015 10:01:51 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <2646160.nJGqpQo0xz@cartman>
References: <ml2j2r$eg3$1@ger.gmane.org> <2646160.nJGqpQo0xz@cartman>
Message-ID: <68307912.fy5hP133g3@cartman>

On Monday 08 Jun 2015 14:18:33 Sean Harmer wrote:
>
> On Monday 08 Jun 2015 01:11:23 Stephen Kelly wrote:
> > 2) A private header is included in a public header:
> >  include/Qt3DCore$ grep private/ *.h
> >  qaspectjobmanager.h:#include <Qt3DCore/private/qt3dcore_global_p.h>
> >
> > This is concerning - Don't we have a unit test preventing that?
>
> I can't find that. Is that from the 5.5 branch?

Aha, found it thanks to the cmake unit test ;) Fix at

https://codereview.qt-project.org/#/c/113952/

> > 3) The cmake unit tests don't pass.
> >
> > It is easily fixable, but does this mean that the cmake tests are not run
> > for this module? That is concerning.
> >
> > Are unit tests run for this module in CI at all?
>
> Hmm I thought they were, but obviously not. I'm looking at making the test
> work now.

Partial fix at

https://codereview.qt-project.org/#/c/113953/

It's failing due to the use of namespace in Qt3D. Does the cmake unit test
infrastructure support namespaces? Any hints on how to fix or to add support
for namespaces. I note that the cmake tests for other modules pass with
namespaced Qt builds but I guess that may be using a different mechanism.

Cheers,

Sean
--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
KDAB (UK) Ltd, a KDAB Group company
Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
Mobile: +44 (0)7545 140604
KDAB - Qt Experts

From rjvbertin at gmail.com  Tue Jun  9 11:18:52 2015
From: rjvbertin at gmail.com (=?ISO-8859-1?Q?Ren=E9_J=2EV=2E?= Bertin)
Date: Tue, 09 Jun 2015 11:18:52 +0200
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <76272928-93F8-4F93-A060-C56A15D92F01@digia.com>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<5571D5BA.6020703@kdab.com>
	<76272928-93F8-4F93-A060-C56A15D92F01@digia.com>
Message-ID: <7413908.WS4rZjsX5G@patux>

On Tuesday June 09 2015 08:27:09 Sorvig Morten wrote:

>I?m aiming for supporting 10.7 as ?deprecated? in the 5.5 release. It currently does not compile - the lack of CI testing is showing.

It *may* be possible to get a community-supported CI set up for 10.7 (where community probably implies KDE/KF5).

>I think it?s OK if other modules, and especially new modules, have stricter requirements. Qt users can make a decision if the provided OS version support is acceptable before starting to use the module.

That sounds reasonable, but I also think that there is little point in supporting QtBase on 10.7 if QtGui or QtWidgets don't work there ...

>In general my opinion is that Qt as middleware should try very hard to not get in the way when it comes to OS and compiler requirements.

Heh, that can be interpreted both ways, no? From Apple's viewpoint this probably means "Fine, just support the last version of the OS only and get out of our way already", no? ;)

R.

From robin+qt at viroteck.net  Tue Jun  9 11:43:57 2015
From: robin+qt at viroteck.net (Robin Burchell)
Date: Tue, 09 Jun 2015 11:43:57 +0200
Subject: [Development] qqmlengine/qqmlimport access
In-Reply-To: <556E23DB.7060107@gmail.com>
References: <CAChgv6pQA2-dEJ9_kb3NhnFGhFY-crP5rGCeHdLDSgx0L-ObZw@mail.gmail.com>
	<556E23DB.7060107@gmail.com>
Message-ID: <1433843037.3472303.290604321.5B3165B4@webmail.messagingengine.com>

On Tue, Jun 2, 2015, at 11:44 PM, rpzrpzrpz at gmail.com wrote:
> Another concern I have is the Render Thread issues VS Gui thread issues.

Can you elaborate on this concern? The current description is impossible
to address, which might explain the lack of response.

--
  Robin Burchell
  robin at viroteck.net

From elderorb at gmail.com  Tue Jun  9 11:44:40 2015
From: elderorb at gmail.com (Alexander Ivash)
Date: Tue, 9 Jun 2015 12:44:40 +0300
Subject: [Development]  qqmlengine/qqmlimport access
Message-ID: <CAO_RVbVK64SNfbivM5Mm6FGBLy2OiyrecMEzue_271k=ygSeOQ@mail.gmail.com>

>>* There are the blunt force methods of QQmlEngine->clearComponentCache()
*>>* and QQmlEngine->trimComponentCache().
*>> >>* Maybe after the 5.5 release, I would like to explore adding public
*>>* access member functions to QQmlEngine.h/cpp:
*>> >>* int QQmlEngine::loadComponent(QQmlComponent& component, QString&
*>>* importQmlName);
*>> >>* int QQmlEngine::clearComponent(QString& importQmlName);
*>> >>* bool QQmlEngine::isComponentLoaded(QString& component);
*>> >>* The biggest concern I see is the caveat warnings given by qqmlimport.h
*
> I'm wondering what the specific use-cases are. More specifically what criteria > would be used to call these functions?
> If you'd like to "pre-load" components, then I agree that we could have > dedicated API for this, although you can already do this today by creating an > async QQmlComponent and just not call create() on it.

Besides components pre-loading, having some API allowing to manipulate
component cache could be really helpful for implementing QML
livecoding with incremental updates.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150609/956f203e/attachment.html

From oswald.buddenhagen at theqtcompany.com  Tue Jun  9 11:49:11 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Tue, 9 Jun 2015 11:49:11 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <CFEE0265-F435-46DE-8AFD-5D7336A3F8F6@theqtcompany.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<31864008.sKonZy68u6@tjmaciei-mobl4>
	<201506082231.15815.marc.mutz@kdab.com>
	<2002162.x4dfIt0olG@tjmaciei-mobl4>
	<CFEE0265-F435-46DE-8AFD-5D7336A3F8F6@theqtcompany.com>
Message-ID: <20150609094911.GC26200@troll08.it.local>

On Tue, Jun 09, 2015 at 07:35:45AM +0000, Knoll Lars wrote:
> On 08/06/15 23:58, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Thiago Macieira" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of thiago.macieira at intel.com> wrote:
>
> >On Monday 08 June 2015 22:31:15 Marc Mutz wrote:
> >> It would probably be a good idea to do an additional header diff (incl. new
> >> headers) on the ML after the alpha. I don't follow the development of
> >> modules other than QtBase closely, nor do I want to, and apparently I'm too
> >> strict a reviewer to be regularly invited on new API
>
> Agree. Let's put this into our planning for 5.6. One header diff/review at the time we branch 5.6, and a final one to cross-check before the RC.
>
>
> >
> >Well, that's exactly the kind of people we want reviewing our APIs...
>
> Thiago's right. If there's one place we want to be very strict it's on our APIs. Everything else we can still fix later on, but APIs are out there and will stick for a long time, so we better get them right.
>
wouldn't that mean pulling the emergency brake on 5.5 and allowing a
further ~two week slip in the schedule to actually fix the problem now
that we are aware of it? i think we already have enough experience with
how well "next time" works in practice ...

From olivier at woboq.com  Tue Jun  9 12:10:02 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Tue, 09 Jun 2015 12:10:02 +0200
Subject: [Development] Qt 5.5.0 header diff: QtCore.diff
In-Reply-To: <1671590.F4WWUZh0H1@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<23535458.KGxaUdofMC@finn> <1671590.F4WWUZh0H1@tjmaciei-mobl4>
Message-ID: <3541770.p50oWnRJIE@finn>

On Monday 8. June 2015 17:57:23 Thiago Macieira wrote:
> On Monday 08 June 2015 15:58:23 Olivier Goffart wrote:
> > > > There is no reason to stop improving qmetatype.
> > >
> > > The qFatal was there for a good reason.
> >
> > It was there for a good reason for the existing flags.
> > But for new flags of course it does not make sens.
>
> It did make sense: the idea was that registering new flags would cause the
> very incompatibility we're seeing here. I'm not entirely convinced that we
> discussed all scenarios at QtCS, so I'm still skeptical about allowing the
> IsGadget flag. I insist that we \omitvalue for now, until we understand the
> consequences better.

No, the qFatal is there because a change in the other flags like the
MovableType is binary incompatible.
A change in the IsGadget flag is fine.

Old code did not need this flag. And code that relies on it requires anyway
that the code that register the types register the isGadget flag.

Even if one could build a complicated use case that breaks, it would be very
unlikely to happen.
And any change is dangerous. When we fix any small bug, there can always be
applications that breaks because it was relying on the bug for something.


Anyway, let us summarize the "problem" in that case.

In Qt <= 5.4, QtLocation was using QML Private API to basically creates
QObject wrapper around QGeoCoordinate so it can be exposed in QML. But in Qt
5.5, one does not need private API, everybody can expose value types to QML
just by adding Q_GADGET to it and registering Q_PROPERTY or Q_INVOKABLE.
So QGeoCoordinate became a Q_GADGET.  But for QML to be able to take advantage
of it, the type needs to be registered with the QMetaType::IsGadget flag. This
is automatic. But if the metatype is registered by code compiled with Qt 5.4
or before, the IsGadget flag is not present.
This is what is happening in a application that was compiled against Qt 5.4,
QGeoCoordinate was used in signal and slot and registered as a metatype by the
application. QMetaType will detect the difference in the flags on the second
registration and do a qFatal.
The solution is obviously not to do a qFatal, but take the new flags in
addition. And then everything works as expected.

Now the problem is: could there be code that relies in IsGadget that is run
and that the type is only registered by "old" code but not by new code. i.e:
could loading an old plugin compiled with an old code suddenly break a new
application using these new feature.
In theory this is possible, but in practice I don't think this will ever
happen.

Let's suppose an application called App 1.0 which has this code:

mystruct.h:
 struct MyStruct {
    int myValue;
 };
 Q_DECLARE_METATYPE(MyStruct);

myitem_p.h
 class MyItem : public QObject {
   Q_OBJECT
   Q_INVOKABLE extractValue(const QVariant &v) {
      return qvariant_cast<MyStruct>(v).myValue;
   }
 };

foo.qml:
 MyItem {
   function foobar(someObject) {
      return extractValue(someObject.myStructProperty);
   }
 }

someObject is an object coming from a plugin which has a property
myStructProperty of type MyStruct.

Now, App 1.1 gets released and they simplify the code:

mystruct.h:
 struct MyStruct {
    Q_GADGET;
    Q_PROPERTY(int myValue MEMBER myValue)
  public:
    int myValue;
 };

foo.qml:
 MyItem {
   function foobar(someObject) {
      // now that myStruct is a Q_GADGET i don't need the helper
      return someObject.myStructProperty.myValue;
   }
 }

Then yes, if the MyStruct was only registered by the plugin we get a binary
compatibility problem in the application.  But this is a problem for the
application, not Qt. And the solution is to make sure that MyStruct is
registered by manually registering it using qRegisterMetaType

> And it's not just the flag. I'm not convinced about the template detection
> either. You had to apply two late fixes to the detection so that we wouldn't
> break source compatibility or create unnecessary warnings.

Yes, I had to apply fixes after the beta was released and it got tested in the
wild. But is that not what beta releases are for?

> > > The freeze stays: no new flags in QMetaType until Qt 6, no more messing
> > > with the template black magic.
> >
> > You can't mandate that.
>
> Yes, I can. As the maintainer, I have the authority and mandate to oversee
> the changes to the module I maintain and that includes blocking changes I
> am unsatisfied with.
>
> A mailing list consensus can overrule me, as can the Chief Maintainer.
>
> We stay frozen until further notice. If you have new flags you want to
> propose, you can do it, but we'll need a mailing list discussion before the
> change is allowed.

Well, then it will be reviewed as usual.
There are few improvements that can be done to QMetaType that we were
discussing at the summit, like the ability to modify list types (append and
such) or including some of the C++11 features. I bet one can simplify
qmetatype.h when we require C++11's decltype and proper SFINAE rules




From Morten.Sorvig at theqtcompany.com  Tue Jun  9 12:28:49 2015
From: Morten.Sorvig at theqtcompany.com (Sorvig Morten)
Date: Tue, 9 Jun 2015 10:28:49 +0000
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <7413908.WS4rZjsX5G@patux>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<5571D5BA.6020703@kdab.com>
	<76272928-93F8-4F93-A060-C56A15D92F01@digia.com>
	<7413908.WS4rZjsX5G@patux>
Message-ID: <261EFA0B-894C-4820-842C-B98859E8320E@digia.com>


> On 09 Jun 2015, at 11:18, Ren? J.V. Bertin <rjvbertin at gmail.com> wrote:
>
> On Tuesday June 09 2015 08:27:09 Sorvig Morten wrote:
>
>> I think it?s OK if other modules, and especially new modules, have stricter requirements. Qt users can make a decision if the provided OS version support is acceptable before starting to use the module.
>
> That sounds reasonable, but I also think that there is little point in supporting QtBase on 10.7 if QtGui or QtWidgets don't work there ?

A quick correction: QtBase (the module) includes QtGui and QtWidgets. You were thinking QtCore?

Morten


From rjvbertin at gmail.com  Tue Jun  9 12:32:49 2015
From: rjvbertin at gmail.com (=?ISO-8859-1?Q?Ren=E9_J=2EV=2E?= Bertin)
Date: Tue, 09 Jun 2015 12:32:49 +0200
Subject: [Development] Your actions needed,
	Qt5.5.0 RC & Final is nearing!
In-Reply-To: <261EFA0B-894C-4820-842C-B98859E8320E@digia.com>
References: <DB3PR02MB05402B51D6130F70C49D17D3E4B40@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<7413908.WS4rZjsX5G@patux>
	<261EFA0B-894C-4820-842C-B98859E8320E@digia.com>
Message-ID: <21133065.68FT32ilJ7@portia.local>

On Tuesday June 09 2015 10:28:49 Sorvig Morten wrote:

> A quick correction: QtBase (the module) includes QtGui and QtWidgets. You were thinking QtCore?

Sorry, yes, I've lost track a bit of what the minimal collection of components is for applications that can serve an actual purpose :)


Ren?

From jani.heikkinen at theqtcompany.com  Tue Jun  9 12:59:32 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Tue, 9 Jun 2015 10:59:32 +0000
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <20150609094911.GC26200@troll08.it.local>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<31864008.sKonZy68u6@tjmaciei-mobl4>	<201506082231.15815.marc.mutz@kdab.com>
	<2002162.x4dfIt0olG@tjmaciei-mobl4>
	<CFEE0265-F435-46DE-8AFD-5D7336A3F8F6@theqtcompany.com>
	<20150609094911.GC26200@troll08.it.local>
Message-ID: <AM3PR02MB0534124D8A311638A0558137E4BE0@AM3PR02MB0534.eurprd02.prod.outlook.com>

Hi,

I tried to create error reports about the findings to be able to follow-up the progress. Please create new one if something is missing. I have also linked all to the Qt5.5.0-RC blocker list so please try to close all as soon as possible. I'll ask LEs from responsible persons today to be able to estimate RC schedule

Here is the errors I created:

 QTBUG-46555 not Qt-like API in QtGUI
 QTBUG-46556 Retroactive deprecations are not allowed.
 QTBUG-46557 QtTest.diff : API isn't finished
 QTBUG-46558 Some methods in wrong class
 QTBUG-46559 Q_DECL_OVERRIDEs missing from QtQuickWidgets API
 QTBUG-46560 QtQML: Rename qqmfile.h into qqmlfile_p.h.
 QTBUG-46561 Header Diff related issues in QtCore
 QTBUG-46562 Header diff issues in QtLocation
 QTBUG-46563 Header diff issues in QtMultimedia
 QTBUG-46564 Header diff issues in QtBluetooth

br,
Jani


>>-----Original Message-----
>>From: development-bounces+jani.heikkinen=theqtcompany.com at qt-
>>project.org [mailto:development-
>>bounces+jani.heikkinen=theqtcompany.com at qt-project.org] On Behalf Of
>>Oswald Buddenhagen
>>Sent: 9. kes?kuuta 2015 12:49
>>To: development at qt-project.org
>>Subject: Re: [Development] Qt 5.5.0 header diff
>>
>>On Tue, Jun 09, 2015 at 07:35:45AM +0000, Knoll Lars wrote:
>>> On 08/06/15 23:58, "development-
>>bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Thiago
>>Macieira" <development-bounces+lars.knoll=theqtcompany.com at qt-
>>project.org on behalf of thiago.macieira at intel.com> wrote:
>>>
>>> >On Monday 08 June 2015 22:31:15 Marc Mutz wrote:
>>> >> It would probably be a good idea to do an additional header diff (incl. new
>>> >> headers) on the ML after the alpha. I don't follow the development of
>>> >> modules other than QtBase closely, nor do I want to, and apparently I'm
>>too
>>> >> strict a reviewer to be regularly invited on new API
>>>
>>> Agree. Let's put this into our planning for 5.6. One header diff/review at the
>>time we branch 5.6, and a final one to cross-check before the RC.
>>>
>>>
>>> >
>>> >Well, that's exactly the kind of people we want reviewing our APIs...
>>>
>>> Thiago's right. If there's one place we want to be very strict it's on our APIs.
>>Everything else we can still fix later on, but APIs are out there and will stick for a
>>long time, so we better get them right.
>>>
>>wouldn't that mean pulling the emergency brake on 5.5 and allowing a
>>further ~two week slip in the schedule to actually fix the problem now
>>that we are aware of it? i think we already have enough experience with
>>how well "next time" works in practice ...
>>_______________________________________________
>>Development mailing list
>>Development at qt-project.org
>>http://lists.qt-project.org/mailman/listinfo/development

From steveire at gmail.com  Tue Jun  9 13:09:50 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Tue, 9 Jun 2015 13:09:50 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <68307912.fy5hP133g3@cartman>
References: <ml2j2r$eg3$1@ger.gmane.org> <2646160.nJGqpQo0xz@cartman>
	<68307912.fy5hP133g3@cartman>
Message-ID: <CACHsx4KS7MufL9zT55FLAqb_w8ajTNK4qxpX-fVOZv2pnv2iHw@mail.gmail.com>

On Tue, Jun 9, 2015 at 11:01 AM, Sean Harmer <sean.harmer at kdab.com> wrote:
> On Monday 08 Jun 2015 14:18:33 Sean Harmer wrote:
>>
>> On Monday 08 Jun 2015 01:11:23 Stephen Kelly wrote:
>> > 2) A private header is included in a public header:
>> >  include/Qt3DCore$ grep private/ *.h
>> >  qaspectjobmanager.h:#include <Qt3DCore/private/qt3dcore_global_p.h>
>> >
>> > This is concerning - Don't we have a unit test preventing that?
>>
>> I can't find that. Is that from the 5.5 branch?
>
> Aha, found it thanks to the cmake unit test ;) Fix at

Yep, that's how I found it too. I'm confused that the grep I pasted
did not lead you to it though. The grep shows it to me on 5.5, 5.5.0
and dev branches. Maybe you didn't know the directory to run the grep
in? But even then, the filename should be enough to lead you to the
private/ include...

Anyway, good you found it.

> https://codereview.qt-project.org/#/c/113953/
>
> It's failing due to the use of namespace in Qt3D. Does the cmake unit test
> infrastructure support namespaces? Any hints on how to fix or to add support
> for namespaces.

I just commented on the review. For reference, you need to set a
${ClassName}_NAMESPACE variable to the namespace to use for a class
under test.

> I note that the cmake tests for other modules pass with
> namespaced Qt builds but I guess that may be using a different mechanism.

What you're doing with namespaces here is different to 'a namespaced
Qt', so yep, different mechanism.

Thanks,

Steve.

On Tue, Jun 9, 2015 at 11:01 AM, Sean Harmer <sean.harmer at kdab.com> wrote:
> On Monday 08 Jun 2015 14:18:33 Sean Harmer wrote:
>>
>> On Monday 08 Jun 2015 01:11:23 Stephen Kelly wrote:
>> > 2) A private header is included in a public header:
>> >  include/Qt3DCore$ grep private/ *.h
>> >  qaspectjobmanager.h:#include <Qt3DCore/private/qt3dcore_global_p.h>
>> >
>> > This is concerning - Don't we have a unit test preventing that?
>>
>> I can't find that. Is that from the 5.5 branch?
>
> Aha, found it thanks to the cmake unit test ;) Fix at
>
> https://codereview.qt-project.org/#/c/113952/
>
>> > 3) The cmake unit tests don't pass.
>> >
>> > It is easily fixable, but does this mean that the cmake tests are not run
>> > for this module? That is concerning.
>> >
>> > Are unit tests run for this module in CI at all?
>>
>> Hmm I thought they were, but obviously not. I'm looking at making the test
>> work now.
>
> Partial fix at
>
> https://codereview.qt-project.org/#/c/113953/
>
> It's failing due to the use of namespace in Qt3D. Does the cmake unit test
> infrastructure support namespaces? Any hints on how to fix or to add support
> for namespaces. I note that the cmake tests for other modules pass with
> namespaced Qt builds but I guess that may be using a different mechanism.
>
> Cheers,
>
> Sean
> --
> Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
> KDAB (UK) Ltd, a KDAB Group company
> Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
> Mobile: +44 (0)7545 140604
> KDAB - Qt Experts

From oswald.buddenhagen at theqtcompany.com  Tue Jun  9 13:35:14 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Tue, 9 Jun 2015 13:35:14 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <AM3PR02MB0534124D8A311638A0558137E4BE0@AM3PR02MB0534.eurprd02.prod.outlook.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<31864008.sKonZy68u6@tjmaciei-mobl4>
	<201506082231.15815.marc.mutz@kdab.com>
	<2002162.x4dfIt0olG@tjmaciei-mobl4>
	<CFEE0265-F435-46DE-8AFD-5D7336A3F8F6@theqtcompany.com>
	<20150609094911.GC26200@troll08.it.local>
	<AM3PR02MB0534124D8A311638A0558137E4BE0@AM3PR02MB0534.eurprd02.prod.outlook.com>
Message-ID: <20150609113514.GE26200@troll08.it.local>

On Tue, Jun 09, 2015 at 10:59:32AM +0000, Heikkinen Jani wrote:
> Hi,
>
> I tried to create error reports about the findings to be able to follow-up the progress. Please create new one if something is missing.
>
the point was about the entirely new headers that were not in the diffs,
i.e., entirely new apis. it's a quite different (and much bigger) task
than ensuring compatibility with existing api revisions.

i can create a task, but it's not up to me to actually schedule it. lars
(or multiple other maintainers) need to make that call.

From md at rpzdesign.com  Tue Jun  9 13:50:41 2015
From: md at rpzdesign.com (md at rpzdesign.com)
Date: Tue, 09 Jun 2015 05:50:41 -0600
Subject: [Development] qqmlengine/qqmlimport access
In-Reply-To: <2540157.FnAxODOLcB@simon-sx58>
References: <CAChgv6pQA2-dEJ9_kb3NhnFGhFY-crP5rGCeHdLDSgx0L-ObZw@mail.gmail.com>	<556E23DB.7060107@gmail.com>
	<2540157.FnAxODOLcB@simon-sx58>
Message-ID: <5576D311.2010101@rpzdesign.com>

On 6/9/2015 1:02 AM, Simon Hausmann wrote:
> On Tuesday, June 02, 2015 03:44:59 PM rpzrpzrpz at gmail.com wrote:
>> On 5/29/2015 9:53 AM, mark diener wrote:
>>> Hello dev list:
>> Maybe after the 5.5 release, I would like to explore adding public
>> access member functions to QQmlEngine.h/cpp:
>>
>> int QQmlEngine::loadComponent(QQmlComponent& component, QString&
>> importQmlName);
>>
>> int QQmlEngine::clearComponent(QString& importQmlName);
>>
>> bool QQmlEngine::isComponentLoaded(QString& component);
>>
>> The biggest concern I see is the caveat warnings given by qqmlimport.h
>

> If you'd like to "pre-load" components, then I agree that we could have
> dedicated API for this, although you can already do this today by creating an
> async QQmlComponent and just not call create() on it.
>

Simon, that is great that I can already do this.

How do I add an Async QmlComponent to the visible Import List so
QQmlEngine does not vomit "Unknown Type" errors?

The Async Component does not seem added to the known import list, hence,
other QML components that to reference Async Component vomit type errors

Thanks,

md




From simon.hausmann at theqtcompany.com  Tue Jun  9 13:59:29 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Tue, 9 Jun 2015 13:59:29 +0200
Subject: [Development] changes to qtbase continuous integration and testing
Message-ID: <1600895.St7bSmF9LY@simon-sx58>

Hi,

In the past two weeks we've made some "interesting" discoveries regarding our
test coverage, specifically regarding qtbase, but the same applies also to
qt5.git:

  * Our networking stack is only tested on OS X 10.10. Due to what seems like
a bug in the test planner, the tests are not fully included on the Windows
configurations. Regarding linux, see the second bullet below.

 * We do not run _any_ tests on Linux for the dev branch of qtbase and
qt5.git. We actually run the tests, but the results are ignored - therefore
test failures on Linux do not block bad changes from integrating. Any change
in qtbase that accidentally breaks for example qtscript on Linux will go into
qt5.git undetected.

As to how it happened that we do not do testing on Linux anymore: We've had
enforcing test coverage with our Ubuntu 12.04 configurations. Then we added
Ubuntu 14.04 but with ignore-failures mode (called "insignificant" in the
system). Then in the beginning of February this year we removed the 12.04
configurations from the CI. When that happened nobody had checked if the
Ubuntu 14.04 configurations were a proper replacement, i.e. if they would
enforce test failures.

In addition we've had OpenSuSE and RHEL 6.6 configurations added to the CI as
well, but those were also in ignore-failures mode, despite RHEL 6.6 being the
configuration we're using for our binary packages. Tests were failing, but
nobody looked at the concrete results and fixed the tests.

In the 5.4/5.5/5.5.0 branches the situation is actually similar, but meanwhile
some fixes helped to regain some coverage.

In the future we must avoid these situations through much more thorough review
of changes to the CI system configuration. At the same time we are not having
this ignore-failures mode in the new CI system anymore. If some configuration
gets added, the tests have to pass. Otherwise we cannot add it and we cannot
claim support for a certain OS/compiler configuration.

Additionally we're taking this also as a sign to re-prioritize CI system
related work to bring qtbase and the rest of the dev branches of qt5 modules
over to the new CI system much sooner. I've been doing repeated builds of
qtbase dev in the new CI and with a larger set of blacklisted tests - I'll
send a separate email about this - and I would like to switch the module over
this week. We will run tests on all non-cross compiling Linux configurations
(Ubuntu 14.04, OpenSUSE 13.01 and RHEL 6.6) and if a test fails, the change
doesn't go in. Generally we have the same matrix of os/compiler combinations
as for the dev branch in the current CI system.

Re-prioritization means for us that we'll do this switch sooner in order to
maintain a certain level of quality, at the expense of not having a public web
frontend and other features in the CI system available before the switch but
some later point in time.


There are a few more lessons to learn from this, but one step at a time :).


Simon

From md at rpzdesign.com  Tue Jun  9 14:01:33 2015
From: md at rpzdesign.com (md at rpzdesign.com)
Date: Tue, 09 Jun 2015 06:01:33 -0600
Subject: [Development] qqmlengine/qqmlimport access
In-Reply-To: <1433843037.3472303.290604321.5B3165B4@webmail.messagingengine.com>
References: <CAChgv6pQA2-dEJ9_kb3NhnFGhFY-crP5rGCeHdLDSgx0L-ObZw@mail.gmail.com>	<556E23DB.7060107@gmail.com>
	<1433843037.3472303.290604321.5B3165B4@webmail.messagingengine.com>
Message-ID: <5576D59D.8030307@rpzdesign.com>

Robin:

I am fairly new to the process, and just eyeballing the source trees
does not give me a working understanding how the render thread and the
GUI thread play nice together.

So knowing the point at which to add a call to int
QQmlEngine::addComponent(QByteArray& gbqml,QString gsimportname) that will:

A) gracefully load the component async/sync
B) add it to the component cache async/sync
C) add the import name to the imports list of known types
D) all while not breaking the choreography of QML GUI and QSG scene graph.

I certainly do not want to add code that blocks the QSG!

Or memory access at just the wrong time causing the buffers to become
corrupted.

There is a lot going on in there, like WebEngine overlays, video surface
underlays, etc.

Does that address the lack of clarity?

Thanks,

md


On 6/9/2015 3:43 AM, Robin Burchell wrote:
> On Tue, Jun 2, 2015, at 11:44 PM, rpzrpzrpz at gmail.com wrote:
>> Another concern I have is the Render Thread issues VS Gui thread issues.
>
> Can you elaborate on this concern? The current description is impossible
> to address, which might explain the lack of response.
>

--
No spell checkers were harmed during the creation of this message.

From thiago.macieira at intel.com  Tue Jun  9 16:37:32 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 09 Jun 2015 07:37:32 -0700
Subject: [Development] Qt 5.5.0 header diff: QtCore.diff
In-Reply-To: <3541770.p50oWnRJIE@finn>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1671590.F4WWUZh0H1@tjmaciei-mobl4> <3541770.p50oWnRJIE@finn>
Message-ID: <4110923.30LUEW5Zq2@tjmaciei-mobl4>

On Tuesday 09 June 2015 12:10:02 Olivier Goffart wrote:
> A change in the IsGadget flag is fine.
>
> Old code did not need this flag. And code that relies on it requires anyway
> that the code that register the types register the isGadget flag.
>
> Even if one could build a complicated use case that breaks, it would be very
> unlikely to happen.

And yet it did happen, or we wouldn't be having this conversation. If Alex
could do it in qtconnectivity, why can't others do it in other circumstances?

> And any change is dangerous. When we fix any small bug, there can always be
> applications that breaks because it was relying on the bug for something.

The problem is the associated risk because this code is complex and varies
depending on factors we usually don't think about. This isn't about your
standard class that operates on data.

> Anyway, let us summarize the "problem" in that case.
>
> In Qt <= 5.4, QtLocation was using QML Private API to basically creates
> QObject wrapper around QGeoCoordinate so it can be exposed in QML. But in Qt
> 5.5, one does not need private API, everybody can expose value types to QML
> just by adding Q_GADGET to it and registering Q_PROPERTY or Q_INVOKABLE. So
> QGeoCoordinate became a Q_GADGET.  But for QML to be able to take advantage
> of it, the type needs to be registered with the QMetaType::IsGadget flag.
> This is automatic. But if the metatype is registered by code compiled with
> Qt 5.4 or before, the IsGadget flag is not present.
> This is what is happening in a application that was compiled against Qt 5.4,
> QGeoCoordinate was used in signal and slot and registered as a metatype by
> the application. QMetaType will detect the difference in the flags on the
> second registration and do a qFatal.
> The solution is obviously not to do a qFatal, but take the new flags in
> addition. And then everything works as expected.

And register the metatype for the Q_GADGET, which it hadn't done before.

My point is that you had not thought of this when you wrote the feature.
Therefore, there shall be no more such features without major discussion
because we are failing to see all the possible consequences. And I am not
convinced yet we've found them all.

What are the consequences of overriding the flag and the metatype? Could it be
that the user did intentionally break compatibility, yet failed to recompile
one module? That's what the qFatal was there for: a reminder. We're removing
it.

> > And it's not just the flag. I'm not convinced about the template detection
> > either. You had to apply two late fixes to the detection so that we
> > wouldn't break source compatibility or create unnecessary warnings.
>
> Yes, I had to apply fixes after the beta was released and it got tested in
> the wild. But is that not what beta releases are for?

The problem is the precedent. We are not finding everything and this code is
extremely complex. The more we add to it, the more complex it becomes
(exponentially so).

> Well, then it will be reviewed as usual.
> There are few improvements that can be done to QMetaType that we were
> discussing at the summit, like the ability to modify list types (append and
> such) or including some of the C++11 features. I bet one can simplify
> qmetatype.h when we require C++11's decltype and proper SFINAE rules

We will have to discuss each modification in the mailing list.

And note that replacing the rules with C++11 simpler rules may have side-
effects too, so you should not simplify for the sake of simplification.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Tue Jun  9 16:23:59 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 09 Jun 2015 07:23:59 -0700
Subject: [Development] changes to qtbase continuous integration and
	testing
In-Reply-To: <1600895.St7bSmF9LY@simon-sx58>
References: <1600895.St7bSmF9LY@simon-sx58>
Message-ID: <1711450.P7YtzcPujL@tjmaciei-mobl4>

On Tuesday 09 June 2015 13:59:29 Simon Hausmann wrote:
> Re-prioritization means for us that we'll do this switch sooner in order to
> maintain a certain level of quality, at the expense of not having a public
> web frontend and other features in the CI system available before the
> switch but some later point in time.
>
>
> There are a few more lessons to learn from this, but one step at a time :).

Thanks for the report Simon and for the effort from you, Frederik and the
others involved.

I've been thinking of that QProcess one you showed me and I'm still wrecking
my brain on how it can happen at all. I'm wondering now if it isn't a Linux
kernel bug that has since been fixed...
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Tue Jun  9 16:41:53 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 09 Jun 2015 07:41:53 -0700
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <CFEE0265-F435-46DE-8AFD-5D7336A3F8F6@theqtcompany.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2002162.x4dfIt0olG@tjmaciei-mobl4>
	<CFEE0265-F435-46DE-8AFD-5D7336A3F8F6@theqtcompany.com>
Message-ID: <1557603.jLAfQzGTcB@tjmaciei-mobl4>

On Tuesday 09 June 2015 07:35:45 Knoll Lars wrote:
> On 08/06/15 23:58, "development-bounces+lars.knoll=theqtcompany.com at qt-
project.org on behalf of Thiago Macieira" <development-
bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of
thiago.macieira at intel.com> wrote:
> >On Monday 08 June 2015 22:31:15 Marc Mutz wrote:
> >> It would probably be a good idea to do an additional header diff (incl.
> >> new
> >> headers) on the ML after the alpha. I don't follow the development of
> >> modules other than QtBase closely, nor do I want to, and apparently I'm
> >> too
> >> strict a reviewer to be regularly invited on new API
>
> Agree. Let's put this into our planning for 5.6. One header diff/review at
> the time we branch 5.6, and a final one to cross-check before the RC.

I don't think this is a header diff review.

This is an API review, where we have people who've written new classes to come
and present their API. They should do that in fact even as the feature is
being finalised and is getting integrated.

We can initiate it by doing a dump of new classes in the release. That should
be easy, all we need is to compare include/QtXxxx/ file listing.

We'd still need a header diff for new functions in existing classes. Usually,
those are minor additions.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From Morten.Sorvig at theqtcompany.com  Tue Jun  9 17:40:59 2015
From: Morten.Sorvig at theqtcompany.com (Sorvig Morten)
Date: Tue, 9 Jun 2015 15:40:59 +0000
Subject: [Development] Qt 5.5.0 header diff: QtWidgets.diff
In-Reply-To: <201506081107.27225.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<1931284.uvrcYbAkYc@frederik-thinkcentre-m93p>
	<201506081107.27225.marc.mutz@kdab.com>
Message-ID: <A0F57B5E-A6F3-4AFD-B801-88B790D0BCA9@digia.com>


> On 08 Jun 2015, at 11:07, Marc Mutz <marc.mutz at kdab.com> wrote:
>
> On Friday 05 June 2015 10:11:27 Frederik Gladhorn wrote:
>> diff --git a/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
>> b/src/widgets/widgets/qmaccocoaviewcontainer_mac.h index a98d30f..5920c1f
>> 100644
>> --- a/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
>> +++ b/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
>> @@ -52,7 +52,6 @@ public:
>>     NSView *nativeView() const;
>>
>> protected:
>> -    void init(NSView *parentView);
>>     bool event(QEvent *ev);
>>
>> private:
>
> This diff seems wrong. In Qt 5.5, the header

That diff is actually for src/widgets/widgets/qmacnativewidget_mac.h .

Change in question is cf5e5570.

Morten



From marc.mutz at kdab.com  Tue Jun  9 19:02:02 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Tue, 9 Jun 2015 19:02:02 +0200
Subject: [Development] Qt 5.5.0 header diff: QtWidgets.diff
In-Reply-To: <A0F57B5E-A6F3-4AFD-B801-88B790D0BCA9@digia.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<201506081107.27225.marc.mutz@kdab.com>
	<A0F57B5E-A6F3-4AFD-B801-88B790D0BCA9@digia.com>
Message-ID: <201506091902.03320.marc.mutz@kdab.com>

On Tuesday 09 June 2015 17:40:59 Sorvig Morten wrote:
> > On 08 Jun 2015, at 11:07, Marc Mutz <marc.mutz at kdab.com> wrote:
> >
> > On Friday 05 June 2015 10:11:27 Frederik Gladhorn wrote:
> >> diff --git a/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
> >> b/src/widgets/widgets/qmaccocoaviewcontainer_mac.h index
> >> a98d30f..5920c1f 100644
> >> --- a/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
> >> +++ b/src/widgets/widgets/qmaccocoaviewcontainer_mac.h
> >>
> >> @@ -52,7 +52,6 @@ public:
> >>     NSView *nativeView() const;
> >>
> >> protected:
> >> -    void init(NSView *parentView);
> >>
> >>     bool event(QEvent *ev);
> >>
> >> private:
> > This diff seems wrong. In Qt 5.5, the header
>
> That diff is actually for src/widgets/widgets/qmacnativewidget_mac.h .
>
> Change in question is cf5e5570.

Ok, looks good then (ftr: no definition was present for the function)

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From Lars.Knoll at theqtcompany.com  Tue Jun  9 22:03:55 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Tue, 9 Jun 2015 20:03:55 +0000
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <1557603.jLAfQzGTcB@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2002162.x4dfIt0olG@tjmaciei-mobl4>
	<CFEE0265-F435-46DE-8AFD-5D7336A3F8F6@theqtcompany.com>
	<1557603.jLAfQzGTcB@tjmaciei-mobl4>
Message-ID: <0E9442E4-99C6-4772-88D9-B9DFA2AFCA44@theqtcompany.com>

On 09/06/15 16:41, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Thiago Macieira" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of thiago.macieira at intel.com> wrote:



>On Tuesday 09 June 2015 07:35:45 Knoll Lars wrote:
>> On 08/06/15 23:58, "development-bounces+lars.knoll=theqtcompany.com at qt-
>project.org on behalf of Thiago Macieira" <development-
>bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of
>thiago.macieira at intel.com> wrote:
>> >On Monday 08 June 2015 22:31:15 Marc Mutz wrote:
>> >> It would probably be a good idea to do an additional header diff (incl.
>> >> new
>> >> headers) on the ML after the alpha. I don't follow the development of
>> >> modules other than QtBase closely, nor do I want to, and apparently I'm
>> >> too
>> >> strict a reviewer to be regularly invited on new API
>>
>> Agree. Let's put this into our planning for 5.6. One header diff/review at
>> the time we branch 5.6, and a final one to cross-check before the RC.
>
>I don't think this is a header diff review.
>
>This is an API review, where we have people who've written new classes to come
>and present their API. They should do that in fact even as the feature is
>being finalised and is getting integrated.
>
>We can initiate it by doing a dump of new classes in the release. That should
>be easy, all we need is to compare include/QtXxxx/ file listing.
>
>We'd still need a header diff for new functions in existing classes. Usually,
>those are minor additions.

Sorry, maybe bad wording from my side. But with a header diff I meant a full diff that would include also new files/classes.

Cheers,
Lars


From 416365416c at gmail.com  Tue Jun  9 22:23:29 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Tue, 9 Jun 2015 13:23:29 -0700
Subject: [Development] [QtCS] QtRemoteObjects Session Summary
Message-ID: <CALX7-s7sbB0Gpb_7M-B__tWGAtB75K3xbdQR6izaDihNmqP0xw@mail.gmail.com>

There was late-scheduled session on QtRemoteObjects at QtCS on
Saturday. QtRemoteObjects is a playground module for object remoting
of QObjects, and can be found at
http://code.qt.io/cgit/playground/qtremoteobjects.git/ .

A brief overview of the existing features:
-Exports QObjects remotely, creates a replicant on the client side you
can interface with
-Network nodes can serve as a registry to allow lookup by name.
-Transport Layer Adapters
-Bjoern is currently working on exporting of QAbstractItemModels

A brief overview of planned features:
-QML API
-Protocol Layer Adapters
-Investigate merge with QWebChannel (sounds similar, of course no-one
working on QWebChannel was present to confirm).

After it is established with those features and solid quality, it
could be considered to promote it to an add-on module.

The idea with protocol adapters is that currently it only sends
QDataStream output over the wire. I want to send more accessible
JSON-RPC (like) data over the wire for working with node, and Attila
had a demo of getting object data from Meteor (although that was
custom hacked for demo purposes). Protocol adapters will allow you to
serialize it in these other forms, and that is the mechanism by which
we gain compatibility with other languages/frameworks without them
needing explicit QRO support - We'll talk their language if there
exists compatible semantics. They'll probably remain separate from the
transport adapters, but we'll see how the implementation develops.
I'll start looking into the implementation this month.

The question was raised "How is this not CORBA?". I'm not that
familiar with CORBA (just read the wikipedia article today), but my
suspicion is that we've cut out a lot of the boiler-plate by
leveraging existing Qt Meta-object information. We have a base case
where we aren't a generic "anything to anything" layer. We have a very
specific "Qt to Qt" layer which is far easier to use, and it can be
extended to be "Anything to Anything" but you'll probably end up doing
as much or more work as CORBA if Qt isn't on either side (side note:
I'm expecting "Qt to JS/JSON" to be another simplified case by
comparison). The convenience of just being able to hook up objects
remotely in QML - without having to write an extra IDL beforehand (it
comes from moc data) - seems transformative. We may even be able to
write a CORBA protocol adapter that would allow it to interoperate
with CORBA on the other side, although it would probably be a lot of
work that no-one wants and would have worse performance.

I was prototyping my own remote objects in QML until I talked to KDAB
at QtCS - my implementation is nascent and will be silently discarded
in favor of contributing to QtRemoteObjects. But to start the QML API
draft, here's what I had in my separate implementation:

        QtObject {
            id: testCase
            property int test: 1
        }
        RemotingServer {
            id: server
            target: testCase //This object will be remoted
            //Note that URL scheme (http here) selects
transport/protocol adapter
            url: "http://localhost:3071/" //This is the location it is served at
            onRunningChanged: console.log("Server running on " + url);
//running property is true iff successfully remoted
        }
        RemotingClient {
            id: client
            url: server.url //This is the location of the remote instance
            property int test: 99 //This is a property on the remote
instance we want to listen to. Until the remote connection is made, it
will have a default value of 99

            //See below description
            objectName: "client"
            promotable: true
            //Note it's its own target when not promoted
        }

The objectName and promotable properties combine to support a specific
use-case I was thinking of. If you expose a QObject from C++ to QML
it's usually exposed like
engine.rootContext()->setContextProperty("app", appInstance). If you
use remoting to serve appInstance from another node, you can export
the remote object in the same place (just on the root context) and
leave the UI code unchanged. All you need is a shell around it that
looks like {RemotingClient{promotable:true} MyRealUI {}} when
launching it on the remote host. The way I implemented it so far it
actually checks that property in the root context first, so that you
can have a RemotingClient{} on the local version which just does
nothing and doesn't get in the way (the URL ended up being left unset
in my example, so it didn't even try to start network communications).

Sharing objectName with QObject is primarily a hack for convenience, I
don't like the "promotable" name so when someone thinks of a better
name we can use something like <betterName>Name.

--
Alan Alpert

From 416365416c at gmail.com  Tue Jun  9 22:23:45 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Tue, 9 Jun 2015 13:23:45 -0700
Subject: [Development] [QtCS] QML Runtime Session Summary
Message-ID: <CALX7-s67=cZg8a5teh-ONZS7pW2N2+wRaBsM_Wc5sxUNrF4aBg@mail.gmail.com>

The QML runtime session explained the existence and rationale for the
QML runtime (qtdeclarative/tools/qml). The rationale is that it is
more generic than just qmlscene, yet is configurable to have the same
level of convenience for QtQuick (among others). It has a runtime
configuration file which can identfy a partial QtQuick scene and wrap
it in a simple Window, actually part of the sources and bundled via
QRC. The configuration file could be extended for other partial
scenes, such as if Qt3D wants to wrap a simple viewport/canvas around
any Item3D{} partial scene. As it's loaded at runtime, this would not
add any dependencies on Qt3D for the qml binary.

Given the rationale, there was talk of fully replacing qmlscene to
avoid duplicated maintenence. This would require at least
-Fixing all the docs that still point to qmlscene (everywhere)
-Using qml instead of qmlscene in QtCreator
Anything else need to be done before we can deprecate/replace qmlscene?

There is discussion of extending the QML runtime configuration file to
include configuring options. The concept is that you could use this to
have a custom -help if your running your own executable, or that you
could remap the arguments so that qmlscene could be a specially
configured invocation of the QML runtime (while maintaining
compatibility with all CLI arguments).

There were also some questions about whether certain arguments really
belonged there. It might be possible to hide them, maybe even with a
developer configuration file, but others (especially the ones we
didn't implement from qmlviewer) could be implemented via a "shell"
QML application. An example of such an application might be useful to
add to the examples directory.

A final point about the configuration file, is that we'll need an easy
way to extend it (especially if we use it to customize options in
certain invocations). The idea I have so far (thought up after the
session) is that the configuration file, or individual types in it,
gain a "supplemental" property. If that is set on the file, then it
will continue the search for configuration files (in the same order as
dfined already) and add their configurations as well. Common case for
that would be a custom config file which wants the built-in as well,
perhaps even built-in + user settings. That still leaves the problem
that wrappers with custom options will need to have a path to a
deployed conf.qml file which has supplemental set on it, so they can
pass that to -f in their #! line.

--
Alan Alpert

From md at rpzdesign.com  Tue Jun  9 22:32:40 2015
From: md at rpzdesign.com (md at rpzdesign.com)
Date: Tue, 09 Jun 2015 14:32:40 -0600
Subject: [Development] qqmlengine/qqmlimport access
In-Reply-To: <2540157.FnAxODOLcB@simon-sx58>
References: <CAChgv6pQA2-dEJ9_kb3NhnFGhFY-crP5rGCeHdLDSgx0L-ObZw@mail.gmail.com>	<556E23DB.7060107@gmail.com>
	<2540157.FnAxODOLcB@simon-sx58>
Message-ID: <55774D68.9020109@rpzdesign.com>

Simon:

I just finished reviewing the QQuickImageProvider framework
and that might also be an known interface pattern acceptable to the team.

Component { source: "memory://myqmlprovider/myqmlcomponent" }

And it may just "fit" nicely into the current "qrc:" pattern.

Just my 2 cents...

md

On 6/9/2015 1:02 AM, Simon Hausmann wrote:
> On Tuesday, June 02, 2015 03:44:59 PM rpzrpzrpz at gmail.com wrote:
>> On 5/29/2015 9:53 AM, mark diener wrote:
>>> Hello dev list:
>>>
>>> Qt 5.4.1.
>>>
>>> At the top of qqmlimport_p.h, it discusses how it is NOT part of the QT
>>> API and subject to change.
>>>
>>> In qqmlengine.h, there is addImportPath( ) to allow qqmlimport to
>>> resolve types using a module/qmldir file.
>>>
>>> But ByteArray derived components have no equivalent treatment:
>>>
>>>
>>> QByteArray  gbytes("import  QtQuick  2.4\n  Rectangle  {
>>> objectName:\"myRecto\"\n  color:  \"blue\"  }");
>>>
>>> QQmlComponent  gcomponent(&gengine)  ;
>>>
>>> gcomponent.setData(gbytes,QUrl("Myrectangle.qml"));
>>>
>>>
>>> How to add the QQmlComponent in the QQmlEngine import database so that
>>> QQmlImports::addImplicitImport( ) can resolve component type?
>>>
>>> There is no new C++ type here, just a new component defined in QML, so
>>> qmlRegisterType<C++type>(bla,bla,bla) is a fail.
>>>
>>> Or maybe there is a non-qmldir file method to use importExtension with
>>> QQmlComponent?  (qmldir file alternative)
>>>
>>> Does QQmlEngine have a public access way to achieve the following:
>>>
>>> QQmlEngine::addImportComponent(QString gname,QQmlComponent& gcomponent) ;
>>> QQmlEngine::removeImportComponent(QString gname) ;
>>>
>>> In QML, I could either have an importExtension()  OR an implicitImport()
>>> in qqmlimports.
>>>
>>> Thanks,
>>>
>>> Mark
>>
>> Simon:
>>
>> I think the absence of responses from the dev list indicates I have
>> touched on a topic dead zone that resides in your area as QML/core
>> maintainer.
>>
>>   From what I can tell, the QML component cache and import mechanisms
>> lack any public access members for direct query,loading, and removal.
>
> Yes.
>
>> There are the blunt force methods of QQmlEngine->clearComponentCache()
>> and QQmlEngine->trimComponentCache().
>>
>> Maybe after the 5.5 release, I would like to explore adding public
>> access member functions to QQmlEngine.h/cpp:
>>
>> int QQmlEngine::loadComponent(QQmlComponent& component, QString&
>> importQmlName);
>>
>> int QQmlEngine::clearComponent(QString& importQmlName);
>>
>> bool QQmlEngine::isComponentLoaded(QString& component);
>>
>> The biggest concern I see is the caveat warnings given by qqmlimport.h
>
> I'm wondering what the specific use-cases are. More specifically what criteria
> would be used to call these functions?
>
> If you'd like to "pre-load" components, then I agree that we could have
> dedicated API for this, although you can already do this today by creating an
> async QQmlComponent and just not call create() on it.
>
>> Another concern I have is the Render Thread issues VS Gui thread issues.
>>
>> What group of devs is current this?
>>
>> Does that group even talk to strangers?
>
> Hehe.
>
>
> Simon
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
>

--
No spell checkers were harmed during the creation of this message.

From 416365416c at gmail.com  Tue Jun  9 22:38:43 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Tue, 9 Jun 2015 13:38:43 -0700
Subject: [Development] Qt 5.5.0 header diff: QtDeclarative.diff
In-Reply-To: <CAHceRrhT1kApcmYY6BE6HzrHNoCnKhe2kdijSoiC39mNKX2XjQ@mail.gmail.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<4626122.JzJB5NSHdj@frederik-thinkcentre-m93p>
	<201506061052.20621.kde@carewolf.com>
	<CAHceRrhT1kApcmYY6BE6HzrHNoCnKhe2kdijSoiC39mNKX2XjQ@mail.gmail.com>
Message-ID: <CALX7-s6g1J6Lyn_iV9zHQk+9Z7LRPpLz52iq4bvib8Q8xhLQww@mail.gmail.com>

I started working on something that would diff QML API changes a while
ago: https://codereview.qt-project.org/#/c/52625/

It's a little tricky, but it basically is just diffing the
plugins.qmltypes files. After regenerating them and having old "full"
copies because of the manual editing that occurs sometimes. And you
need to diff the parsed tree because the order of lines changes
sometimes. But I suppose the biggest hurdle to getting that tool in is
that I wanted it to run as an autotest and fail if new symbols appear
which aren't properly versioned (a little more work than just listing
changes).

--
Alan Alpert

On Sat, Jun 6, 2015 at 2:23 AM, Liang Qi <cavendish.qi at gmail.com> wrote:
> On 6 June 2015 at 10:52, Allan Sandfeld Jensen <kde at carewolf.com> wrote:
>>
>> On Friday 05 June 2015, Frederik Gladhorn wrote:
>> >
>>
>> Would there be any way to generate diffs or changes for QML APIs?
>
>
> Perhaps a diff for all plugins.qmltypes files? But I guess that not all were
> updated yet.
>
> --
> http://www.qiliang.net
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
>

From 416365416c at gmail.com  Tue Jun  9 22:45:57 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Tue, 9 Jun 2015 13:45:57 -0700
Subject: [Development] Qt 5.5.0 header diff: QtQuick.diff
In-Reply-To: <2270760.8ERj8QCWO7@tjmaciei-mobl4>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<2259422.RehQiycJvK@frederik-thinkcentre-m93p>
	<2270760.8ERj8QCWO7@tjmaciei-mobl4>
Message-ID: <CALX7-s4gkaXEWp1nyQL+zO=whifjkpQT_PqrukrtjPMmnaBuOA@mail.gmail.com>

On Sat, Jun 6, 2015 at 1:14 AM, Thiago Macieira
<thiago.macieira at intel.com> wrote:
> On Friday 05 June 2015 10:11:20 Frederik Gladhorn wrote:
>>
> Looks good.

Looks good to me as well. I'll try to produce a QML API diff to look
through later today.

--
Alan Alpert

From 416365416c at gmail.com  Tue Jun  9 23:07:34 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Tue, 9 Jun 2015 14:07:34 -0700
Subject: [Development] New Qt5.5.0-RC snapshot available
In-Reply-To: <DB3PR02MB0540869090D2B2D31D7B2477E4BF0@DB3PR02MB0540.eurprd02.prod.outlook.com>
References: <DB3PR02MB0540869090D2B2D31D7B2477E4BF0@DB3PR02MB0540.eurprd02.prod.outlook.com>
Message-ID: <CALX7-s4-jmxqdsSfBZ3efyK02+tEH29WNdDvE8tQ0p=ZwL4q1Q@mail.gmail.com>

On Sun, Jun 7, 2015 at 9:59 PM, Heikkinen Jani
<jani.heikkinen at theqtcompany.com> wrote:
> Hi all,
>
>
> New snapshot for Qt5.5.0 RC available.
>
> Windows: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-05_79/
>
> Linux: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-05_101/
>
> Mac: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-05_83/
>
>
> Content is not the final RC one but should be really near so please inform
> me immediately if you find something broken & which should block the
> release.
>
> We are trying to pur RC out this Thursday & final Tue 23.6.2015 so please
> don't try to get any nice-to-have's in anymore.
>
>
> Maintainers: For the coming releases please make sure
>
> - All findings from header diff is fixed today
>
> - all known issues are listed in https://wiki.qt.io/Qt_5.5.0_Known_Issues
>
> - Change files are created & found from
> https://wiki.qt.io/Change-files-in-Qt-5.5.0#Qt_5.5.0_Change_files
>
> * Missing:
>
> ** qtandroidextras:
> http://code.qt.io/cgit/qt/qtandroidextras.git/tree/dist/changes-5.5.0?h=5.5.0
>
> ** qtbase:
> http://code.qt.io/cgit/qt/qtbase.git/tree/dist/changes-5.5.0?h=5.5.0
>
> ** qtconnectivity:
> http://code.qt.io/cgit/qt/qtconnectivity.git/tree/dist/changes-5.5.0?h=5.5.0
>
> ** qtdoc:
> http://code.qt.io/cgit/qt/qtdoc.git/tree/dist/changes-5.5.0?h=5.5.0
>
> ** qtenginio:
> http://code.qt.io/cgit/qt/qtenginio.git/tree/dist/changes-1.1.2?h=1.1.2
>
> ** qtgraphicaleffects:
> http://code.qt.io/cgit/qt/qtgraphicaleffects.git/tree/dist/changes-5.5.0?h=5.5.0
>
> ** qtlocation:
> http://code.qt.io/cgit/qt/qtlocation.git/tree/dist/changes-5.5.0?h=5.5.0
>
> ** qtmacextras:
> http://code.qt.io/cgit/qt/qtmacextras.git/tree/dist/changes-5.5.0?h=5.5.0
>
> ** qtmultimedia:
> http://code.qt.io/cgit/qt/qtmultimedia.git/tree/dist/changes-5.5.0?h=5.5.0
>
> ** qtquick1:
> http://code.qt.io/cgit/qt/qtquick1.git/tree/dist/changes-5.5.0?h=5.5.0
>
> ** qtscript:
> http://code.qt.io/cgit/qt/qtscript.git/tree/dist/changes-5.5.0?h=5.5.0

I just went through the git log to confirm. There is nothing of
interest to put in the changelog for QtQuick1 or QtScript (I'd be
surprised if I found otherwise). Do you really need an empty file
there?

--
Alan Alpert

From lorn.potter at gmail.com  Wed Jun 10 04:42:32 2015
From: lorn.potter at gmail.com (Lorn Potter)
Date: Wed, 10 Jun 2015 12:42:32 +1000
Subject: [Development] changes to qtbase continuous integration and
	testing
In-Reply-To: <1600895.St7bSmF9LY@simon-sx58>
References: <1600895.St7bSmF9LY@simon-sx58>
Message-ID: <5577A418.9060004@gmail.com>



On 09/06/15 21:59, Simon Hausmann wrote:
> Hi,
>
[snip]

Is there a url to see the test results of various platforms/modules?

From tuukka.turunen at theqtcompany.com  Wed Jun 10 07:05:39 2015
From: tuukka.turunen at theqtcompany.com (Turunen Tuukka)
Date: Wed, 10 Jun 2015 05:05:39 +0000
Subject: [Development] Some Qt3D feedback
In-Reply-To: <68307912.fy5hP133g3@cartman>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<2646160.nJGqpQo0xz@cartman>,<68307912.fy5hP133g3@cartman>
Message-ID: <89A42AD1-15BA-4E02-AB01-CBB086874F37@theqtcompany.com>


Hi,

If some of the fixes are critical to have in Qt 5.5.0, they should be targeted to that branch. Please discuss with Jani Heikkinen, and add to release meta task. All non-critical fixes to 5.5, of course.

Doc fixes should be safe to go into 5.5.0 branch - and in many ways these are critical, otherwise users can not get a proper overview of the functionality.

Yours,

--
Tuukka

> Sean Harmer <sean.harmer at kdab.com> kirjoitti 9.6.2015 kello 12.03:
>
>> On Monday 08 Jun 2015 14:18:33 Sean Harmer wrote:
>>
>>> On Monday 08 Jun 2015 01:11:23 Stephen Kelly wrote:
>>> 2) A private header is included in a public header:
>>> include/Qt3DCore$ grep private/ *.h
>>> qaspectjobmanager.h:#include <Qt3DCore/private/qt3dcore_global_p.h>
>>>
>>> This is concerning - Don't we have a unit test preventing that?
>>
>> I can't find that. Is that from the 5.5 branch?
>
> Aha, found it thanks to the cmake unit test ;) Fix at
>
> https://codereview.qt-project.org/#/c/113952/
>
>>> 3) The cmake unit tests don't pass.
>>>
>>> It is easily fixable, but does this mean that the cmake tests are not run
>>> for this module? That is concerning.
>>>
>>> Are unit tests run for this module in CI at all?
>>
>> Hmm I thought they were, but obviously not. I'm looking at making the test
>> work now.
>
> Partial fix at
>
> https://codereview.qt-project.org/#/c/113953/
>
> It's failing due to the use of namespace in Qt3D. Does the cmake unit test
> infrastructure support namespaces? Any hints on how to fix or to add support
> for namespaces. I note that the cmake tests for other modules pass with
> namespaced Qt builds but I guess that may be using a different mechanism.
>
> Cheers,
>
> Sean
> --
> Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
> KDAB (UK) Ltd, a KDAB Group company
> Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
> Mobile: +44 (0)7545 140604
> KDAB - Qt Experts
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

From alexander.blasche at theqtcompany.com  Wed Jun 10 08:45:00 2015
From: alexander.blasche at theqtcompany.com (Blasche Alexander)
Date: Wed, 10 Jun 2015 06:45:00 +0000
Subject: [Development] New Qt5.5.0-RC snapshot available
In-Reply-To: <CALX7-s4-jmxqdsSfBZ3efyK02+tEH29WNdDvE8tQ0p=ZwL4q1Q@mail.gmail.com>
References: <DB3PR02MB0540869090D2B2D31D7B2477E4BF0@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<CALX7-s4-jmxqdsSfBZ3efyK02+tEH29WNdDvE8tQ0p=ZwL4q1Q@mail.gmail.com>
Message-ID: <AM2PR02MB0564A90FB9FC3EAA550FE3379EBD0@AM2PR02MB0564.eurprd02.prod.outlook.com>


> I just went through the git log to confirm. There is nothing of
> interest to put in the changelog for QtQuick1 or QtScript (I'd be
> surprised if I found otherwise). Do you really need an empty file
> there?

I'd say yes. It is information for our customers. No file doesn't tell the difference between "no difference worthwhile mentioning" and "we forgot to provide the information".
Unfotunately our track record would be an indication for the latter.

I suggest to add a changelog with the usual header and as actual content "No changes" or sth similar.

--
Alex

From 416365416c at gmail.com  Wed Jun 10 10:04:55 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Wed, 10 Jun 2015 01:04:55 -0700
Subject: [Development] Qt 5.5.0 QML Revision Check
Message-ID: <CALX7-s7bYQmAia5ob+nMnUo7RbykdeXO+VHdo6DQZh7B4Mu+Sg@mail.gmail.com>

I have run qmlRevCheck between the 5.4 and 5.5.0 branches, for the
imports in qtdeclarative/src/imports. Results are attached. Results
come from generating and parsing new qmltypes files from each branch,
and comparing them with the qmlRevCheck tool
(https://codereview.qt-project.org/#/c/114038/ is the updated version
to build these days).

I won't have time to properly look through the results until tomorrow,
but there is one key thing to note in the output. qmlplugindump
-builtins will spit out QtQuick types in 5.4, but in 5.5 it's a
separate file (from qmplugindump -nonrelocatable QtQuick 2.5). I
compared the 5.4 file to each of the two 5.5 files separately in the
two output files. But it's a lot of noise, and I'm not quite awake
enough to filter it out right now.

--
Alan Alpert
-------------- next part --------------
A non-text attachment was scrubbed...
Name: folderlistmodel.out
Type: application/octet-stream
Size: 8 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150610/d3388c74/attachment-0009.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: localstorage.out
Type: application/octet-stream
Size: 8 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150610/d3388c74/attachment-0010.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: models.out
Type: application/octet-stream
Size: 373 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150610/d3388c74/attachment-0011.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: particles.out
Type: application/octet-stream
Size: 8 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150610/d3388c74/attachment-0012.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: qtquick2.out
Type: application/octet-stream
Size: 6820 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150610/d3388c74/attachment-0013.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: qtquick2.out2
Type: application/octet-stream
Size: 4438 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150610/d3388c74/attachment-0014.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: settings.out
Type: application/octet-stream
Size: 8 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150610/d3388c74/attachment-0015.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: statemachine.out
Type: application/octet-stream
Size: 103 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150610/d3388c74/attachment-0016.obj
-------------- next part --------------
A non-text attachment was scrubbed...
Name: window.out
Type: application/octet-stream
Size: 252 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150610/d3388c74/attachment-0017.obj

From jani.heikkinen at theqtcompany.com  Wed Jun 10 12:09:31 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Wed, 10 Jun 2015 10:09:31 +0000
Subject: [Development] Heads-UP: New modules for Qt 5.6 needs to be in dev
 before end of June!
Message-ID: <DB3PR02MB05405284B567C1DADAAE910CE4BD0@DB3PR02MB0540.eurprd02.prod.outlook.com>

Kindly reminder:


All new modules for 5.6 release must be in dev branch before end of june, see http://lists.qt-project.org/pipermail/releasing/2015-May/001941.html


And please start adding new stuff here as well: https://wiki.qt.io/New_Features_in_Qt_5.6


br,

Jani
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150610/60af9183/attachment.html

From simon.hausmann at theqtcompany.com  Wed Jun 10 15:52:47 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Wed, 10 Jun 2015 15:52:47 +0200
Subject: [Development] [QtCS] QtRemoteObjects Session Summary
In-Reply-To: <CALX7-s7sbB0Gpb_7M-B__tWGAtB75K3xbdQR6izaDihNmqP0xw@mail.gmail.com>
References: <CALX7-s7sbB0Gpb_7M-B__tWGAtB75K3xbdQR6izaDihNmqP0xw@mail.gmail.com>
Message-ID: <2030608.WcmVyIMcUm@simon-sx58>

On Tuesday, June 09, 2015 01:23:29 PM Alan Alpert wrote:
> There was late-scheduled session on QtRemoteObjects at QtCS on
> Saturday. QtRemoteObjects is a playground module for object remoting
> of QObjects, and can be found at
> http://code.qt.io/cgit/playground/qtremoteobjects.git/ .
>
> A brief overview of the existing features:
> -Exports QObjects remotely, creates a replicant on the client side you
> can interface with
> -Network nodes can serve as a registry to allow lookup by name.
> -Transport Layer Adapters
> -Bjoern is currently working on exporting of QAbstractItemModels
>
> A brief overview of planned features:
> -QML API
> -Protocol Layer Adapters
> -Investigate merge with QWebChannel (sounds similar, of course no-one
> working on QWebChannel was present to confirm).
>
> After it is established with those features and solid quality, it
> could be considered to promote it to an add-on module.
>
> The idea with protocol adapters is that currently it only sends
> QDataStream output over the wire. I want to send more accessible
> JSON-RPC (like) data over the wire for working with node, and Attila
> had a demo of getting object data from Meteor (although that was
> custom hacked for demo purposes). Protocol adapters will allow you to
> serialize it in these other forms, and that is the mechanism by which
> we gain compatibility with other languages/frameworks without them
> needing explicit QRO support - We'll talk their language if there
> exists compatible semantics. They'll probably remain separate from the
> transport adapters, but we'll see how the implementation develops.
> I'll start looking into the implementation this month.
>
> The question was raised "How is this not CORBA?". I'm not that
> familiar with CORBA (just read the wikipedia article today), but my
> suspicion is that we've cut out a lot of the boiler-plate by
> leveraging existing Qt Meta-object information.

I don't suspect that this is the CORBA criticism. I mean, it's a fair point
that you often do end up with boiler plate translating type systems, but
that's mostly a matter of good IDL bindings.

No, the criticism I would have regarding CORBA or at least the way you may
quickly end up using it is that it hides something that shouldn't be hidden:
Failures.

When working with "remote" services things _will_ go wrong. There will be
issues with your connection, there will be issues with the remote side not
responding (having crashed for example), there will be many such issues. You
don't see them when developing the system, but during real world deployment
you run into them, and then it's too late. During development you haven't
encountered those issues, so your code that calls methods and reads/writes
properties is written as if it works locally, because it did during your
testing. Systems like CORBA encourage developers to write code as if the
method calls were local, completely ignoring the nature of unreliable
transports and services.

I feel that mistake is made over and over again in many similar designs. It is
perhaps one area where the web development is doing better. It's my (perhaps
incorrect?) impression that web services tend to be accessed using more
explicit code instead of using transparent method calls or property access.
The XMLHttpRequest API is one example here, and the promises based fetch() API
makes this even better IMHO.


The other aspect that I think is crucial in a distributed system is
compatibility. This is why systems like thrift and protocol buffers exist:
They provide type safety (!) and make it really easy to maintain wire
compatibility. JSON is also "okay" with this, but it has the huge disadvantage
that usually json formats are "untyped".


In my opinion a system that we promote to Qt developers should learn from
these "mistakes" in the past: The API should encourage developers to write
fault tolerant code (because distributed systems _do_ fail) and it should be
easy to maintain wire compatibility (just like we do maintain binary
compatibility).



Simon

From sean.harmer at kdab.com  Wed Jun 10 15:57:29 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Wed, 10 Jun 2015 14:57:29 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <CACHsx4KS7MufL9zT55FLAqb_w8ajTNK4qxpX-fVOZv2pnv2iHw@mail.gmail.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <68307912.fy5hP133g3@cartman>
	<CACHsx4KS7MufL9zT55FLAqb_w8ajTNK4qxpX-fVOZv2pnv2iHw@mail.gmail.com>
Message-ID: <2665720.cRXN5bQUXm@cartman>

On Tuesday 09 Jun 2015 13:09:50 Stephen Kelly wrote:
> On Tue, Jun 9, 2015 at 11:01 AM, Sean Harmer <sean.harmer at kdab.com> wrote:
> > On Monday 08 Jun 2015 14:18:33 Sean Harmer wrote:
> >> On Monday 08 Jun 2015 01:11:23 Stephen Kelly wrote:
> >> > 2) A private header is included in a public header:
> >> >  include/Qt3DCore$ grep private/ *.h
> >> >  qaspectjobmanager.h:#include <Qt3DCore/private/qt3dcore_global_p.h>
> >> >
> >> > This is concerning - Don't we have a unit test preventing that?
> >>
> >> I can't find that. Is that from the 5.5 branch?
> >
> > Aha, found it thanks to the cmake unit test ;) Fix at
>
> Yep, that's how I found it too. I'm confused that the grep I pasted
> did not lead you to it though. The grep shows it to me on 5.5, 5.5.0
> and dev branches. Maybe you didn't know the directory to run the grep
> in? But even then, the filename should be enough to lead you to the
> private/ include...
>
> Anyway, good you found it.

I'll chalk that one up to lack of sleep on my part.

>
> > https://codereview.qt-project.org/#/c/113953/
> >
> > It's failing due to the use of namespace in Qt3D. Does the cmake unit test
> > infrastructure support namespaces? Any hints on how to fix or to add
> > support for namespaces.
>
> I just commented on the review. For reference, you need to set a
> ${ClassName}_NAMESPACE variable to the namespace to use for a class
> under test.

Thanks, that worked a treat!

Sean
--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
KDAB (UK) Ltd, a KDAB Group company
Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
Mobile: +44 (0)7545 140604
KDAB - Qt Experts

From Kai.Koehne at theqtcompany.com  Wed Jun 10 16:20:51 2015
From: Kai.Koehne at theqtcompany.com (Koehne Kai)
Date: Wed, 10 Jun 2015 14:20:51 +0000
Subject: [Development] Avoid overloading of 'error'
Message-ID: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>

Hi,

I'm currently converting a codebase from old-style connects to new-style ones. Thanks to Qt Creator's refactoring support this is actually quite easy ... it gets ugly though when either the signal or slot method name is overloaded, and you have to write nice code like

	connect(&process, static_cast<void (QProcess::*)(QProcess::ProcessError)>(&QProcess::Error), this, &MyClass::processError);

There can be done little to avoid this in general, but actually the overloading of 'error' stands out: E.g. QProcess, QNetworkReply, QNetworkSession, QAbstractSocket all feature both an error() signal and an error() accessor.

Ideas how to mitigate this:

1. We could deprecate the error() signal, and add a failed() signal (still in Qt 5).
2. We could rename error() accessor to lastError() in Qt 6.
3. <your idea goes here>

Comments?

Regards

Kai

--------
Kai K?hne, Senior Software Engineer - The Qt Company GmbH

The Qt Company GmbH, Rudower Chaussee 13, D-12489 Berlin
Gesch?ftsf?hrer: Mika P?lsi, Juha Varelius, Tuula Haataja Sitz der Gesellschaft: Berlin, Registergericht: Amtsgericht Charlottenburg, HRB 144331 B




From simon.hausmann at theqtcompany.com  Wed Jun 10 16:20:36 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Wed, 10 Jun 2015 16:20:36 +0200
Subject: [Development] changes to qtbase continuous integration and
	testing
In-Reply-To: <5577A418.9060004@gmail.com>
References: <1600895.St7bSmF9LY@simon-sx58> <5577A418.9060004@gmail.com>
Message-ID: <2553904.vygiKbFiPv@simon-sx58>

On Wednesday, June 10, 2015 12:42:32 PM Lorn Potter wrote:
> On 09/06/15 21:59, Simon Hausmann wrote:
> > Hi,
>
> [snip]
>
> Is there a url to see the test results of various platforms/modules?

All the logs of the builds are uploaded to

    http://testresults.qt.io/ci/

That has been the case for years, although it used to be qt-project instead of
.io. It is my primary source when investigating issues.


There is also the "qtmetrics" site, but that is .. well, it has its problems.
On the upside that is being reworked and we're also working on a public read-
only web interface to the CI system to see semi-live builds.


Simon

From thiago.macieira at intel.com  Wed Jun 10 16:35:17 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 10 Jun 2015 07:35:17 -0700
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
Message-ID: <13279726.762LyY3m5A@tjmaciei-mobl4>

On Wednesday 10 June 2015 14:20:51 Koehne Kai wrote:
> Hi,
>
> I'm currently converting a codebase from old-style connects to new-style
> ones. Thanks to Qt Creator's refactoring support this is actually quite
> easy ... it gets ugly though when either the signal or slot method name is
> overloaded, and you have to write nice code like
>
> 	connect(&process, static_cast<void
> (QProcess::*)(QProcess::ProcessError)>(&QProcess::Error), this,
> &MyClass::processError);
>
> There can be done little to avoid this in general, but actually the
> overloading of 'error' stands out: E.g. QProcess, QNetworkReply,
> QNetworkSession, QAbstractSocket all feature both an error() signal and an
> error() accessor.
>
> Ideas how to mitigate this:
>
> 1. We could deprecate the error() signal, and add a failed() signal (still
> in Qt 5).
> 2. We could rename error() accessor to lastError() in Qt 6.
> 3. <your idea goes here>
>
> Comments?

I like both 1 and 2.

"error" isn't a verb in the past, so it's a bad name for a signal. "failed" or
another construct with a verb in the past is better. Even "errorEncountered"
would be fine.

Changing "error" to "lastError" for the getter also makes sense, since it
clearly indicates that it's the last error that happened. If no error
happened, then this function may or may not return anything intetersting. But
if you rename that function, you should also rename errorString to
lastErrorString.

So I recommend we begin the shift now in 5.6 and deprecate the old methods, to
be removed in 6.0.

As for the implementation, please connect one signal to the other, so we don't
need to duplicate the emissions. But note that there will be an delivery order
problem: all slots connected to one signal will be received before all slots
connected to the other. Unless Olivier adds a signal alias feature to moc :-)

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From samuel.gaist at edeltech.ch  Wed Jun 10 16:36:42 2015
From: samuel.gaist at edeltech.ch (Samuel Gaist)
Date: Wed, 10 Jun 2015 16:36:42 +0200
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
Message-ID: <CA8E35D5-1E96-4028-ABC8-A63720517429@edeltech.ch>

On 10 juin 2015, at 16:20, Koehne Kai <Kai.Koehne at theqtcompany.com> wrote:

> Hi,
>
> I'm currently converting a codebase from old-style connects to new-style ones. Thanks to Qt Creator's refactoring support this is actually quite easy ... it gets ugly though when either the signal or slot method name is overloaded, and you have to write nice code like
>
> 	connect(&process, static_cast<void (QProcess::*)(QProcess::ProcessError)>(&QProcess::Error), this, &MyClass::processError);
>
> There can be done little to avoid this in general, but actually the overloading of 'error' stands out: E.g. QProcess, QNetworkReply, QNetworkSession, QAbstractSocket all feature both an error() signal and an error() accessor.
>
> Ideas how to mitigate this:
>
> 1. We could deprecate the error() signal, and add a failed() signal (still in Qt 5).
> 2. We could rename error() accessor to lastError() in Qt 6.
> 3. <your idea goes here>
>
> Comments?
>
> Regards
>
> Kai
>
> --------
> Kai K?hne, Senior Software Engineer - The Qt Company GmbH
>
> The Qt Company GmbH, Rudower Chaussee 13, D-12489 Berlin
> Gesch?ftsf?hrer: Mika P?lsi, Juha Varelius, Tuula Haataja Sitz der Gesellschaft: Berlin, Registergericht: Amtsgericht Charlottenburg, HRB 144331 B
>
>
>

Hi,

I agree that signal and accessor of the same name should be avoided.

What about errorOccured ?

failed doesn't always mean there was an error with a direct relation.

Regards

Samuel

From Simon.Hausmann at theqtcompany.com  Wed Jun 10 17:14:07 2015
From: Simon.Hausmann at theqtcompany.com (Hausmann Simon)
Date: Wed, 10 Jun 2015 15:14:07 +0000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <13279726.762LyY3m5A@tjmaciei-mobl4>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>,
	<13279726.762LyY3m5A@tjmaciei-mobl4>
Message-ID: <20150610151406.5693520.88469.26350@theqtcompany.com>

Hi,

I think renaming the getter to lastError is nice! I however do like error as signal name and it looks good in qml as onError:...


Simon

  Original Message
From: Thiago Macieira
Sent: Wednesday, June 10, 2015 16:35
To: development at qt-project.org
Subject: Re: [Development] Avoid overloading of 'error'


On Wednesday 10 June 2015 14:20:51 Koehne Kai wrote:
> Hi,
>
> I'm currently converting a codebase from old-style connects to new-style
> ones. Thanks to Qt Creator's refactoring support this is actually quite
> easy ... it gets ugly though when either the signal or slot method name is
> overloaded, and you have to write nice code like
>
>       connect(&process, static_cast<void
> (QProcess::*)(QProcess::ProcessError)>(&QProcess::Error), this,
> &MyClass::processError);
>
> There can be done little to avoid this in general, but actually the
> overloading of 'error' stands out: E.g. QProcess, QNetworkReply,
> QNetworkSession, QAbstractSocket all feature both an error() signal and an
> error() accessor.
>
> Ideas how to mitigate this:
>
> 1. We could deprecate the error() signal, and add a failed() signal (still
> in Qt 5).
> 2. We could rename error() accessor to lastError() in Qt 6.
> 3. <your idea goes here>
>
> Comments?

I like both 1 and 2.

"error" isn't a verb in the past, so it's a bad name for a signal. "failed" or
another construct with a verb in the past is better. Even "errorEncountered"
would be fine.

Changing "error" to "lastError" for the getter also makes sense, since it
clearly indicates that it's the last error that happened. If no error
happened, then this function may or may not return anything intetersting. But
if you rename that function, you should also rename errorString to
lastErrorString.

So I recommend we begin the shift now in 5.6 and deprecate the old methods, to
be removed in 6.0.

As for the implementation, please connect one signal to the other, so we don't
need to duplicate the emissions. But note that there will be an delivery order
problem: all slots connected to one signal will be received before all slots
connected to the other. Unless Olivier adds a signal alias feature to moc :-)

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center

_______________________________________________
Development mailing list
Development at qt-project.org
http://lists.qt-project.org/mailman/listinfo/development

From frederik.gladhorn at theqtcompany.com  Wed Jun 10 18:30:34 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Wed, 10 Jun 2015 18:30:34 +0200
Subject: [Development] Specifying module dependencies
Message-ID: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>

Hi all,

when talking about how we manage dependencies in the CI system, an interesting
pain point came up during the contributors' summit:

We have several redundant overlapping, not very clear ways of specifying a
module's dependencies. Optional deps make it harder.

I'll list the 5 options I know of below. My question is, can we agree on
something less hidden, with simple syntax that can be used by both qmake and
the CI system.

For the CI system, we can parse pretty much anything, of course we don't want
to implement a qmake copy...
A sensible compromise might be JSON since afaict qmake eats that.

Greetings,
Frederik


What we currently have (probably incomplete):

1) sync.profile
A file in each module that allows specifying dependencies in terms of git
modules (including sha1s), perl syntax. Used by syncqt for public headers but
also has a section like this (qtdeclarative):
# Module dependencies.
# Every module that is required to build this module should have one entry.
# Each of the module version specifiers can take one of the following values:
#   - A specific Git revision.
#   - any git symbolic ref resolvable from the module's repository (e.g.
"refs/heads/master" to track master branch)
#   - an empty string to use the same branch under test (dependencies will
become "refs/heads/master" if we are in the master branch)
#
%dependencies = (
        "qtbase" => "",
        "qtxmlpatterns" => "",
);


2) qt_modulename_.pro
sometimes things seem to be excluded here, e.g. qtserialport has:
requires(!winrt)

3) module/src/src.pro
example qtwinextras and others:
win32 {
    TEMPLATE = subdirs
    CONFIG += ordered
    SUBDIRS += winextras
    qtHaveModule(quick): SUBDIRS += imports
} else {
    # fake project for creating the documentation
    TEMPLATE = aux
    QMAKE_DOCS = $$PWD/winextras/doc/qtwinextras.qdocconf
}

4) qt5.git
in qt.pro we list all modules again, with deps:
addModule(qtdeclarative, qtbase, qtsvg qtxmlpatterns)
(amusingly this is not even correct, qtsvg is not a dependency of
qtdeclarative any more)

5) I don't even understand how qtwebengine does it to not build for
Android/iOS...


From thiago.macieira at intel.com  Wed Jun 10 18:42:03 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 10 Jun 2015 09:42:03 -0700
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <20150610151406.5693520.88469.26350@theqtcompany.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<13279726.762LyY3m5A@tjmaciei-mobl4>
	<20150610151406.5693520.88469.26350@theqtcompany.com>
Message-ID: <1850319.Fy9dAWxNW7@tjmaciei-mobl4>

On Wednesday 10 June 2015 15:14:07 Hausmann Simon wrote:
> Hi,
>
> I think renaming the getter to lastError is nice! I however do like error as
> signal name and it looks good in qml as onError:...

"onError" screams of Basic to me...
	ON ERROR GO SUB foo
or worse
	ON ERROR RESUME

I don't mind the getter still being named "error" because it's a noun and we
name our properties (and thus the getters) after nouns.

The problem is the signal: the coding style is that signals are named after
verbs in the past, indicating that something happened. "error" has no verb in
the past. Even "errored" would be better, though that's unusual.

I think "error" + verb in the past is best, so here are my suggestions, in no
particular order:

	errorHappened
	errorCaught
	errorEncountered
	errorOccurred		(people will get the double r wrong)
					https://en.wiktionary.org/wiki/occured
	errorFound
	errorDetected
	errorDiscovered
	errorNoticed
	errorSeen
	errorObserved

alternatively, with the verb in the active:

	caughtError
	foundError
	detectedError
	discoveredError
	noticedError
	sawError
	observedError

If I break out the thesaurus, then we also have

	errorBefell
	errorCameAbout
	errorTookPlace
	errorMaterialized
	errorRemarked		(reminds me of [1])
	ranIntoError
	ranAcrossError
	cameAcrossError
	remarkedError
	chancedUponError	(even more so!)
	pickedUpError

[1] https://www.addedbytes.com/blog/if-php-were-british/
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Wed Jun 10 18:44:12 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 10 Jun 2015 09:44:12 -0700
Subject: [Development] Specifying module dependencies
In-Reply-To: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>
Message-ID: <11566590.yvz3mEnJq3@tjmaciei-mobl4>

On Wednesday 10 June 2015 18:30:34 Frederik Gladhorn wrote:
> 4) qt5.git
> in qt.pro we list all modules again, with deps:
> addModule(qtdeclarative, qtbase, qtsvg qtxmlpatterns)
> (amusingly this is not even correct, qtsvg is not a dependency of
> qtdeclarative any more)

That's an optional dependency.

Note that the qt.pro file allows us to do the full build, so unless we teach
qmake to parse any other sources, we'll need to keep it.

That said, I don't think qt.pro should keep SHA-1 of pinned revisions, so
we'll need something else anyway.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From 416365416c at gmail.com  Wed Jun 10 18:59:32 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Wed, 10 Jun 2015 09:59:32 -0700
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <20150610151406.5693520.88469.26350@theqtcompany.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<13279726.762LyY3m5A@tjmaciei-mobl4>
	<20150610151406.5693520.88469.26350@theqtcompany.com>
Message-ID: <CALX7-s4=XfgUanzsXrZzDuMDGafvCYCrmBnnFY4PJ+RFkm73sw@mail.gmail.com>

On Wed, Jun 10, 2015 at 8:14 AM, Hausmann Simon
<Simon.Hausmann at theqtcompany.com> wrote:
> Hi,
>
> I think renaming the getter to lastError is nice! I however do like error as signal name and it looks good in qml as onError:...

I disagree that it looks good in QML as onError, almost all other
signal handlers are past tense so it is visibly odd. But it's nice to
be so short, so maybe a direct past-tense-ify of "onErrored"? If you
don't like using error as a verb, we can use a similar (yet shorter)
verb: "onErred". Not that I really mind the exact name of the new
signal.

--
Alan Alpert

From mw_triad at users.sourceforge.net  Wed Jun 10 19:55:01 2015
From: mw_triad at users.sourceforge.net (Matthew Woehlke)
Date: Wed, 10 Jun 2015 13:55:01 -0400
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
Message-ID: <ml9tlm$ken$1@ger.gmane.org>

On 2015-06-10 10:20, Koehne Kai wrote:
> Hi,
>
> I'm currently converting a codebase from old-style connects to new-style ones. Thanks to Qt Creator's refactoring support this is actually quite easy ... it gets ugly though when either the signal or slot method name is overloaded, and you have to write nice code like
>
> 	connect(&process, static_cast<void (QProcess::*)(QProcess::ProcessError)>(&QProcess::Error), this, &MyClass::processError);

Not exactly what you were getting at, but relating to the overloaded
signals/slots problem in general:

  template <class... Args, class T, class R>
  auto qOverload(R (T::*m)(Args...)) -> decltype(m)
  { return m; }

  connect(&process, qOverload<QProcess::ProcessError>(&QProcess::error),
          this, &MyClass::processError);

In pre-C++11 you can write out explicit flavors for up to however many
arguments you need. Not sure if you can still get return type deduction
that way, though. (I mean in the template argument list... you'd have to
spell out the return type in the helper declaration, obviously.)

--
Matthew


From Simon.Hausmann at theqtcompany.com  Wed Jun 10 20:47:49 2015
From: Simon.Hausmann at theqtcompany.com (Hausmann Simon)
Date: Wed, 10 Jun 2015 18:47:49 +0000
Subject: [Development] Specifying module dependencies
In-Reply-To: <11566590.yvz3mEnJq3@tjmaciei-mobl4>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>,
	<11566590.yvz3mEnJq3@tjmaciei-mobl4>
Message-ID: <20150610184747.5693520.73529.26374@theqtcompany.com>

Hi,

Why do we need to pin anything beyond the regular git submodules handling of qt5.git (where the information is in the tree object)?

In think we should have a configuration file in each module listing required and optional dependencies. Qt.pro can interpret that file and so can the CI system. To the CI system the optional dependencies are also required ones.

Simon

  Original Message
From: Thiago Macieira
Sent: Wednesday, June 10, 2015 18:44
To: development at qt-project.org
Subject: Re: [Development] Specifying module dependencies


On Wednesday 10 June 2015 18:30:34 Frederik Gladhorn wrote:
> 4) qt5.git
> in qt.pro we list all modules again, with deps:
> addModule(qtdeclarative, qtbase, qtsvg qtxmlpatterns)
> (amusingly this is not even correct, qtsvg is not a dependency of
> qtdeclarative any more)

That's an optional dependency.

Note that the qt.pro file allows us to do the full build, so unless we teach
qmake to parse any other sources, we'll need to keep it.

That said, I don't think qt.pro should keep SHA-1 of pinned revisions, so
we'll need something else anyway.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center

_______________________________________________
Development mailing list
Development at qt-project.org
http://lists.qt-project.org/mailman/listinfo/development

From steveire at gmail.com  Wed Jun 10 21:03:32 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Wed, 10 Jun 2015 21:03:32 +0200
Subject: [Development] Some Qt3D feedback
References: <ml2j2r$eg3$1@ger.gmane.org> <2646160.nJGqpQo0xz@cartman>
Message-ID: <mla1m4$1bk$1@ger.gmane.org>

Sean Harmer wrote:

>> 1) The include/Qt3DCore/Window file doesn't have a Q prefix.
>>
>> as every other header does. Should probably be Qt3DWindow.
>
> Right, this actually needs removing and something temporary putting in
> place in the examples for now.

> I'll try to tidy up and move the existing Window thing to the examples
> later today or tomorrow.

It looks like it's still there. Is it going to be released like that?

Would it be useful to request an API review for this new module at this
point? I don't know if there are other new modules in Qt 5.5.

>> 2) A private header is included in a public header:
>>
>>  include/Qt3DCore$ grep private/ *.h
>>  qaspectjobmanager.h:#include <Qt3DCore/private/qt3dcore_global_p.h>
>>
>> This is concerning - Don't we have a unit test preventing that?

Thanks for the fix.

Actually I assumed the headersclean test would catch this, but I guess it
does not try to catch this case. The cmake test will catch this case if the
cmake test is enabled, and even then only for the headers included by the
class under test, so not enough coverage.

It might be good to extend headersclean for this case or add a new different
test for it.

>> 5) Qt3D namespace
>>
>> This is the first time that all classes in a library are in a namespace.
>> Previously only enums (in various modules) and free functions (in
>> QtConcurrent) have been put in namespaces.
>>
>> In QtConcurrent, the module name also appears in the header file, but
>> that is not followed by Qt3D libraries.
>>
>> Given that Qt has never put classes in a namespace like this, is there
>> something to be consistent about here?
>>
>> 6) QParameter is a very generic name
>>
>> I realise it is in a namespace, but still...
>>
>> Qt3DParamter might be better *and* more consistent. Similar applies to
>> other classes.
>
> It's precisely because of these kinds of issues that we decided to use
> namespaces in Qt3D rather than the poor-man's prefix name spacing.

I don't understand what you wrote. I assume when you wrote 'these kinds of
issues' you didn't mean that "better *and* more consistent" are the 'kinds
of issues'. What do you mean?

I would encourage a discussion of why this module needs namespaces when the
rest of Qt gets by without them. There is certainly a consistency angle.
Should all new modules use a namespace? Should the namespace correspond to
the name of the repo the library it's in? Or should there be a namespace per
library?

> If it's required to not use namespaces to be part of the Qt project then
> we can of course change it. However, I would argue against doing so,
> especially in the light of being able to use some more modern C++ features
> in upcoming QT versions.

I don't know. As far as I know deciding to use a namespace for this one was
done without discussion on the mailing list?

I'm encouraging discussion such as on the questions I raised above.

You're introducing inconsistency, so how will things be made consistent
again in the future? What is the direction? What is the policy? What is done
for new modules? What should be done for Qt 6? Everything in different
namespaces? Or everything in a Qt6:: namespace? Or multiple namespaces?
Qt6::Core::QString? Do you aim to see

 using namespace Qt6::Core;
 using namespace Qt6::Gui;
 using namespace Qt6::Network;
 using namespace Qt6::3D;

at the top of most translation units using Qt, as one sometimes sees for
boost use? Is that the future of what Qt-using code will look like? Do you
find Qt3D code readable without the Qt3D:: prefix? I don't know as I haven't
written any. Do you discourage or encourage the use of

 using namespace Qt3D;

?

All I know is that we now have inconsistency with this new module.

Then again, if anyone else on this mailing list thinks namespace consistency
is relevant for Qt, they can also chime in. As they've not done so here, we
can probably assume the community vibe is that namespace consistency isn't
something to create or look for in Qt at this time.

You can start a thread/discussion if you wish :). I'm mostly curious what
you think this means for the rest of Qt and the future of Qt.

> Name spaces are supported everywhere these days
> so why not just use them, especially in a new add-on module?

I don't know that that was ever the reason Qt doesn't put everything in a
namespace. If it was we would have changed it for Qt 5.0.

>> I saw one method documented in qparameter.h instead of in the cpp and I
>> didn't look for more.
>
> The docs need a lot of work. I have some time set aside for doc writing
> this week and will do a clean up pass for such issues.

Cool. Having docs in headers doesn't create API or other release-relevant
issues anyway.

Thanks,

Steve.



From steveire at gmail.com  Wed Jun 10 21:09:15 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Wed, 10 Jun 2015 21:09:15 +0200
Subject: [Development] Some Qt3D feedback
References: <ml2j2r$eg3$1@ger.gmane.org> <2646160.nJGqpQo0xz@cartman>
	<mla1m4$1bk$1@ger.gmane.org>
Message-ID: <mla20r$1bk$3@ger.gmane.org>

Stephen Kelly wrote:

> Sean Harmer wrote:
>
>>> 1) The include/Qt3DCore/Window file doesn't have a Q prefix.
>>>
>>> as every other header does. Should probably be Qt3DWindow.
>>
>> Right, this actually needs removing and something temporary putting in
>> place in the examples for now.
>
>> I'll try to tidy up and move the existing Window thing to the examples
>> later today or tomorrow.
>
> It looks like it's still there. Is it going to be released like that?

Sorry, I didn't mean for this to sound like this.

I just can't tell from what you wrote, and from the schedule Jani is
sticking to, whether this is a release blocker or not.

Is installation of unprefixed headers a release blocker?

Thanks,

Steve.



From steveire at gmail.com  Wed Jun 10 21:06:59 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Wed, 10 Jun 2015 21:06:59 +0200
Subject: [Development] Some Qt3D feedback
References: <ml2j2r$eg3$1@ger.gmane.org> <2646160.nJGqpQo0xz@cartman>
	<mla1m4$1bk$1@ger.gmane.org>
Message-ID: <mla1sj$1bk$2@ger.gmane.org>

Stephen Kelly wrote:

> Sean Harmer wrote:
>
>>> 1) The include/Qt3DCore/Window file doesn't have a Q prefix.
>>>
>>> as every other header does. Should probably be Qt3DWindow.
>>
>> Right, this actually needs removing and something temporary putting in
>> place in the examples for now.
>
>> I'll try to tidy up and move the existing Window thing to the examples
>> later today or tomorrow.
>
> It looks like it's still there. Is it going to be released like that?

Sorry, I didn't mean for this to sound like this.

I just can't tell from what you wrote, and from the schedule Jani is
sticking to, whether this is a release blocker or not.

Is installation of unprefixed headers a release blocker?

Thanks,

Steve.



From thiago.macieira at intel.com  Wed Jun 10 21:25:11 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 10 Jun 2015 12:25:11 -0700
Subject: [Development] Some Qt3D feedback
In-Reply-To: <mla20r$1bk$3@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org> <mla1m4$1bk$1@ger.gmane.org>
	<mla20r$1bk$3@ger.gmane.org>
Message-ID: <2007984.9MsIpGnYnQ@tjmaciei-mobl4>

On Wednesday 10 June 2015 21:09:15 Stephen Kelly wrote:
> Is installation of unprefixed headers a release blocker?

Yes. Because the buildsystem will add -I$QTINCDIR/Qt3D, so #include <Window>
will find it, possibly clobbering other includes with the name.

So this is a release blocker.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Wed Jun 10 21:26:48 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 10 Jun 2015 12:26:48 -0700
Subject: [Development] Specifying module dependencies
In-Reply-To: <20150610184747.5693520.73529.26374@theqtcompany.com>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>
	<11566590.yvz3mEnJq3@tjmaciei-mobl4>
	<20150610184747.5693520.73529.26374@theqtcompany.com>
Message-ID: <1972171.Sf34UoKY6U@tjmaciei-mobl4>

On Wednesday 10 June 2015 18:47:49 Hausmann Simon wrote:
> Hi,
>
> Why do we need to pin anything beyond the regular git submodules handling of
> qt5.git (where the information is in the tree object)?

We used to. Whether we still need to do that in the new CI, you tell me.

> In think we should have a configuration file in each module listing required
> and optional dependencies. Qt.pro can interpret that file and so can the CI
> system. To the CI system the optional dependencies are also required ones.

Fair enough, then it needs to be a simple file format. Not JSON, not PSON, etc.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From Simon.Hausmann at theqtcompany.com  Wed Jun 10 21:33:37 2015
From: Simon.Hausmann at theqtcompany.com (Hausmann Simon)
Date: Wed, 10 Jun 2015 19:33:37 +0000
Subject: [Development] Specifying module dependencies
In-Reply-To: <1972171.Sf34UoKY6U@tjmaciei-mobl4>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>
	<11566590.yvz3mEnJq3@tjmaciei-mobl4>
	<20150610184747.5693520.73529.26374@theqtcompany.com>,
	<1972171.Sf34UoKY6U@tjmaciei-mobl4>
Message-ID: <20150610193336.5693520.30023.26386@theqtcompany.com>

Hi,

Yeah, we used that when we tried to pin reverse dependencies, something we're not doing anymore.

Any particular reason against json, btw? Qmake can read it out of the box, as opposed to .ini. So the only other option I can think of is a very very limited qmake subset (variable.subvar = value per line and # comment).


Simon

  Original Message
From: Thiago Macieira
Sent: Wednesday, June 10, 2015 21:27
To: development at qt-project.org
Subject: Re: [Development] Specifying module dependencies


On Wednesday 10 June 2015 18:47:49 Hausmann Simon wrote:
> Hi,
>
> Why do we need to pin anything beyond the regular git submodules handling of
> qt5.git (where the information is in the tree object)?

We used to. Whether we still need to do that in the new CI, you tell me.

> In think we should have a configuration file in each module listing required
> and optional dependencies. Qt.pro can interpret that file and so can the CI
> system. To the CI system the optional dependencies are also required ones.

Fair enough, then it needs to be a simple file format. Not JSON, not PSON, etc.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center

_______________________________________________
Development mailing list
Development at qt-project.org
http://lists.qt-project.org/mailman/listinfo/development

From thiago.macieira at intel.com  Wed Jun 10 22:21:16 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 10 Jun 2015 13:21:16 -0700
Subject: [Development] Specifying module dependencies
In-Reply-To: <20150610193336.5693520.30023.26386@theqtcompany.com>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>
	<1972171.Sf34UoKY6U@tjmaciei-mobl4>
	<20150610193336.5693520.30023.26386@theqtcompany.com>
Message-ID: <1721825.BxG8DpqjMT@tjmaciei-mobl4>

On Wednesday 10 June 2015 19:33:37 Hausmann Simon wrote:
> Any particular reason against json, btw? Qmake can read it out of the box,
> as opposed to .ini. So the only other option I can think of is a very very
> limited qmake subset (variable.subvar = value per line and # comment).

Didn't know that, but qmake .pri file is even simpler.

http://doc.qt.io/qt-5/qmake-function-reference.html#fromfile-filename-variablename
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From 416365416c at gmail.com  Wed Jun 10 22:23:09 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Wed, 10 Jun 2015 13:23:09 -0700
Subject: [Development] [QtCS] QtRemoteObjects Session Summary
In-Reply-To: <2030608.WcmVyIMcUm@simon-sx58>
References: <CALX7-s7sbB0Gpb_7M-B__tWGAtB75K3xbdQR6izaDihNmqP0xw@mail.gmail.com>
	<2030608.WcmVyIMcUm@simon-sx58>
Message-ID: <CALX7-s7BLR3jjwnRn02r1oHVzOtbaLxOVDMyg3EshEmH=eQQMQ@mail.gmail.com>

On Wed, Jun 10, 2015 at 6:52 AM, Simon Hausmann
<simon.hausmann at theqtcompany.com> wrote:
> On Tuesday, June 09, 2015 01:23:29 PM Alan Alpert wrote:
>> There was late-scheduled session on QtRemoteObjects at QtCS on
>> Saturday. QtRemoteObjects is a playground module for object remoting
>> of QObjects, and can be found at
>> http://code.qt.io/cgit/playground/qtremoteobjects.git/ .
>>
>> A brief overview of the existing features:
>> -Exports QObjects remotely, creates a replicant on the client side you
>> can interface with
>> -Network nodes can serve as a registry to allow lookup by name.
>> -Transport Layer Adapters
>> -Bjoern is currently working on exporting of QAbstractItemModels
>>
>> A brief overview of planned features:
>> -QML API
>> -Protocol Layer Adapters
>> -Investigate merge with QWebChannel (sounds similar, of course no-one
>> working on QWebChannel was present to confirm).
>>
>> After it is established with those features and solid quality, it
>> could be considered to promote it to an add-on module.
>>
>> The idea with protocol adapters is that currently it only sends
>> QDataStream output over the wire. I want to send more accessible
>> JSON-RPC (like) data over the wire for working with node, and Attila
>> had a demo of getting object data from Meteor (although that was
>> custom hacked for demo purposes). Protocol adapters will allow you to
>> serialize it in these other forms, and that is the mechanism by which
>> we gain compatibility with other languages/frameworks without them
>> needing explicit QRO support - We'll talk their language if there
>> exists compatible semantics. They'll probably remain separate from the
>> transport adapters, but we'll see how the implementation develops.
>> I'll start looking into the implementation this month.
>>
>> The question was raised "How is this not CORBA?". I'm not that
>> familiar with CORBA (just read the wikipedia article today), but my
>> suspicion is that we've cut out a lot of the boiler-plate by
>> leveraging existing Qt Meta-object information.
>
> I don't suspect that this is the CORBA criticism. I mean, it's a fair point
> that you often do end up with boiler plate translating type systems, but
> that's mostly a matter of good IDL bindings.
>
> No, the criticism I would have regarding CORBA or at least the way you may
> quickly end up using it is that it hides something that shouldn't be hidden:
> Failures.
>
> When working with "remote" services things _will_ go wrong. There will be
> issues with your connection, there will be issues with the remote side not
> responding (having crashed for example), there will be many such issues. You
> don't see them when developing the system, but during real world deployment
> you run into them, and then it's too late. During development you haven't
> encountered those issues, so your code that calls methods and reads/writes
> properties is written as if it works locally, because it did during your
> testing. Systems like CORBA encourage developers to write code as if the
> method calls were local, completely ignoring the nature of unreliable
> transports and services.
>
> I feel that mistake is made over and over again in many similar designs. It is
> perhaps one area where the web development is doing better. It's my (perhaps
> incorrect?) impression that web services tend to be accessed using more
> explicit code instead of using transparent method calls or property access.
> The XMLHttpRequest API is one example here, and the promises based fetch() API
> makes this even better IMHO.

This is attempted to be addressed (at least from the QML API) by
having explicit node objects. It can have error handling and state
communication (still to be designed), and fall-back mechanisms like
default values. I agree error handling shouldn't be hidden entirely,
but I would also say that it's still an area where we want to make
developer's lives easier with pre-built common-case logic.

We already have the XMLHttpRequest API for distributed systems. The
point of QRO, as I see it, is something more convenient and more
pre-made by comparison.

>
> The other aspect that I think is crucial in a distributed system is
> compatibility. This is why systems like thrift and protocol buffers exist:
> They provide type safety (!) and make it really easy to maintain wire
> compatibility. JSON is also "okay" with this, but it has the huge disadvantage
> that usually json formats are "untyped".
>

Anything you think our transport and protocol layer adapters is
missing in this respect? Even if we first have to write a protocol
layer adapter for each piece of compatibility we want, I imagine we
could eventually hit upon a suitably general (yet performant) protocol
adapter which can become standard.

> In my opinion a system that we promote to Qt developers should learn from
> these "mistakes" in the past: The API should encourage developers to write
> fault tolerant code (because distributed systems _do_ fail) and it should be
> easy to maintain wire compatibility (just like we do maintain binary
> compatibility).

I'll try to remember to add you as an API reviewer, so we can learn
from your experience with these mistakes.

--
Alan Alpert

From Simon.Hausmann at theqtcompany.com  Wed Jun 10 22:32:07 2015
From: Simon.Hausmann at theqtcompany.com (Hausmann Simon)
Date: Wed, 10 Jun 2015 20:32:07 +0000
Subject: [Development] Specifying module dependencies
In-Reply-To: <1721825.BxG8DpqjMT@tjmaciei-mobl4>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>
	<1972171.Sf34UoKY6U@tjmaciei-mobl4>
	<20150610193336.5693520.30023.26386@theqtcompany.com>,
	<1721825.BxG8DpqjMT@tjmaciei-mobl4>
Message-ID: <20150610203206.5693520.9858.26394@theqtcompany.com>

Hi,

Ok :) let's try with reduced qmake syntax (just variables, no functions). We can still fall back to json if it's too clumsy.

I certainly prefer qmake syntax from an editing POV because I don't need to quote everything like crazy :)


Simon

  Original Message
From: Thiago Macieira
Sent: Wednesday, June 10, 2015 22:21
To: development at qt-project.org
Subject: Re: [Development] Specifying module dependencies


On Wednesday 10 June 2015 19:33:37 Hausmann Simon wrote:
> Any particular reason against json, btw? Qmake can read it out of the box,
> as opposed to .ini. So the only other option I can think of is a very very
> limited qmake subset (variable.subvar = value per line and # comment).

Didn't know that, but qmake .pri file is even simpler.

http://doc.qt.io/qt-5/qmake-function-reference.html#fromfile-filename-variablename
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center

_______________________________________________
Development mailing list
Development at qt-project.org
http://lists.qt-project.org/mailman/listinfo/development

From 416365416c at gmail.com  Wed Jun 10 23:19:04 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Wed, 10 Jun 2015 14:19:04 -0700
Subject: [Development] Qt 5.5.0 QML Revision Check
In-Reply-To: <CALX7-s7bYQmAia5ob+nMnUo7RbykdeXO+VHdo6DQZh7B4Mu+Sg@mail.gmail.com>
References: <CALX7-s7bYQmAia5ob+nMnUo7RbykdeXO+VHdo6DQZh7B4Mu+Sg@mail.gmail.com>
Message-ID: <CALX7-s4K8_AUwhQ4o-H74iyf8uSt3OH0xEoJ9csm_YUWu8MbDA@mail.gmail.com>

On Wed, Jun 10, 2015 at 1:04 AM, Alan Alpert <416365416c at gmail.com> wrote:
> I have run qmlRevCheck between the 5.4 and 5.5.0 branches, for the
> imports in qtdeclarative/src/imports. Results are attached. Results
> come from generating and parsing new qmltypes files from each branch,
> and comparing them with the qmlRevCheck tool
> (https://codereview.qt-project.org/#/c/114038/ is the updated version
> to build these days).
>
> I won't have time to properly look through the results until tomorrow,
> but there is one key thing to note in the output. qmlplugindump
> -builtins will spit out QtQuick types in 5.4, but in 5.5 it's a
> separate file (from qmplugindump -nonrelocatable QtQuick 2.5). I
> compared the 5.4 file to each of the two 5.5 files separately in the
> two output files. But it's a lot of noise, and I'm not quite awake
> enough to filter it out right now.

Okay, the analysis of the qmltypes diff shows the following issues:

1) c07f5b801bd6a94fe862073eb1f1965115a56385 (qtbase) adds a
transitionType property to QAbstractTransition without versioning it.
2) 44ab79012f1662a4efa7c506b6ebc4466c50b3e9 (qtdeclarative) adds
scrollGestureEnabled property to MouseArea without versioning it.

Fixes for these should probably be rushed in to 5.5.0 if we still can,
given they will probably miss the RC. I can help draft those.

3) 40f394ef2e06a6466445e4df54735250939084f0 (qtdeclarative) adds
width/height properties to the Window attached object without
versioning it
4) dad48f0e9cca10528fcaab7ec7d08f678e81b1a9 (qtdeclarative) adds
getDataAsArrayBuffer method to DropEvent without versioning it.

It probably isn't worth rushing the fix in for these, since there's no
real way to collide with new names on attached properties or event
types. Consider yourselves chastised and we'll move on.

5) qmlplugindump is acting up as explained before on the builtins.

I'm inclined to just leave it for 5.5.0. I prefer the new behavior,
but sorting out the differences in the qmltypes file isn't something
to rush through. I advocate splitting QtQuick out into a new qmltypes
file, we can get that done for 5.5.1 or even 5.5.2 so long as it's
ready to check cleanly for 5.5 -> 5.6.

Also detected: the new Shortcut type in QtQuick is properly versioned,
hurrah! Well done JP.

--
Alan Alpert

From 416365416c at gmail.com  Thu Jun 11 01:32:04 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Wed, 10 Jun 2015 16:32:04 -0700
Subject: [Development] New Qt5.5.0-RC snapshot available
In-Reply-To: <AM2PR02MB0564A90FB9FC3EAA550FE3379EBD0@AM2PR02MB0564.eurprd02.prod.outlook.com>
References: <DB3PR02MB0540869090D2B2D31D7B2477E4BF0@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<CALX7-s4-jmxqdsSfBZ3efyK02+tEH29WNdDvE8tQ0p=ZwL4q1Q@mail.gmail.com>
	<AM2PR02MB0564A90FB9FC3EAA550FE3379EBD0@AM2PR02MB0564.eurprd02.prod.outlook.com>
Message-ID: <CALX7-s4KcC6Z0V2w0z=0k7up=iRhuhsRytoRHWfkp2VXPwuwPw@mail.gmail.com>

On Tue, Jun 9, 2015 at 11:45 PM, Blasche Alexander
<alexander.blasche at theqtcompany.com> wrote:
>
>> I just went through the git log to confirm. There is nothing of
>> interest to put in the changelog for QtQuick1 or QtScript (I'd be
>> surprised if I found otherwise). Do you really need an empty file
>> there?
>
> I'd say yes. It is information for our customers. No file doesn't tell the difference between "no difference worthwhile mentioning" and "we forgot to provide the information".
> Unfotunately our track record would be an indication for the latter.
>
> I suggest to add a changelog with the usual header and as actual content "No changes" or sth similar.

I don't think we've done that before. QtScript has had no changelog
since 5.1.1. QtQuick1 has had one changelog (5.3.0, fixed an important
bug it seems) since 5.1.1.

Given the status of those modules, our track record is indicating the
former (at least to me).

--
Alan Alpert

From szehowe.koh at gmail.com  Thu Jun 11 02:07:14 2015
From: szehowe.koh at gmail.com (Sze Howe Koh)
Date: Thu, 11 Jun 2015 08:07:14 +0800
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <CALX7-s4=XfgUanzsXrZzDuMDGafvCYCrmBnnFY4PJ+RFkm73sw@mail.gmail.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<13279726.762LyY3m5A@tjmaciei-mobl4>
	<20150610151406.5693520.88469.26350@theqtcompany.com>
	<CALX7-s4=XfgUanzsXrZzDuMDGafvCYCrmBnnFY4PJ+RFkm73sw@mail.gmail.com>
Message-ID: <CALW8pfWoH0Ntchvu+SHcduL2eEmQUmJZncvXBUmaOTWiz9EOLg@mail.gmail.com>

On 11 June 2015 at 00:59, Alan Alpert <416365416c at gmail.com> wrote:
> On Wed, Jun 10, 2015 at 8:14 AM, Hausmann Simon
> <Simon.Hausmann at theqtcompany.com> wrote:
>> Hi,
>>
>> I think renaming the getter to lastError is nice! I however do like error as signal name and it looks good in qml as onError:...
>
> I disagree that it looks good in QML as onError, almost all other
> signal handlers are past tense so it is visibly odd. But it's nice to
> be so short, so maybe a direct past-tense-ify of "onErrored"? If you
> don't like using error as a verb, we can use a similar (yet shorter)
> verb: "onErred". Not that I really mind the exact name of the new
> signal.

I'm with Alan and Thiago on making it past tense.

I personally like "errored". It hasn't yet gained widespread
acceptance as a verb in general, [1] but it seems widespread enough in
the computing industry.

On a related note, the "Component" type has a signal called
"destruction". A better signal name is "destroyed", which corresponds
with QObject::destroyed(). [2]

I'm guessing that the QML authors designed these around the signal
handler's name (rather than the signal's name). I think "onError" and
"onDestruction" look fine _by themselves_, but not when we consider
the other signals in Qt, which are verbs in past tense. Ideally, both
C++ and QML should use the same conventions. A simple and consistent
API is one of Qt's attractive features.


Regards,
Sze-Howe

[1] There's a lively discussion at
http://english.stackexchange.com/questions/3059/is-errored-correct-usage
with supporters on both sides.
[2] Well actually, both the QML and C++ the signals are emitted BEFORE
the object is destroyed... but that's a separate topic.

From 416365416c at gmail.com  Thu Jun 11 03:59:31 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Wed, 10 Jun 2015 18:59:31 -0700
Subject: [Development] Qt 5.5.0 QML Revision Check
In-Reply-To: <CALX7-s4K8_AUwhQ4o-H74iyf8uSt3OH0xEoJ9csm_YUWu8MbDA@mail.gmail.com>
References: <CALX7-s7bYQmAia5ob+nMnUo7RbykdeXO+VHdo6DQZh7B4Mu+Sg@mail.gmail.com>
	<CALX7-s4K8_AUwhQ4o-H74iyf8uSt3OH0xEoJ9csm_YUWu8MbDA@mail.gmail.com>
Message-ID: <CALX7-s77TvJ1-oxRc75=EMC3c_1E65roZx8W04VgArWz-Q25cA@mail.gmail.com>

On Wed, Jun 10, 2015 at 2:19 PM, Alan Alpert <416365416c at gmail.com> wrote:
> On Wed, Jun 10, 2015 at 1:04 AM, Alan Alpert <416365416c at gmail.com> wrote:
>> I have run qmlRevCheck between the 5.4 and 5.5.0 branches, for the
>> imports in qtdeclarative/src/imports. Results are attached. Results
>> come from generating and parsing new qmltypes files from each branch,
>> and comparing them with the qmlRevCheck tool
>> (https://codereview.qt-project.org/#/c/114038/ is the updated version
>> to build these days).
>>
>> I won't have time to properly look through the results until tomorrow,
>> but there is one key thing to note in the output. qmlplugindump
>> -builtins will spit out QtQuick types in 5.4, but in 5.5 it's a
>> separate file (from qmplugindump -nonrelocatable QtQuick 2.5). I
>> compared the 5.4 file to each of the two 5.5 files separately in the
>> two output files. But it's a lot of noise, and I'm not quite awake
>> enough to filter it out right now.
>
> Okay, the analysis of the qmltypes diff shows the following issues:
>
> 1) c07f5b801bd6a94fe862073eb1f1965115a56385 (qtbase) adds a
> transitionType property to QAbstractTransition without versioning it.
> 2) 44ab79012f1662a4efa7c506b6ebc4466c50b3e9 (qtdeclarative) adds
> scrollGestureEnabled property to MouseArea without versioning it.
>
> Fixes for these should probably be rushed in to 5.5.0 if we still can,
> given they will probably miss the RC. I can help draft those.

1) https://codereview.qt-project.org/#/c/114141/
2) https://codereview.qt-project.org/#/c/114140/

These are the necessary changes. If they can't get into 5.5.0 we may
as well just cancel them, the damage will have been done by then.

--
Alan Alpert

From bstottle at ford.com  Thu Jun 11 04:21:22 2015
From: bstottle at ford.com (Stottlemyer, Brett (B.S.))
Date: Thu, 11 Jun 2015 02:21:22 +0000
Subject: [Development] [QtCS] QtRemoteObjects Session Summary
In-Reply-To: <CALX7-s7BLR3jjwnRn02r1oHVzOtbaLxOVDMyg3EshEmH=eQQMQ@mail.gmail.com>
References: <CALX7-s7sbB0Gpb_7M-B__tWGAtB75K3xbdQR6izaDihNmqP0xw@mail.gmail.com>
	<2030608.WcmVyIMcUm@simon-sx58>
	<CALX7-s7BLR3jjwnRn02r1oHVzOtbaLxOVDMyg3EshEmH=eQQMQ@mail.gmail.com>
Message-ID: <D19E5501.230B%bstottle@ford.com>

Hi Alan.  Hi Simon.

On 6/10/15, 4:23 PM, "Alan Alpert" <416365416c at gmail.com> wrote:
>On Wed, Jun 10, 2015 at 6:52 AM, Simon Hausmann
><simon.hausmann at theqtcompany.com> wrote:
>> On Tuesday, June 09, 2015 01:23:29 PM Alan Alpert wrote:
>>> A brief overview of planned features:
>>> -QML API
>>> -Protocol Layer Adapters
>>> -Investigate merge with QWebChannel (sounds similar, of course no-one
>>> working on QWebChannel was present to confirm).
>>>
>>> After it is established with those features and solid quality, it
>>> could be considered to promote it to an add-on module.

I?m the one who talked about QtRO (it was named Replicant at the time) at
last year?s Contributors Summit and requested the playground.  I
definitely like the idea of making it an add-on module, but are you
suggesting it needs protocol layer adapters as a prerequisite?

The additional QML API piece would be welcome, and I?m open to see if
there is benefit to merge/code share with QWebChannel.  I?ve always been
resistant to try to make QtRO play nice with other languages, though.  Of
course that would be fantastic!  No argument there.  But you?ve already
mentioned one of the difficulties - exported abstractitemmodels.  That is
a very Qt specific implementation, with support for QVariant types and
specific roles.  And concrete signals/slots.  It isn?t a matter of simply
passing data to another language (although that is hard enough when it
comes to all the types Qt supports marshaling for already).  Even if you
could pass the data to python or java effectively, how would the receiver
be expected to display the results?

QtRO also supports ?dynamic? objects, where the method, signal and
property signatures are sent over the wire to allow a dynamic metaobject
to be created.  IIRC, even protocol buffers need to be compiled on all
sides, at least in C/C++.  Would this be a feature you would intend to
support in an adapter?

Do you have a good way of doing this without either a) duplicating a lot
of functionality interspersed throughout Qt, or b) adding a tremendous
burden to QtRO?  Again, I like the idea, I just worry about the
implementation cost.

>>> The idea with protocol adapters is that currently it only sends
>>> QDataStream output over the wire. I want to send more accessible
>>> JSON-RPC (like) data over the wire for working with node, and Attila
>>> had a demo of getting object data from Meteor (although that was
>>> custom hacked for demo purposes). Protocol adapters will allow you to
>>> serialize it in these other forms, and that is the mechanism by which
>>> we gain compatibility with other languages/frameworks without them
>>> needing explicit QRO support - We'll talk their language if there
>>> exists compatible semantics. They'll probably remain separate from the
>>> transport adapters, but we'll see how the implementation develops.
>>> I'll start looking into the implementation this month.

I look forward to seeing what you propose.

>> I feel that mistake is made over and over again in many similar
>>designs. It is
>> perhaps one area where the web development is doing better. It's my
>>(perhaps
>> incorrect?) impression that web services tend to be accessed using more
>> explicit code instead of using transparent method calls or property
>>access.
>> The XMLHttpRequest API is one example here, and the promises based
>>fetch() API
>> makes this even better IMHO.
>
>This is attempted to be addressed (at least from the QML API) by
>having explicit node objects. It can have error handling and state
>communication (still to be designed), and fall-back mechanisms like
>default values. I agree error handling shouldn't be hidden entirely,
>but I would also say that it's still an area where we want to make
>developer's lives easier with pre-built common-case logic.

This is how it is currently addressed in C++ as well, although we need to
expose the errors as signals and enhance this area.

>We already have the XMLHttpRequest API for distributed systems. The
>point of QRO, as I see it, is something more convenient and more
>pre-made by comparison.

Indeed.  QtRO makes it trivial to create a Replica of a Qt object in
another process or on another device.  You interact with the Replica just
as you would the original object.  It doesn?t hide errors, but also
doesn?t require overhead for nominal/happy-path behavior.

>> The other aspect that I think is crucial in a distributed system is
>> compatibility. This is why systems like thrift and protocol buffers
>>exist:
>> They provide type safety (!) and make it really easy to maintain wire
>> compatibility. JSON is also "okay" with this, but it has the huge
>>disadvantage
>> that usually json formats are "untyped".
>>
>
>Anything you think our transport and protocol layer adapters is
>missing in this respect? Even if we first have to write a protocol
>layer adapter for each piece of compatibility we want, I imagine we
>could eventually hit upon a suitably general (yet performant) protocol
>adapter which can become standard.

I?m guessing you have a particular adapter in mind to start with.  What is
it?

>> In my opinion a system that we promote to Qt developers should learn
>>from
>> these "mistakes" in the past: The API should encourage developers to
>>write
>> fault tolerant code (because distributed systems _do_ fail) and it
>>should be
>> easy to maintain wire compatibility (just like we do maintain binary
>> compatibility).

Simon - I?m curious if you think D-Bus succeeds or fails in this regard?

Regards,
Brett


From jani.heikkinen at theqtcompany.com  Thu Jun 11 07:59:21 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Thu, 11 Jun 2015 05:59:21 +0000
Subject: [Development] New Qt5.5.0-RC snapshot available
In-Reply-To: <CALX7-s4-jmxqdsSfBZ3efyK02+tEH29WNdDvE8tQ0p=ZwL4q1Q@mail.gmail.com>
References: <DB3PR02MB0540869090D2B2D31D7B2477E4BF0@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<CALX7-s4-jmxqdsSfBZ3efyK02+tEH29WNdDvE8tQ0p=ZwL4q1Q@mail.gmail.com>
Message-ID: <DB3PR02MB0540DF9ED45D2A67E08EE246E4BC0@DB3PR02MB0540.eurprd02.prod.outlook.com>

No, I don't need empty files ;) I didn't check the git log, just checked which ones are missing

Br,
Jani

>>-----Original Message-----
>>From: Alan Alpert [mailto:416365416c at gmail.com]
>>Sent: 10. kes?kuuta 2015 0:08
>>To: Heikkinen Jani
>>Cc: development at qt-project.org; releasing at qt-project.org
>>Subject: Re: [Development] New Qt5.5.0-RC snapshot available
>>
>>On Sun, Jun 7, 2015 at 9:59 PM, Heikkinen Jani
>><jani.heikkinen at theqtcompany.com> wrote:
>>> Hi all,
>>>
>>>
>>> New snapshot for Qt5.5.0 RC available.
>>>
>>> Windows: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-05_79/
>>>
>>> Linux: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-05_101/
>>>
>>> Mac: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-05_83/
>>>
>>>
>>> Content is not the final RC one but should be really near so please inform
>>> me immediately if you find something broken & which should block the
>>> release.
>>>
>>> We are trying to pur RC out this Thursday & final Tue 23.6.2015 so please
>>> don't try to get any nice-to-have's in anymore.
>>>
>>>
>>> Maintainers: For the coming releases please make sure
>>>
>>> - All findings from header diff is fixed today
>>>
>>> - all known issues are listed in https://wiki.qt.io/Qt_5.5.0_Known_Issues
>>>
>>> - Change files are created & found from
>>> https://wiki.qt.io/Change-files-in-Qt-5.5.0#Qt_5.5.0_Change_files
>>>
>>> * Missing:
>>>
>>> ** qtandroidextras:
>>> http://code.qt.io/cgit/qt/qtandroidextras.git/tree/dist/changes-5.5.0?h=5.5.0
>>>
>>> ** qtbase:
>>> http://code.qt.io/cgit/qt/qtbase.git/tree/dist/changes-5.5.0?h=5.5.0
>>>
>>> ** qtconnectivity:
>>> http://code.qt.io/cgit/qt/qtconnectivity.git/tree/dist/changes-5.5.0?h=5.5.0
>>>
>>> ** qtdoc:
>>> http://code.qt.io/cgit/qt/qtdoc.git/tree/dist/changes-5.5.0?h=5.5.0
>>>
>>> ** qtenginio:
>>> http://code.qt.io/cgit/qt/qtenginio.git/tree/dist/changes-1.1.2?h=1.1.2
>>>
>>> ** qtgraphicaleffects:
>>> http://code.qt.io/cgit/qt/qtgraphicaleffects.git/tree/dist/changes-
>>5.5.0?h=5.5.0
>>>
>>> ** qtlocation:
>>> http://code.qt.io/cgit/qt/qtlocation.git/tree/dist/changes-5.5.0?h=5.5.0
>>>
>>> ** qtmacextras:
>>> http://code.qt.io/cgit/qt/qtmacextras.git/tree/dist/changes-5.5.0?h=5.5.0
>>>
>>> ** qtmultimedia:
>>> http://code.qt.io/cgit/qt/qtmultimedia.git/tree/dist/changes-5.5.0?h=5.5.0
>>>
>>> ** qtquick1:
>>> http://code.qt.io/cgit/qt/qtquick1.git/tree/dist/changes-5.5.0?h=5.5.0
>>>
>>> ** qtscript:
>>> http://code.qt.io/cgit/qt/qtscript.git/tree/dist/changes-5.5.0?h=5.5.0
>>
>>I just went through the git log to confirm. There is nothing of
>>interest to put in the changelog for QtQuick1 or QtScript (I'd be
>>surprised if I found otherwise). Do you really need an empty file
>>there?
>>
>>--
>>Alan Alpert

From christian.kandeler at theqtcompany.com  Thu Jun 11 09:21:38 2015
From: christian.kandeler at theqtcompany.com (Christian Kandeler)
Date: Thu, 11 Jun 2015 09:21:38 +0200
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <1850319.Fy9dAWxNW7@tjmaciei-mobl4>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>	<13279726.762LyY3m5A@tjmaciei-mobl4>	<20150610151406.5693520.88469.26350@theqtcompany.com>
	<1850319.Fy9dAWxNW7@tjmaciei-mobl4>
Message-ID: <55793702.4070506@theqtcompany.com>

On 06/10/2015 06:42 PM, Thiago Macieira wrote:
> On Wednesday 10 June 2015 15:14:07 Hausmann Simon wrote:
>> Hi,
>>
>> I think renaming the getter to lastError is nice! I however do like error as
>> signal name and it looks good in qml as onError:...
>
> "onError" screams of Basic to me...
> 	ON ERROR GO SUB foo
> or worse
> 	ON ERROR RESUME
>
> I don't mind the getter still being named "error" because it's a noun and we
> name our properties (and thus the getters) after nouns.
>
> The problem is the signal: the coding style is that signals are named after
> verbs in the past, indicating that something happened. "error" has no verb in
> the past. Even "errored" would be better, though that's unusual.
>
> I think "error" + verb in the past is best, so here are my suggestions, in no
> particular order:
>
> 	errorHappened
> 	errorCaught
> 	errorEncountered
> 	errorOccurred		(people will get the double r wrong)
> 					https://en.wiktionary.org/wiki/occured
> 	errorFound
> 	errorDetected
> 	errorDiscovered
> 	errorNoticed
> 	errorSeen
> 	errorObserved
>
> alternatively, with the verb in the active:
>
> 	caughtError
> 	foundError
> 	detectedError
> 	discoveredError
> 	noticedError
> 	sawError
> 	observedError
>
> If I break out the thesaurus, then we also have
>
> 	errorBefell

I would +2 this one immediately, even if it's the last thing I do before
losing my approver rights.


Christian

From Martin.Smith at theqtcompany.com  Thu Jun 11 09:29:51 2015
From: Martin.Smith at theqtcompany.com (Smith Martin)
Date: Thu, 11 Jun 2015 07:29:51 +0000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <55793702.4070506@theqtcompany.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<13279726.762LyY3m5A@tjmaciei-mobl4>
	<20150610151406.5693520.88469.26350@theqtcompany.com>
	<1850319.Fy9dAWxNW7@tjmaciei-mobl4>, <55793702.4070506@theqtcompany.com>
Message-ID: <AM2PR02MB0356BDE548186B876FAA8E53E6BC0@AM2PR02MB0356.eurprd02.prod.outlook.com>

onError is immediately understood by all sentient beings in the universe.

martin

________________________________________
From: development-bounces+martin.smith=theqtcompany.com at qt-project.org <development-bounces+martin.smith=theqtcompany.com at qt-project.org> on behalf of Christian Kandeler <christian.kandeler at theqtcompany.com>
Sent: Thursday, June 11, 2015 9:21 AM
To: development at qt-project.org
Subject: Re: [Development] Avoid overloading of 'error'

On 06/10/2015 06:42 PM, Thiago Macieira wrote:
> On Wednesday 10 June 2015 15:14:07 Hausmann Simon wrote:
>> Hi,
>>
>> I think renaming the getter to lastError is nice! I however do like error as
>> signal name and it looks good in qml as onError:...
>
> "onError" screams of Basic to me...
>       ON ERROR GO SUB foo
> or worse
>       ON ERROR RESUME
>
> I don't mind the getter still being named "error" because it's a noun and we
> name our properties (and thus the getters) after nouns.
>
> The problem is the signal: the coding style is that signals are named after
> verbs in the past, indicating that something happened. "error" has no verb in
> the past. Even "errored" would be better, though that's unusual.
>
> I think "error" + verb in the past is best, so here are my suggestions, in no
> particular order:
>
>       errorHappened
>       errorCaught
>       errorEncountered
>       errorOccurred           (people will get the double r wrong)
>                                       https://en.wiktionary.org/wiki/occured
>       errorFound
>       errorDetected
>       errorDiscovered
>       errorNoticed
>       errorSeen
>       errorObserved
>
> alternatively, with the verb in the active:
>
>       caughtError
>       foundError
>       detectedError
>       discoveredError
>       noticedError
>       sawError
>       observedError
>
> If I break out the thesaurus, then we also have
>
>       errorBefell

I would +2 this one immediately, even if it's the last thing I do before
losing my approver rights.


Christian
_______________________________________________
Development mailing list
Development at qt-project.org
http://lists.qt-project.org/mailman/listinfo/development

From jani.heikkinen at theqtcompany.com  Thu Jun 11 09:36:32 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Thu, 11 Jun 2015 07:36:32 +0000
Subject: [Development] New Qt5.5.0-rc snapshot available
Message-ID: <DB3PR02MB0540809D35282275A0A6509CE4BC0@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi all,

We have new snapshot in

Linux: https://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-10_111/
Mac: https://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-10_93/
Windows: https://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-10_89/
Src: https://download.qt.io/snapshots/qt/5.5/5.5.0-rc/latest_src/

These packages aren't yet final RC packages most probably but all blockers from https://bugreports.qt.io/browse/QTBUG-44654 should be fixed already so it is really important to test these packages to see if there is something broken.
We are targeting to release RC Tue 16.6
Please inform me immediately if you find something broken which should block the release!

Qt5 changes in this snapshot:

https://codereview.qt-project.org/#/c/113832/ :
Patch Set 5:

* qt3d 7c07835...3779e00 (1):
    > Remove unnecessary metatype declarations

  * qtandroidextras ba72dfc...b8a97cd (1):
    > Add Changes file for the 5.5.0 release

  * qtconnectivity e86249d...a8b89f2 (1):
    > Add changelog for Qt 5.5.0 release

  * qtdeclarative 5bd8a38...78bffbc (3):
    > V4: Fix use of uninitialized field.
    > Add a version of BitVector that uses QBitArray.
    > Wrap std::vector<bool> in our own class.

  * qtdoc 06e5544...e0c4087 (1):
    > Doc: Document forkfd and FreeBSD 3rd party licenses

  * qtqa 338c2af...f16ad17 (1):
    > Add path for test executable to log files

  * qtsensors e6a356a...d15ee51 (1):
    > Add changelog file for 5.5.0 release

  * qtserialport 71c3879...ad81a04 (1):
    > Mark some signals as deprecated since 5.5

  * qttools 78beb4c...3f69aa7 (1):
    > macdeployqt: fix plugin deployment.

  * qtwebengine a7be9e7...71b0022 (1):
    > Fix msvc linking issues caused by wrong export macro

Best regards,
Jani Heikkinen
Release Manager | The Qt Company

The Qt Company / Digia Finland Ltd, Elektroniikkatie 10, 90590 Oulu, Finland
Email: jani.heikkinen at theqtcompany.com | Mobile: + 358 50 48 73 735
www.qt.io |Qt Blog: http://blog.qt.digia.com/ | Twitter: @QtbyDigia, @Qtproject Facebook: www.facebook.com/qt


From marc.mutz at kdab.com  Thu Jun 11 11:38:39 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 11 Jun 2015 11:38:39 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <20150609113514.GE26200@troll08.it.local>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<AM3PR02MB0534124D8A311638A0558137E4BE0@AM3PR02MB0534.eurprd02.prod.outlook.com>
	<20150609113514.GE26200@troll08.it.local>
Message-ID: <201506111138.40390.marc.mutz@kdab.com>

On Tuesday 09 June 2015 13:35:14 Oswald Buddenhagen wrote:
> On Tue, Jun 09, 2015 at 10:59:32AM +0000, Heikkinen Jani wrote:
> > Hi,
> >
> > I tried to create error reports about the findings to be able to
> > follow-up the progress. Please create new one if something is missing.
>
> the point was about the entirely new headers that were not in the diffs,
> i.e., entirely new apis. it's a quite different (and much bigger) task
> than ensuring compatibility with existing api revisions.
>
> i can create a task, but it's not up to me to actually schedule it. lars
> (or multiple other maintainers) need to make that call.

Any news on this? Will we set aside time to look at the new API in more depth
before publishing or will we rush out 5.5 with known and unknown API issues?

(yes, this question is meant to be suggestive :)

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Thu Jun 11 11:49:23 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 11 Jun 2015 11:49:23 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <mla1m4$1bk$1@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org> <2646160.nJGqpQo0xz@cartman>
	<mla1m4$1bk$1@ger.gmane.org>
Message-ID: <201506111149.23890.marc.mutz@kdab.com>

On Wednesday 10 June 2015 21:03:32 Stephen Kelly wrote:
> I would encourage a discussion of why this module needs namespaces when
> the  rest of Qt gets by without them. There is certainly a consistency
> angle.

I think you come a few years late :)

QtPatternist
QtConcurrent
QTest
QV4
QtQml
QtDeclarative
QtWayland
...

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From steveire at gmail.com  Thu Jun 11 10:47:27 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Thu, 11 Jun 2015 10:47:27 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506111149.23890.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <2646160.nJGqpQo0xz@cartman>
	<mla1m4$1bk$1@ger.gmane.org>
	<201506111149.23890.marc.mutz@kdab.com>
Message-ID: <CACHsx4J1aXSPCAOhrtrFPcY73zmzQ1oN1qW2RFBY=pwNGkrJ9g@mail.gmail.com>

On Thu, Jun 11, 2015 at 11:49 AM, Marc Mutz <marc.mutz at kdab.com> wrote:
> On Wednesday 10 June 2015 21:03:32 Stephen Kelly wrote:
>> I would encourage a discussion of why this module needs namespaces when
>> the  rest of Qt gets by without them. There is certainly a consistency
>> angle.
>
> I think you come a few years late :)
>
> QtConcurrent

Did you miss point 5 that I wrote here?

 http://thread.gmane.org/gmane.comp.lib.qt.devel/21775

Where is QtQml::QQmlEngine for example?

Thanks,

Steve.

From Lars.Knoll at theqtcompany.com  Thu Jun 11 10:55:24 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Thu, 11 Jun 2015 08:55:24 +0000
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <201506111138.40390.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<AM3PR02MB0534124D8A311638A0558137E4BE0@AM3PR02MB0534.eurprd02.prod.outlook.com>
	<20150609113514.GE26200@troll08.it.local>
	<201506111138.40390.marc.mutz@kdab.com>
Message-ID: <D19F1872.32124%lars.knoll@theqtcompany.com>

On 11/06/15 11:38, "Marc Mutz" <marc.mutz at kdab.com> wrote:

>On Tuesday 09 June 2015 13:35:14 Oswald Buddenhagen wrote:
>> On Tue, Jun 09, 2015 at 10:59:32AM +0000, Heikkinen Jani wrote:
>> > Hi,
>> >
>> > I tried to create error reports about the findings to be able to
>> > follow-up the progress. Please create new one if something is missing.
>>
>> the point was about the entirely new headers that were not in the diffs,
>> i.e., entirely new apis. it's a quite different (and much bigger) task
>> than ensuring compatibility with existing api revisions.
>>
>> i can create a task, but it's not up to me to actually schedule it. lars
>> (or multiple other maintainers) need to make that call.
>
>Any news on this? Will we set aside time to look at the new API in more
>depth
>before publishing or will we rush out 5.5 with known and unknown API
>issues?
>
>(yes, this question is meant to be suggestive :)

Well, afaik the new APIs have been reviewed, but maybe not as widely as we
should have. But so far, I haven?t seen bigger issues apart from the one
in Qt Network.

We?ll have to weight things against each other. Looking at that, I don?t
believe delaying 5.5 is a good option as we?re getting extremely close to
the summer break. I don?t think releasing in August is a better idea.

So I propose we?ll sit down here in the office today and tomorrow with a
few people and go through the new APIs to be certain we didn?t miss any
big issues. That?s the fastest way to get some certainty without too large
risks to delay our release.

Cheers,
Lars


From sean.harmer at kdab.com  Thu Jun 11 10:59:18 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Thu, 11 Jun 2015 09:59:18 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <mla20r$1bk$3@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org> <mla1m4$1bk$1@ger.gmane.org>
	<mla20r$1bk$3@ger.gmane.org>
Message-ID: <2543977.rKEhP5qD4q@cartman>

On Wednesday 10 Jun 2015 21:09:15 Stephen Kelly wrote:
> Stephen Kelly wrote:
> > Sean Harmer wrote:
> >>> 1) The include/Qt3DCore/Window file doesn't have a Q prefix.
> >>>
> >>> as every other header does. Should probably be Qt3DWindow.
> >>
> >> Right, this actually needs removing and something temporary putting in
> >> place in the examples for now.
> >>
> >> I'll try to tidy up and move the existing Window thing to the examples
> >> later today or tomorrow.
> >
> > It looks like it's still there. Is it going to be released like that?
>
> Sorry, I didn't mean for this to sound like this.
>
> I just can't tell from what you wrote, and from the schedule Jani is
> sticking to, whether this is a release blocker or not.
>
> Is installation of unprefixed headers a release blocker?

Yes, I'll move it today.

Cheers,

Sean
--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
KDAB (UK) Ltd, a KDAB Group company
Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
Mobile: +44 (0)7545 140604
KDAB - Qt Experts

From andre at familiesomers.nl  Thu Jun 11 11:10:33 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Thu, 11 Jun 2015 11:10:33 +0200
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <1850319.Fy9dAWxNW7@tjmaciei-mobl4>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>	<13279726.762LyY3m5A@tjmaciei-mobl4>	<20150610151406.5693520.88469.26350@theqtcompany.com>
	<1850319.Fy9dAWxNW7@tjmaciei-mobl4>
Message-ID: <55795089.4050702@familiesomers.nl>

Thiago Macieira schreef op 10-6-2015 om 18:42:
> On Wednesday 10 June 2015 15:14:07 Hausmann Simon wrote:
>> Hi,
>>
>> I think renaming the getter to lastError is nice! I however do like error as
>> signal name and it looks good in qml as onError:...
> "onError" screams of Basic to me...
> 	ON ERROR GO SUB foo
> or worse
> 	ON ERROR RESUME
>
> I don't mind the getter still being named "error" because it's a noun and we
> name our properties (and thus the getters) after nouns.
In that case, you could also considder the verb "to err", with its past
tense erred...

Andr?


From marc.mutz at kdab.com  Thu Jun 11 12:29:34 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 11 Jun 2015 12:29:34 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <CACHsx4J1aXSPCAOhrtrFPcY73zmzQ1oN1qW2RFBY=pwNGkrJ9g@mail.gmail.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111149.23890.marc.mutz@kdab.com>
	<CACHsx4J1aXSPCAOhrtrFPcY73zmzQ1oN1qW2RFBY=pwNGkrJ9g@mail.gmail.com>
Message-ID: <201506111229.34666.marc.mutz@kdab.com>

On Thursday 11 June 2015 10:47:27 Stephen Kelly wrote:
> On Thu, Jun 11, 2015 at 11:49 AM, Marc Mutz <marc.mutz at kdab.com> wrote:
> > On Wednesday 10 June 2015 21:03:32 Stephen Kelly wrote:
> >> I would encourage a discussion of why this module needs namespaces when
> >> the  rest of Qt gets by without them. There is certainly a consistency
> >> angle.
> >
> > I think you come a few years late :)
> >
> > QtConcurrent
>
> Did you miss point 5 that I wrote here?
>
>  http://thread.gmane.org/gmane.comp.lib.qt.devel/21775
>
> Where is QtQml::QQmlEngine for example?

I was listing namespaces that are used in Qt already. That was to rebut your
claim that the use of a namespace for a Qt library is new. It isn't.

There are two red lines that are worth noting when crossing:

1. A namespace is used in a public header for the first time.
2. A namespaced name is exported for the first time.

Both have been crossed in Qt already.

Whether "some of the library" or "all of the library" is in a namespace is not
a red line (and even if it was, QtConcurrent has crossed that already).

Neither is "only functions and enums" or "also classes" are namespaced.
Classes are nothing but collections of functions. Even if it was a separate
red line, qxmlpatterns crossed that line years ago, too.

So even if we follow your reasoning, Qt3D is doing nothing that QtConcurrent
and QtXmlPatterns, combined, haven't been doing for years. So the only new
thing is that instead of separate libraries, it's now used in one.

And that's fine, at least from my pov. But we can certainly discuss whether
that's valid for the Qt project as a whole (if we ain't got anything else to
do).

It anyway doesn't block the release, since Qt3D is only released as a tech
preview.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From oswald.buddenhagen at theqtcompany.com  Thu Jun 11 11:45:10 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Thu, 11 Jun 2015 11:45:10 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506111229.34666.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111149.23890.marc.mutz@kdab.com>
	<CACHsx4J1aXSPCAOhrtrFPcY73zmzQ1oN1qW2RFBY=pwNGkrJ9g@mail.gmail.com>
	<201506111229.34666.marc.mutz@kdab.com>
Message-ID: <20150611094510.GC6652@troll08.it.local>

On Thu, Jun 11, 2015 at 12:29:34PM +0200, Marc Mutz wrote:
> So even if we follow your reasoning, Qt3D is doing nothing that QtConcurrent
> and QtXmlPatterns, combined, haven't been doing for years. So the only new
> thing is that instead of separate libraries, it's now used in one.
>
the thing is that both your precedents are *bad*:
- qtconcurrent has intentionally been isolated, as a prelude to
  deprecation
- there is a pretty uniform perception that xmlpatterns feels alien in
  the qt api, and i have a slight suspicion that the naming convention
  contributes to that

so at this point, qt3d *is* setting the precedent for a widely reviewed
new module that is meant to stay.

and ftr, i'm entirely with steve on that one.

> And that's fine, at least from my pov. But we can certainly discuss
> whether that's valid for the Qt project as a whole

> (if we ain't got anything else to do).
>
glad you're taking the matter seriously.

> It anyway doesn't block the release, since Qt3D is only released as a
> tech preview.
>
while this is technically true, it's plain dishonest to suggest that
what is released now will not develop enough momentum to make later
changes of that scale hard.

From rafael.roquetto at kdab.com  Thu Jun 11 11:57:19 2015
From: rafael.roquetto at kdab.com (Rafael Roquetto)
Date: Thu, 11 Jun 2015 06:57:19 -0300
Subject: [Development] Announcement: Deprecating QNX 6.5.0
Message-ID: <20150611095718.GA26178@polaris>

Hello,

It was agreed during this year's Qt Contributors Summit that, as of Qt 5.6,
QNX 6.5.0 will no longer be supported. Therefore, it is being marked as
deprecated for Qt 5.5. Among other reasons, the lack of proper C++11 support
stood as the main driving factor to this.

Support for QNX 6.6 is not affected.

Best regards,
Rafael

--
Rafael Roquetto | rafael.roquetto at kdab.com | Software Engineer
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel. Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - Qt Experts
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 4861 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150611/2e770ba5/attachment-0001.bin

From Lars.Knoll at theqtcompany.com  Thu Jun 11 12:29:06 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Thu, 11 Jun 2015 10:29:06 +0000
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <D19F1872.32124%lars.knoll@theqtcompany.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<AM3PR02MB0534124D8A311638A0558137E4BE0@AM3PR02MB0534.eurprd02.prod.outlook.com>
	<20150609113514.GE26200@troll08.it.local>
	<201506111138.40390.marc.mutz@kdab.com>
	<D19F1872.32124%lars.knoll@theqtcompany.com>
Message-ID: <D19F2C4A.32144%lars.knoll@theqtcompany.com>

On 11/06/15 10:55, "Knoll Lars" <Lars.Knoll at theqtcompany.com> wrote:

>On 11/06/15 11:38, "Marc Mutz" <marc.mutz at kdab.com> wrote:
>
>>On Tuesday 09 June 2015 13:35:14 Oswald Buddenhagen wrote:
>>> On Tue, Jun 09, 2015 at 10:59:32AM +0000, Heikkinen Jani wrote:
>>> > Hi,
>>> >
>>> > I tried to create error reports about the findings to be able to
>>> > follow-up the progress. Please create new one if something is
>>>missing.
>>>
>>> the point was about the entirely new headers that were not in the
>>>diffs,
>>> i.e., entirely new apis. it's a quite different (and much bigger) task
>>> than ensuring compatibility with existing api revisions.
>>>
>>> i can create a task, but it's not up to me to actually schedule it.
>>>lars
>>> (or multiple other maintainers) need to make that call.
>>
>>Any news on this? Will we set aside time to look at the new API in more
>>depth
>>before publishing or will we rush out 5.5 with known and unknown API
>>issues?
>>
>>(yes, this question is meant to be suggestive :)
>
>Well, afaik the new APIs have been reviewed, but maybe not as widely as we
>should have. But so far, I haven?t seen bigger issues apart from the one
>in Qt Network.
>
>We?ll have to weight things against each other. Looking at that, I don?t
>believe delaying 5.5 is a good option as we?re getting extremely close to
>the summer break. I don?t think releasing in August is a better idea.
>
>So I propose we?ll sit down here in the office today and tomorrow with a
>few people and go through the new APIs to be certain we didn?t miss any
>big issues. That?s the fastest way to get some certainty without too large
>risks to delay our release.

Ok, here?s the list of public headers that got added between 5.4 and 5.5.
I used the command below

git diff --name-status origin/5.4..origin/5.5 src | grep '^A' | grep "\.h"
| grep -v "_p.h" | grep -v 3rdparty | grep -v plugins

The list of headers that we need to go through is then:

On 11/06/15 10:55, "Knoll Lars" <Lars.Knoll at theqtcompany.com> wrote:

>On 11/06/15 11:38, "Marc Mutz" <marc.mutz at kdab.com> wrote:
>
>>On Tuesday 09 June 2015 13:35:14 Oswald Buddenhagen wrote:
>>>On Tue, Jun 09, 2015 at 10:59:32AM +0000, Heikkinen Jani wrote:
>>>> Hi,
>>>>
>>>> I tried to create error reports about the findings to be able to
>>>> follow-up the progress. Please create new one if something is missing.
>>>the point was about the entirely new headers that were not in the diffs,
>>>i.e., entirely new apis. it's a quite different (and much bigger) task
>>>than ensuring compatibility with existing api revisions.
>>>i can create a task, but it's not up to me to actually schedule it. lars
>>>(or multiple other maintainers) need to make that call.
>>
>>Any news on this? Will we set aside time to look at the new API in more
>>depth
>>before publishing or will we rush out 5.5 with known and unknown API
>>issues?
>>
>>(yes, this question is meant to be suggestive :)
>
>Well, afaik the new APIs have been reviewed, but maybe not as widely as we
>should have. But so far, I haven?t seen bigger issues apart from the one
>in Qt Network.
>
>We?ll have to weight things against each other. Looking at that, I don?t
>believe delaying 5.5 is a good option as we?re getting extremely close to
>the summer break. I don?t think releasing in August is a better idea.
>
>So I propose we?ll sit down here in the office today and tomorrow with a
>few people and go through the new APIs to be certain we didn?t miss any
>big issues. That?s the fastest way to get some certainty without too large
>risks to delay our release.

Ok, here?s the list of public headers that got added between 5.4 and 5.5.
(generated using
git diff --name-status origin/5.4..origin/5.5 src | grep '^A' | grep "\.h"
| grep -v "_p.h" | grep -v 3rdparty | grep -v plugins)

The list of headers that we need to go through is then:

qtbase
A src/network/ssl/qsslellipticcurve.h
A src/network/ssl/qsslpresharedkeyauthenticator.h

qtmultimedia

A src/multimedia/camera/qcameraviewfindersettings.h
A src/multimedia/video/qabstractvideofilter.h
A src/qtmultimediaquicktools/qsgvideonode_yuv.h

qtwebengine

A src/webenginewidgets/api/qwebenginedownloaditem.h
A src/webenginewidgets/api/qwebengineprofile.h
A src/webenginewidgets/api/qwebenginescript.h
A src/webenginewidgets/api/qwebenginescriptcollection.h

For reference the full set of output of the script is attached, but most
of the files are not relevant to review for different reasons.



There are a couple of new modules as well:

Qt Canvas3D: Basically just a QML import exposing WebGL to QML.
Implemented a w3c/khronos standard, so not much to review here.

Qt 3D: In technology preview, API not yet frozen

Qt Location: The APIs underwent some changes from the 4.8 mobility API,
but the module got a good review during Nokia times.



I?ll get to reviewing the added files now, but others feel free to have a
look as well.

Cheers,
Lars

-------------- next part --------------
A non-text attachment was scrubbed...
Name: 5.5 added headers.rtf
Type: text/rtf
Size: 2556 bytes
Desc: 5.5 added headers.rtf
Url : http://lists.qt-project.org/pipermail/development/attachments/20150611/aac898b0/attachment.rtf

From oswald.buddenhagen at theqtcompany.com  Thu Jun 11 12:29:10 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Thu, 11 Jun 2015 12:29:10 +0200
Subject: [Development] Specifying module dependencies
In-Reply-To: <20150610203206.5693520.9858.26394@theqtcompany.com>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>
	<1972171.Sf34UoKY6U@tjmaciei-mobl4>
	<20150610193336.5693520.30023.26386@theqtcompany.com>
	<1721825.BxG8DpqjMT@tjmaciei-mobl4>
	<20150610203206.5693520.9858.26394@theqtcompany.com>
Message-ID: <20150611102910.GD6652@troll08.it.local>

On Wed, Jun 10, 2015 at 08:32:07PM +0000, Hausmann Simon wrote:
> Hi,
>
> Ok :) let's try with reduced qmake syntax (just variables, no functions). We can still fall back to json if it's too clumsy.
>
as you can "parse anything", what's wrong with parsing the function
calls from qt.pro? they match a pretty simple regexp ...


From sean.harmer at kdab.com  Thu Jun 11 12:34:22 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Thu, 11 Jun 2015 11:34:22 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <mla1m4$1bk$1@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org> <2646160.nJGqpQo0xz@cartman>
	<mla1m4$1bk$1@ger.gmane.org>
Message-ID: <3582065.6MfDC8jFMz@cartman>

Hi Steve,

On Wednesday 10 Jun 2015 21:03:32 Stephen Kelly wrote:
> >> 5) Qt3D namespace
> >>
> >> This is the first time that all classes in a library are in a namespace.
> >> Previously only enums (in various modules) and free functions (in
> >> QtConcurrent) have been put in namespaces.
> >>
> >> In QtConcurrent, the module name also appears in the header file, but
> >> that is not followed by Qt3D libraries.
> >>
> >> Given that Qt has never put classes in a namespace like this, is there
> >> something to be consistent about here?
> >>
> >> 6) QParameter is a very generic name
> >>
> >> I realise it is in a namespace, but still...
> >>
> >> Qt3DParamter might be better *and* more consistent. Similar applies to
> >> other classes.
> >
> > It's precisely because of these kinds of issues that we decided to use
> > namespaces in Qt3D rather than the poor-man's prefix name spacing.
>
> I don't understand what you wrote. I assume when you wrote 'these kinds of
> issues' you didn't mean that "better *and* more consistent" are the 'kinds
> of issues'. What do you mean?

Better is a subjective term that depends upon the metrics being used.
Qt3D::QParameter is meant to be generic - it translates through to uniforms,
samplers etc inside of shaders which are generic. It seems cleaner to use that
within a namespace than using clunky prefixes. Namespaces don't enforce the
additional writing if using a 'using namespace Qt3D' construct, whereas
prefixing does.

With a field as broad as 3D simulations (not just rendering) there is a very
high probability of conflicts with other names in different domains. One we
would already hit is QTransform.

With namespacing, you only need to disambiguate when needed.

In QML, using prefixes would also lead to more typing whereas we've been using
QML namespaces to disambiguate where necessary - i.e. when we combine Qt3D and
Qt Quick 2 in the same file.

That is my justification for "better", so that leaves consistency.

I admit Qt3D is being inconsistent with other modules. It is also a Qt Addon
rather than an Essentials module and also a new module. Given the recent
discussions on the ML at at the contributor summit about using new C++
features, we would like to use namespaces in Qt3D.

My understanding is that Qt traditionally doesn't use namespaces due to poor
compiler support for them in the early days of Qt. Of course that may be an
incorrect perception since I wasn't involved way back then.

So using namespaces from the point of view of allowable C++ features would
seem to be OK given that some C++11 is also acceptable for new modules. Also
the need to explicitly use namespaces is only required when disambiguating
means the code reads similarly to existing non-namespaced modules.

> I would encourage a discussion of why this module needs namespaces when the
> rest of Qt gets by without them. There is certainly a consistency angle.
> Should all new modules use a namespace? Should the namespace correspond to
> the name of the repo the library it's in? Or should there be a namespace per
> library?
>
> > If it's required to not use namespaces to be part of the Qt project then
> > we can of course change it. However, I would argue against doing so,
> > especially in the light of being able to use some more modern C++ features
> > in upcoming QT versions.
>
> I don't know. As far as I know deciding to use a namespace for this one was
> done without discussion on the mailing list?

There has been at least some discussion of namespaces in the past. For e.g.

http://lists.qt-project.org/pipermail/development/2012-August/005580.html

And it's not like we've done this in secret.

> I'm encouraging discussion such as on the questions I raised above.
>
> You're introducing inconsistency, so how will things be made consistent
> again in the future? What is the direction? What is the policy? What is done
> for new modules? What should be done for Qt 6? Everything in different
> namespaces? Or everything in a Qt6:: namespace? Or multiple namespaces?
> Qt6::Core::QString? Do you aim to see

No intentions beyond avoiding name clashes with Essentials modules without
enforcing a bunch of extra typing on users. I'm happy to participate in a
discussion about namespacing in the larger context of Qt for the future but I
don't have any strong preference apart from not adding extra work to end users
porting from Qt5 to Qt6.

>  using namespace Qt6::Core;
>  using namespace Qt6::Gui;
>  using namespace Qt6::Network;
>  using namespace Qt6::3D;
>
> at the top of most translation units using Qt, as one sometimes sees for
> boost use? Is that the future of what Qt-using code will look like? Do you
> find Qt3D code readable without the Qt3D:: prefix? I don't know as I haven't
> written any. Do you discourage or encourage the use of
>
>  using namespace Qt3D;

That's the pattern we've been using but imho it's up to the end user if they
prefer to be explicit or to use this paradigm.

> All I know is that we now have inconsistency with this new module.
>
> Then again, if anyone else on this mailing list thinks namespace consistency
> is relevant for Qt, they can also chime in. As they've not done so here, we
> can probably assume the community vibe is that namespace consistency isn't
> something to create or look for in Qt at this time.
>
> You can start a thread/discussion if you wish :). I'm mostly curious what
> you think this means for the rest of Qt and the future of Qt.
>
> > Name spaces are supported everywhere these days
> > so why not just use them, especially in a new add-on module?
>
> I don't know that that was ever the reason Qt doesn't put everything in a
> namespace. If it was we would have changed it for Qt 5.0.

I seem to recall it was raised as an option at one point during Qt 5.0.0
development but discounted to avoid additional porting pain.

Cheers,

Sean
--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
KDAB (UK) Ltd, a KDAB Group company
Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
Mobile: +44 (0)7545 140604
KDAB - Qt Experts

From steveire at gmail.com  Thu Jun 11 13:09:39 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Thu, 11 Jun 2015 13:09:39 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506111229.34666.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111149.23890.marc.mutz@kdab.com>
	<CACHsx4J1aXSPCAOhrtrFPcY73zmzQ1oN1qW2RFBY=pwNGkrJ9g@mail.gmail.com>
	<201506111229.34666.marc.mutz@kdab.com>
Message-ID: <CACHsx4JYxgcvvp0BNLH-5qiqqd09W2RA027exsacigppGEi5uQ@mail.gmail.com>

On Thu, Jun 11, 2015 at 12:29 PM, Marc Mutz <marc.mutz at kdab.com> wrote:

> I was listing namespaces that are used in Qt already. That was to rebut your
> claim that the use of a namespace for a Qt library is new.

I didn't make any claim that "the use of a namespace for a Qt library is new".

Whatever you rebutted was not my claim.

Anyway, if no one sees inconsistency here, then there's nothing to
talk about :).

Thanks,

Steve.

From marc.mutz at kdab.com  Thu Jun 11 14:19:42 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 11 Jun 2015 14:19:42 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <D19F2C4A.32144%lars.knoll@theqtcompany.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<D19F1872.32124%lars.knoll@theqtcompany.com>
	<D19F2C4A.32144%lars.knoll@theqtcompany.com>
Message-ID: <201506111419.43147.marc.mutz@kdab.com>

On Thursday 11 June 2015 12:29:06 Knoll Lars wrote:
> A src/multimedia/camera/qcameraviewfindersettings.h

Aprt from the changes already uploaded to Gerrit, I would suggest to use the
new QCamera::FrameRateRange class instead of separate
minimumFrameRate/maximumFrameRate properties.

That *may* indicate that FrameRateRange shouldn't be a nested class within
QCamera, I don't know QtMM enough.

> A src/multimedia/video/qabstractvideofilter.h

Apart from the change already uploaded to Gerrit:

- QVideoFilterRunnable::RunFlag needs a 0x0 value.
- Runnable is a bad name, since it doesn't inherit QRunnable.
- QAbstractVideoFilter should re-use QObject::d_ptr instead of adding its own
  (though its unclear why it's inheriting QObject in the first place).
- QAbstractVideoFilter::createFilterRunnable() should probably be const

> A src/qtmultimediaquicktools/qsgvideonode_yuv.h

Private header (not exported, inline virtuals, no override keyword...).

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Thu Jun 11 14:24:06 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 11 Jun 2015 14:24:06 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <D19F2C4A.32144%lars.knoll@theqtcompany.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<D19F1872.32124%lars.knoll@theqtcompany.com>
	<D19F2C4A.32144%lars.knoll@theqtcompany.com>
Message-ID: <201506111424.07321.marc.mutz@kdab.com>

On Thursday 11 June 2015 12:29:06 Knoll Lars wrote:
> Qt Location: The APIs underwent some changes from the 4.8 mobility API,
> but the module got a good review during Nokia times.

The QtMultimedia changes I uploaded and described in my previous mail show
what - IMHO - needs to be done to each of the QtLocation classes. I won't have
time to look at QtLocation myself, but the changes are fairly trivial.

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Thu Jun 11 14:28:00 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 11 Jun 2015 14:28:00 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <D19F2C4A.32144%lars.knoll@theqtcompany.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<D19F1872.32124%lars.knoll@theqtcompany.com>
	<D19F2C4A.32144%lars.knoll@theqtcompany.com>
Message-ID: <201506111428.00997.marc.mutz@kdab.com>

On Thursday 11 June 2015 12:29:06 Knoll Lars wrote:
> A src/network/ssl/qsslellipticcurve.h
> A src/network/ssl/qsslpresharedkeyauthenticator.h

Fine imho (but I was partially involved in their upbringing, so another set of
eyes wouldn't hurt).

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Thu Jun 11 14:46:20 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 11 Jun 2015 14:46:20 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <CACHsx4JYxgcvvp0BNLH-5qiqqd09W2RA027exsacigppGEi5uQ@mail.gmail.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111229.34666.marc.mutz@kdab.com>
	<CACHsx4JYxgcvvp0BNLH-5qiqqd09W2RA027exsacigppGEi5uQ@mail.gmail.com>
Message-ID: <201506111446.20906.marc.mutz@kdab.com>

On Thursday 11 June 2015 13:09:39 Stephen Kelly wrote:
> On Thu, Jun 11, 2015 at 12:29 PM, Marc Mutz <marc.mutz at kdab.com> wrote:
> > I was listing namespaces that are used in Qt already. That was to rebut
> > your claim that the use of a namespace for a Qt library is new.
>
> I didn't make any claim that "the use of a namespace for a Qt library is
> new".
>
> Whatever you rebutted was not my claim.

I had the following in mind:

On Monday 08 June 2015 01:11:23 Stephen Kelly wrote:
> 5) Qt3D namespace
>
> This is the first time that all classes in a library are in a namespace.
> Previously only enums (in various modules) and free functions (in
> QtConcurrent) have been put in namespaces.
>
> In QtConcurrent, the module name also appears in the header file, but that
> is not followed by Qt3D libraries.
>
> Given that Qt has never put classes in a namespace like this, is there
> something to be consistent about here?

Sorry if should I have replied to the wrong mail.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From Lars.Knoll at theqtcompany.com  Thu Jun 11 13:43:15 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Thu, 11 Jun 2015 11:43:15 +0000
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <201506111428.00997.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<D19F1872.32124%lars.knoll@theqtcompany.com>
	<D19F2C4A.32144%lars.knoll@theqtcompany.com>
	<201506111428.00997.marc.mutz@kdab.com>
Message-ID: <D19F3F2D.32182%lars.knoll@theqtcompany.com>

On 11/06/15 14:28, "Marc Mutz" <marc.mutz at kdab.com> wrote:

>On Thursday 11 June 2015 12:29:06 Knoll Lars wrote:
>> A src/network/ssl/qsslellipticcurve.h
>> A src/network/ssl/qsslpresharedkeyauthenticator.h
>
>Fine imho (but I was partially involved in their upbringing, so another
>set of
>eyes wouldn't hurt).

Well, QSslEllipticCurve is problematic IMO. The class only contains one
int and accesses it inline. Since we might have other backends than
openssl implementing this in the future, I?d like have this non inline and
a qint64 as data type (so we could replace it with a d pointer later on if
required).

The presharedkey authenticator is missing a copy constructor taking a
rvalue ref, but that?s minor and can be fixed BC in 5.6 as well.

Cheers,
Lars


From Lars.Knoll at theqtcompany.com  Thu Jun 11 13:44:19 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Thu, 11 Jun 2015 11:44:19 +0000
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <D19F2C4A.32144%lars.knoll@theqtcompany.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<AM3PR02MB0534124D8A311638A0558137E4BE0@AM3PR02MB0534.eurprd02.prod.outlook.com>
	<20150609113514.GE26200@troll08.it.local>
	<201506111138.40390.marc.mutz@kdab.com>
	<D19F1872.32124%lars.knoll@theqtcompany.com>
	<D19F2C4A.32144%lars.knoll@theqtcompany.com>
Message-ID: <D19F4100.32195%lars.knoll@theqtcompany.com>



On 11/06/15 12:29, "Knoll Lars" <Lars.Knoll at theqtcompany.com> wrote:
>qtwebengine
>
>A src/webenginewidgets/api/qwebenginedownloaditem.h
>A src/webenginewidgets/api/qwebengineprofile.h
>A src/webenginewidgets/api/qwebenginescript.h
>A src/webenginewidgets/api/qwebenginescriptcollection.h

Some smaller issues here, talked to Pierre and he?ll submit a patch today.

Cheers,
Lars


From Lars.Knoll at theqtcompany.com  Thu Jun 11 13:56:12 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Thu, 11 Jun 2015 11:56:12 +0000
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <201506111419.43147.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<D19F1872.32124%lars.knoll@theqtcompany.com>
	<D19F2C4A.32144%lars.knoll@theqtcompany.com>
	<201506111419.43147.marc.mutz@kdab.com>
Message-ID: <D19F4197.3219C%lars.knoll@theqtcompany.com>

On 11/06/15 14:19, "Marc Mutz" <marc.mutz at kdab.com> wrote:

>On Thursday 11 June 2015 12:29:06 Knoll Lars wrote:
>> A src/multimedia/camera/qcameraviewfindersettings.h
>
>Aprt from the changes already uploaded to Gerrit, I would suggest to use
>the
>new QCamera::FrameRateRange class instead of separate
>minimumFrameRate/maximumFrameRate properties.

That would be nice.
>
>That *may* indicate that FrameRateRange shouldn't be a nested class
>within
>QCamera, I don't know QtMM enough.

The viewfinder class is closely bound to the camera. It sounds correct to
have the framerate in the camera class.

>
>> A src/multimedia/video/qabstractvideofilter.h
>
>Apart from the change already uploaded to Gerrit:
>
>- QVideoFilterRunnable::RunFlag needs a 0x0 value.

Agree, but not a showstopper for 5.5.0

>- Runnable is a bad name, since it doesn't inherit QRunnable.

QVideoFilterEngine? But I don?t think it?s too much of a problem as it?s a
very specialized class.

>- QAbstractVideoFilter should re-use QObject::d_ptr instead of adding its
>own
>  (though its unclear why it's inheriting QObject in the first place).

It could, since the module depends on private apis in Qt Core anyway.
Still, no show stopper for me. And it?s a QObject, because it gets exposed
to QML.

>- QAbstractVideoFilter::createFilterRunnable() should probably be const

I tend to agree, but it?s also a minor issue.

Cheers,
Lars


From thomas.senyk at pelagicore.com  Thu Jun 11 14:32:51 2015
From: thomas.senyk at pelagicore.com (Thomas Senyk)
Date: Thu, 11 Jun 2015 14:32:51 +0200
Subject: [Development] QSceneGraph debugging
Message-ID: <55797FF3.5000104@pelagicore.com>

Hi,

currently trying to debug a weird behavior on a TI chip (armv7 with a
SGX GPU).


I have a fairly simple QML with a simple GridView with model:200 and
delegate:Text{text: "T#"+index}.
(it's a tiny bit more then that, but for argument sake this should be
enough)

Then an animation scrolling up and down (on "contentY", without items
leaving the screen to avoid item creation in performance debugging).

So far so good .. plain 60fps, all frames ~16ms

But when I do
          color:  Qt.rgba(Math.random(), 1, 1,1);   [4]
on the Text-delegate, then I get very bad performance (<20fps).

Looking closer at the frame times it's good performance for a couple of
frames (~16ms) and then one terrible frame with >200ms.

That in mind I dug further .. and found that it's:
In every "bad" frame
Updater::visitGeometryNode [1]
this is called with m_added==1

And this causes (because e->root==0 [2])
renderer->m_rebuild |= Renderer::FullRebuild;

Then nearly all the frame time (>200ms) is spend uploading the new
batches in Renderer::uploadBatch [3]


Comparing all that with the "black"-case I see:
  - Batch  0 0x281f58 upload  root: 0x1a4a58
    - element: 0x27ad18 Rect( -0.833333 0.576389 27.4661 13.5365 )
node: GeometryNode( 0x27ab30 triangles #V: 12 #I: 18 x1= -0.833333 y1=
0.576389 x2= 27.4661 y2= 13.5365 materialtype= 0xb6fad3c4 )  order: 1
    - element: 0x279ca0 Rect( 79.1667 0.732639 107.666 13.3889 )  node:
GeometryNode( 0x279ab8 triangles #V: 12 #I: 18 x1= -0.833333 y1=
0.732639 x2= 27.6658 y2= 13.3889 materialtype= 0xb6fad3c4 )  order: 2
    - element: 0x278c28 Rect( 159.167 0.576389 187.327 13.3889 )  node:
GeometryNode( 0x278a40 triangles #V: 12 #I: 18 x1= -0.833333 y1=
0.576389 x2= 27.3273 y2= 13.3889 materialtype= 0xb6fad3c4 )  order: 3

...all in one Batch.

For color:
  - Batch  0 0x2845f8 upload  root: 0x16bd58
    - element: 0x283a20 Rect( -0.833333 0.576389 27.4661 13.5365 )
node: GeometryNode( 0x283838 triangles #V: 12 #I: 18 x1= -0.833333 y1=
0.576389 x2= 27.4661 y2= 13.5365 materialtype= 0xb6f583c4 )  order: 1
  - Batch  1 0x1702c8 upload  root: 0x16bd58
    - element: 0x2829a8 Rect( 79.1667 0.732639 107.666 13.3889 )  node:
GeometryNode( 0x2827c0 triangles #V: 12 #I: 18 x1= -0.833333 y1=
0.732639 x2= 27.6658 y2= 13.3889 materialtype= 0xb6f583c4 )  order: 2
  - Batch  2 0x2853a0 upload  root: 0x16bd58
    - element: 0x281930 Rect( 159.167 0.576389 187.327 13.3889 )  node:
GeometryNode( 0x281748 triangles #V: 12 #I: 18 x1= -0.833333 y1=
0.576389 x2= 27.3273 y2= 13.3889 materialtype= 0xb6f583c4 )  order: 3

... one node one batch [4].

So batching can't work on differently colored elements/text/..?
     ... is color a uniform per draw call?



 From the past I know that my test-case had good performance on older
SoCs .. so the question I have right now are:

[1]: There shouldn't be a new Node .. nothing new is created?

[2]: Should one simple node cause all batches to be re-uploaded?
        .. or better: why do I get Renderer::FullRebuild?

[3]: If all above is normal, then maybe it's the data upload that's to
long? glBufferData in unmap is 300-400us on average (with ~200 of them
in each "bad" frame) .. is that "normal"? sounds rather long for a
couple of vertices (if it's only a couple of vertices?)

[4]: And again: I guess batching on non color-sharing elements is
supposed to not work?



Greets
Thomas

From marc.mutz at kdab.com  Thu Jun 11 16:26:07 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 11 Jun 2015 16:26:07 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <D19F4197.3219C%lars.knoll@theqtcompany.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<201506111419.43147.marc.mutz@kdab.com>
	<D19F4197.3219C%lars.knoll@theqtcompany.com>
Message-ID: <201506111626.07815.marc.mutz@kdab.com>

On Thursday 11 June 2015 13:56:12 Knoll Lars wrote:
> >- QAbstractVideoFilter should re-use QObject::d_ptr instead of adding its
> >own
> >  (though its unclear why it's inheriting QObject in the first place).
>
> It could, since the module depends on private apis in Qt Core anyway.
> Still, no show stopper for me.

Can't be changed later, as it would be BiC. And since it only adds a bool,
having its own d_ptr is kinda _really_, _really_ overkill.

> And it?s a QObject, because it gets exposed
> to QML.

That's not a reason, is it? There's other ways (Q_GADGET?) to get stuff into
QML without carrying the baggage of a QObject around, aren't there?

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Thu Jun 11 16:33:55 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 11 Jun 2015 16:33:55 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <D19F3F2D.32182%lars.knoll@theqtcompany.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<201506111428.00997.marc.mutz@kdab.com>
	<D19F3F2D.32182%lars.knoll@theqtcompany.com>
Message-ID: <201506111633.55587.marc.mutz@kdab.com>

On Thursday 11 June 2015 13:43:15 Knoll Lars wrote:
> Well, QSslEllipticCurve is problematic IMO. The class only contains one
> int and accesses it inline. Since we might have other backends than
> openssl implementing this in the future, I?d like have this non inline and
> a qint64 as data type (so we could replace it with a d pointer later on if
> required).

Please read the discussion on https://codereview.qt-project.org/94022

TL;DR:
There will never be more than a few dozen elliptic curves. They will never be
mutable. So their state can be kept in a read-only location with the int
indexing into it.

The urge to hide everything behind a d-pointer is strong in Qt, but here, it
makes no sense.

> The presharedkey authenticator is missing a copy constructor taking a
> rvalue ref, but that?s minor and can be fixed BC in 5.6 as well.

Can't have an inline move ctor, as it's using QSharedDataPointer. Can't have
an out-of-line move ctor, since that's currently forbidden. Maybe in 5.6, if
we require rvalue refs.

BTW: Can someone send a summary of Qt 5.6 vs. C++11 to the ML, for those that
couldn't attend?

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From andre at familiesomers.nl  Thu Jun 11 15:30:10 2015
From: andre at familiesomers.nl (=?UTF-8?B?QW5kcsOpIFNvbWVycw==?=)
Date: Thu, 11 Jun 2015 15:30:10 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <201506111633.55587.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>	<201506111428.00997.marc.mutz@kdab.com>	<D19F3F2D.32182%lars.knoll@theqtcompany.com>
	<201506111633.55587.marc.mutz@kdab.com>
Message-ID: <55798D62.4010100@familiesomers.nl>

Marc Mutz schreef op 11-6-2015 om 16:33:
> BTW: Can someone send a summary of Qt 5.6 vs. C++11 to the ML, for
> those that couldn't attend?

I made notes. Available from here:

https://wiki.qt.io/QtCS2015_ModernCpp

Andr?


From Lars.Knoll at theqtcompany.com  Thu Jun 11 15:37:38 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Thu, 11 Jun 2015 13:37:38 +0000
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <201506111633.55587.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<201506111428.00997.marc.mutz@kdab.com>
	<D19F3F2D.32182%lars.knoll@theqtcompany.com>
	<201506111633.55587.marc.mutz@kdab.com>
Message-ID: <D19F5A2A.321DB%lars.knoll@theqtcompany.com>

On 11/06/15 16:33, "Marc Mutz" <marc.mutz at kdab.com> wrote:

>On Thursday 11 June 2015 13:43:15 Knoll Lars wrote:
>> Well, QSslEllipticCurve is problematic IMO. The class only contains one
>> int and accesses it inline. Since we might have other backends than
>> openssl implementing this in the future, I?d like have this non inline
>>and
>> a qint64 as data type (so we could replace it with a d pointer later on
>>if
>> required).
>
>Please read the discussion on https://codereview.qt-project.org/94022
>
>TL;DR:
>There will never be more than a few dozen elliptic curves. They will
>never be
>mutable. So their state can be kept in a read-only location with the int
>indexing into it.
>
>The urge to hide everything behind a d-pointer is strong in Qt, but here,
>it
>makes no sense.

Ok for me. Just wanted to make sure we?re all fine with this.

>
>> The presharedkey authenticator is missing a copy constructor taking a
>> rvalue ref, but that?s minor and can be fixed BC in 5.6 as well.
>
>Can't have an inline move ctor, as it's using QSharedDataPointer. Can't
>have
>an out-of-line move ctor, since that's currently forbidden. Maybe in 5.6,
>if
>we require rvalue refs.
>
>BTW: Can someone send a summary of Qt 5.6 vs. C++11 to the ML, for those
>that
>couldn't attend?

The short summary (full one will hopefully still come from whoever took
notes):

Compiler wise we?ll have VS2012 and gcc 4.7 as a baseline. It?s ok to use
the C++11 language features supported by these compilers unconditionally
in Qt (both in headers and implementations). This also means we can remove
some ifdefs for rvalue refs, Q_DECL_OVERRIDE etc. Some care is still
required when using STL features that might cause BC issues for us.

Cheers,
Lars


From Lars.Knoll at theqtcompany.com  Thu Jun 11 15:40:09 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Thu, 11 Jun 2015 13:40:09 +0000
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <201506111626.07815.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<201506111419.43147.marc.mutz@kdab.com>
	<D19F4197.3219C%lars.knoll@theqtcompany.com>
	<201506111626.07815.marc.mutz@kdab.com>
Message-ID: <D19F5C1A.321EF%lars.knoll@theqtcompany.com>

On 11/06/15 16:26, "Marc Mutz" <marc.mutz at kdab.com> wrote:

>On Thursday 11 June 2015 13:56:12 Knoll Lars wrote:
>> >- QAbstractVideoFilter should re-use QObject::d_ptr instead of adding
>>its
>> >own
>> >  (though its unclear why it's inheriting QObject in the first place).
>>
>> It could, since the module depends on private apis in Qt Core anyway.
>> Still, no show stopper for me.
>
>Can't be changed later, as it would be BiC. And since it only adds a
>bool,
>having its own d_ptr is kinda _really_, _really_ overkill.
>
>> And it?s a QObject, because it gets exposed
>> to QML.
>
>That's not a reason, is it? There's other ways (Q_GADGET?) to get stuff
>into
>QML without carrying the baggage of a QObject around, aren't there?

The semantics for gadgets and objects in QML are different. The QObject
makes sense here. I don?t see a big problem, as you?ll never instantiate
thousands of these objects anyway.

Lars


From simon.hausmann at theqtcompany.com  Thu Jun 11 15:43:15 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Thu, 11 Jun 2015 15:43:15 +0200
Subject: [Development] Specifying module dependencies
In-Reply-To: <20150611102910.GD6652@troll08.it.local>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>
	<20150610203206.5693520.9858.26394@theqtcompany.com>
	<20150611102910.GD6652@troll08.it.local>
Message-ID: <2162083.TQU43La6D2@simon-sx58>

On Thursday, June 11, 2015 12:29:10 PM Oswald Buddenhagen wrote:
> On Wed, Jun 10, 2015 at 08:32:07PM +0000, Hausmann Simon wrote:
> > Hi,
> >
> > Ok :) let's try with reduced qmake syntax (just variables, no functions).
> > We can still fall back to json if it's too clumsy.
> as you can "parse anything", what's wrong with parsing the function
> calls from qt.pro? they match a pretty simple regexp ...

Nothing is wrong with that. In fact that's a great idea :)

So how about we place a dependencies.pri into the top-level directory of each
module that contains just that one addModule(...) function call?

Then qt.pro can just include whatever is there, the CI can simply parse it and
- this is different to today's status - the module dependencies are tracked
within the module instead of in the external qt5.git.


Simon

From gunnar at sletta.org  Thu Jun 11 15:50:30 2015
From: gunnar at sletta.org (Gunnar Sletta)
Date: Thu, 11 Jun 2015 15:50:30 +0200
Subject: [Development] QSceneGraph debugging
In-Reply-To: <55797FF3.5000104@pelagicore.com>
References: <55797FF3.5000104@pelagicore.com>
Message-ID: <FDC5C7F4-B9AA-4F01-9DDA-A3EAE6BAF171@sletta.org>

Hi Thomas,

You are hitting one of the less ideal code paths with this testcase, see my comments below. I think the core problems are already outlined in https://bugreports.qt.io/browse/QTBUG-42853.

> On 11 Jun 2015, at 14:32, Thomas Senyk <thomas.senyk at pelagicore.com> wrote:
>
> Hi,
>
> currently trying to debug a weird behavior on a TI chip (armv7 with a
> SGX GPU).
>
>
> I have a fairly simple QML with a simple GridView with model:200 and
> delegate:Text{text: "T#"+index}.
> (it's a tiny bit more then that, but for argument sake this should be
> enough)
>
> Then an animation scrolling up and down (on "contentY", without items
> leaving the screen to avoid item creation in performance debugging).
>
> So far so good .. plain 60fps, all frames ~16ms
>
> But when I do
>          color:  Qt.rgba(Math.random(), 1, 1,1);   [4]
> on the Text-delegate, then I get very bad performance (<20fps).
>
> Looking closer at the frame times it's good performance for a couple of
> frames (~16ms) and then one terrible frame with >200ms.
>
> That in mind I dug further .. and found that it's:
> In every "bad" frame
> Updater::visitGeometryNode [1]
> this is called with m_added==1
>
> And this causes (because e->root==0 [2])
> renderer->m_rebuild |= Renderer::FullRebuild;
>
> Then nearly all the frame time (>200ms) is spend uploading the new
> batches in Renderer::uploadBatch [3]
>
>
> Comparing all that with the "black"-case I see:
>  - Batch  0 0x281f58 upload  root: 0x1a4a58
>    - element: 0x27ad18 Rect( -0.833333 0.576389 27.4661 13.5365 )
> node: GeometryNode( 0x27ab30 triangles #V: 12 #I: 18 x1= -0.833333 y1=
> 0.576389 x2= 27.4661 y2= 13.5365 materialtype= 0xb6fad3c4 )  order: 1
>    - element: 0x279ca0 Rect( 79.1667 0.732639 107.666 13.3889 )  node:
> GeometryNode( 0x279ab8 triangles #V: 12 #I: 18 x1= -0.833333 y1=
> 0.732639 x2= 27.6658 y2= 13.3889 materialtype= 0xb6fad3c4 )  order: 2
>    - element: 0x278c28 Rect( 159.167 0.576389 187.327 13.3889 )  node:
> GeometryNode( 0x278a40 triangles #V: 12 #I: 18 x1= -0.833333 y1=
> 0.576389 x2= 27.3273 y2= 13.3889 materialtype= 0xb6fad3c4 )  order: 3
>
> ...all in one Batch.
>
> For color:
>  - Batch  0 0x2845f8 upload  root: 0x16bd58
>    - element: 0x283a20 Rect( -0.833333 0.576389 27.4661 13.5365 )
> node: GeometryNode( 0x283838 triangles #V: 12 #I: 18 x1= -0.833333 y1=
> 0.576389 x2= 27.4661 y2= 13.5365 materialtype= 0xb6f583c4 )  order: 1
>  - Batch  1 0x1702c8 upload  root: 0x16bd58
>    - element: 0x2829a8 Rect( 79.1667 0.732639 107.666 13.3889 )  node:
> GeometryNode( 0x2827c0 triangles #V: 12 #I: 18 x1= -0.833333 y1=
> 0.732639 x2= 27.6658 y2= 13.3889 materialtype= 0xb6f583c4 )  order: 2
>  - Batch  2 0x2853a0 upload  root: 0x16bd58
>    - element: 0x281930 Rect( 159.167 0.576389 187.327 13.3889 )  node:
> GeometryNode( 0x281748 triangles #V: 12 #I: 18 x1= -0.833333 y1=
> 0.576389 x2= 27.3273 y2= 13.3889 materialtype= 0xb6f583c4 )  order: 3
>
> ... one node one batch [4].
>
> So batching can't work on differently colored elements/text/..?
>     ... is color a uniform per draw call?
>
>
>
> From the past I know that my test-case had good performance on older
> SoCs .. so the question I have right now are:
>
> [1]: There shouldn't be a new Node .. nothing new is created?

I don?t understand the question.

>
> [2]: Should one simple node cause all batches to be re-uploaded?
>        .. or better: why do I get Renderer::FullRebuild?

It depends, but when you are adding and removing nodes it may happen. If this is combined with plenty of batches this will kill performance. More than 100 discrete glMap/Unmap/Draw calls per frame is likely to not be feasible on embedded hardware. And the renderer is also adding some overhead when the number of batches go up.

> [3]: If all above is normal, then maybe it's the data upload that's to
> long? glBufferData in unmap is 300-400us on average (with ~200 of them
> in each "bad" frame) .. is that "normal"? sounds rather long for a
> couple of vertices (if it's only a couple of vertices?)

Uploading and scheduling drawing is slow. This is why we want things to be batched so we minimise the overhead. You are currently hitting a worst case.

> [4]: And again: I guess batching on non color-sharing elements is
> supposed to not work?

Text elements are only batched if they have the same color.

The Rectangle node uses vertex-coloring which is batchable. The Image nodes use a texture atlas which means they share state, so small-medium sizes images are also batchable. We could have fixed the text node by putting the text color into the text vertices, but I have not done that as it would make the already significant memory footprint even higher. And most text elements are black, gray or white anyway, so in practice it hasn?t been that bad. But as you see, it doesn?t cover everything.

As the task indicates, I'v been toying with the idea of putting the glyphs into point sprites, so we could get away with one vertex per glyph and that way make it cheap and sensible to make it per-vertex colored which would allow batching across colors, but I haven?t gotten around to that yet.

cheers,
Gunnar

>
>
>
> Greets
> Thomas
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development


From Simon.Hausmann at theqtcompany.com  Thu Jun 11 16:11:02 2015
From: Simon.Hausmann at theqtcompany.com (Hausmann Simon)
Date: Thu, 11 Jun 2015 14:11:02 +0000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <CALX7-s4=XfgUanzsXrZzDuMDGafvCYCrmBnnFY4PJ+RFkm73sw@mail.gmail.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<13279726.762LyY3m5A@tjmaciei-mobl4>
	<20150610151406.5693520.88469.26350@theqtcompany.com>,
	<CALX7-s4=XfgUanzsXrZzDuMDGafvCYCrmBnnFY4PJ+RFkm73sw@mail.gmail.com>
Message-ID: <AM3PR02MB094638010CFFC93FE5E02D6AF5BC0@AM3PR02MB0946.eurprd02.prod.outlook.com>

Hi,

I agree about the inconsistency in tense, that is a good argument against error(),
although it is similarly unfortunate that the inconsistency in tense is more widespread than
assumed.

I'm not sure onErred or onErrored is any better, to be honest. I think it's more likely
to result in a typo than the most basic form of the word - error - instead of some conjugation.

In the light of that I think I'd prefer onFailed or onFailure - but I think it would perhaps be
a mistake to make our existing APIs more inconsistent than necessary. It seems like an
unfortunate choice, but I think it's better to stick to error() than to have some QML types
have onError and some have onFailure.

Simon

________________________________________
From: Alan Alpert <416365416c at gmail.com>
Sent: Wednesday, June 10, 2015 18:59
To: Hausmann Simon
Cc: Thiago Macieira; development at qt-project.org
Subject: Re: [Development] Avoid overloading of 'error'

On Wed, Jun 10, 2015 at 8:14 AM, Hausmann Simon
<Simon.Hausmann at theqtcompany.com> wrote:
> Hi,
>
> I think renaming the getter to lastError is nice! I however do like error as signal name and it looks good in qml as onError:...

I disagree that it looks good in QML as onError, almost all other
signal handlers are past tense so it is visibly odd. But it's nice to
be so short, so maybe a direct past-tense-ify of "onErrored"? If you
don't like using error as a verb, we can use a similar (yet shorter)
verb: "onErred". Not that I really mind the exact name of the new
signal.

--
Alan Alpert

From thomas.senyk at pelagicore.com  Thu Jun 11 16:16:55 2015
From: thomas.senyk at pelagicore.com (Thomas Senyk)
Date: Thu, 11 Jun 2015 16:16:55 +0200
Subject: [Development] QSceneGraph debugging
In-Reply-To: <FDC5C7F4-B9AA-4F01-9DDA-A3EAE6BAF171@sletta.org>
References: <55797FF3.5000104@pelagicore.com>
	<FDC5C7F4-B9AA-4F01-9DDA-A3EAE6BAF171@sletta.org>
Message-ID: <55799857.9040400@pelagicore.com>

On 11.06.2015 15:50, Gunnar Sletta wrote:
> Hi Thomas,
>
> You are hitting one of the less ideal code paths with this testcase, see my comments below. I think the core problems are already outlined in https://bugreports.qt.io/browse/QTBUG-42853.
>
>> On 11 Jun 2015, at 14:32, Thomas Senyk <thomas.senyk at pelagicore.com> wrote:
>>
>> Hi,
>>
>> currently trying to debug a weird behavior on a TI chip (armv7 with a
>> SGX GPU).
>>
>>
>> I have a fairly simple QML with a simple GridView with model:200 and
>> delegate:Text{text: "T#"+index}.
>> (it's a tiny bit more then that, but for argument sake this should be
>> enough)
>>
>> Then an animation scrolling up and down (on "contentY", without items
>> leaving the screen to avoid item creation in performance debugging).
>>
>> So far so good .. plain 60fps, all frames ~16ms
>>
>> But when I do
>>           color:  Qt.rgba(Math.random(), 1, 1,1);   [4]
>> on the Text-delegate, then I get very bad performance (<20fps).
>>
>> Looking closer at the frame times it's good performance for a couple of
>> frames (~16ms) and then one terrible frame with >200ms.
>>
>> That in mind I dug further .. and found that it's:
>> In every "bad" frame
>> Updater::visitGeometryNode [1]
>> this is called with m_added==1
>>
>> And this causes (because e->root==0 [2])
>> renderer->m_rebuild |= Renderer::FullRebuild;
>>
>> Then nearly all the frame time (>200ms) is spend uploading the new
>> batches in Renderer::uploadBatch [3]
>>
>>
>> Comparing all that with the "black"-case I see:
>>   - Batch  0 0x281f58 upload  root: 0x1a4a58
>>     - element: 0x27ad18 Rect( -0.833333 0.576389 27.4661 13.5365 )
>> node: GeometryNode( 0x27ab30 triangles #V: 12 #I: 18 x1= -0.833333 y1=
>> 0.576389 x2= 27.4661 y2= 13.5365 materialtype= 0xb6fad3c4 )  order: 1
>>     - element: 0x279ca0 Rect( 79.1667 0.732639 107.666 13.3889 )  node:
>> GeometryNode( 0x279ab8 triangles #V: 12 #I: 18 x1= -0.833333 y1=
>> 0.732639 x2= 27.6658 y2= 13.3889 materialtype= 0xb6fad3c4 )  order: 2
>>     - element: 0x278c28 Rect( 159.167 0.576389 187.327 13.3889 )  node:
>> GeometryNode( 0x278a40 triangles #V: 12 #I: 18 x1= -0.833333 y1=
>> 0.576389 x2= 27.3273 y2= 13.3889 materialtype= 0xb6fad3c4 )  order: 3
>>
>> ...all in one Batch.
>>
>> For color:
>>   - Batch  0 0x2845f8 upload  root: 0x16bd58
>>     - element: 0x283a20 Rect( -0.833333 0.576389 27.4661 13.5365 )
>> node: GeometryNode( 0x283838 triangles #V: 12 #I: 18 x1= -0.833333 y1=
>> 0.576389 x2= 27.4661 y2= 13.5365 materialtype= 0xb6f583c4 )  order: 1
>>   - Batch  1 0x1702c8 upload  root: 0x16bd58
>>     - element: 0x2829a8 Rect( 79.1667 0.732639 107.666 13.3889 )  node:
>> GeometryNode( 0x2827c0 triangles #V: 12 #I: 18 x1= -0.833333 y1=
>> 0.732639 x2= 27.6658 y2= 13.3889 materialtype= 0xb6f583c4 )  order: 2
>>   - Batch  2 0x2853a0 upload  root: 0x16bd58
>>     - element: 0x281930 Rect( 159.167 0.576389 187.327 13.3889 )  node:
>> GeometryNode( 0x281748 triangles #V: 12 #I: 18 x1= -0.833333 y1=
>> 0.576389 x2= 27.3273 y2= 13.3889 materialtype= 0xb6f583c4 )  order: 3
>>
>> ... one node one batch [4].
>>
>> So batching can't work on differently colored elements/text/..?
>>      ... is color a uniform per draw call?
>>
>>
>>
>>  From the past I know that my test-case had good performance on older
>> SoCs .. so the question I have right now are:
>>
>> [1]: There shouldn't be a new Node .. nothing new is created?
>
> I don?t understand the question.

Nothing in the UI is entering/leaving screen or explicitly
created/destroyed ... so I wonder where the new Node comes from.

I'll look closer at what the Node is.

>
>>
>> [2]: Should one simple node cause all batches to be re-uploaded?
>>         .. or better: why do I get Renderer::FullRebuild?
>
> It depends, but when you are adding and removing nodes it may happen. If this is combined with plenty of batches this will kill performance. More than 100 discrete glMap/Unmap/Draw calls per frame is likely to not be feasible on embedded hardware. And the renderer is also adding some overhead when the number of batches go up.
>

Got it .. so somehow the above mentioned "new Node" causes all the
restruct/data-re-upload .. we'll look into it.

>> [3]: If all above is normal, then maybe it's the data upload that's to
>> long? glBufferData in unmap is 300-400us on average (with ~200 of them
>> in each "bad" frame) .. is that "normal"? sounds rather long for a
>> couple of vertices (if it's only a couple of vertices?)
>
> Uploading and scheduling drawing is slow. This is why we want things to be batched so we minimise the overhead. You are currently hitting a worst case.
>
>> [4]: And again: I guess batching on non color-sharing elements is
>> supposed to not work?
>
> Text elements are only batched if they have the same color.
>
> The Rectangle node uses vertex-coloring which is batchable. The Image nodes use a texture atlas which means they share state, so small-medium sizes images are also batchable. We could have fixed the text node by putting the text color into the text vertices, but I have not done that as it would make the already significant memory footprint even higher. And most text elements are black, gray or white anyway, so in practice it hasn?t been that bad. But as you see, it doesn?t cover everything.
>
> As the task indicates, I'v been toying with the idea of putting the glyphs into point sprites, so we could get away with one vertex per glyph and that way make it cheap and sensible to make it per-vertex colored which would allow batching across colors, but I haven?t gotten around to that yet.
>

Got it! So random (/many) colors on fonts are a no-go for now!
Fair enough given the overall good performance of font rendering in Quick2.

FYI: The "real" case is possible not even using many colors .. it was
just me initial debug-case to work with. .. and I wanted to unterstand
what's going on


Thanks!


> cheers,
> Gunnar
>
>>
>>
>>
>> Greets
>> Thomas
>> _______________________________________________
>> Development mailing list
>> Development at qt-project.org
>> http://lists.qt-project.org/mailman/listinfo/development
>


From gunnar at sletta.org  Thu Jun 11 17:24:40 2015
From: gunnar at sletta.org (Gunnar Sletta)
Date: Thu, 11 Jun 2015 17:24:40 +0200
Subject: [Development] QSceneGraph debugging
In-Reply-To: <55799857.9040400@pelagicore.com>
References: <55797FF3.5000104@pelagicore.com>
	<FDC5C7F4-B9AA-4F01-9DDA-A3EAE6BAF171@sletta.org>
	<55799857.9040400@pelagicore.com>
Message-ID: <C387725D-E14A-490B-AA3D-4461D9AC1C8E@sletta.org>


> On 11 Jun 2015, at 16:16, Thomas Senyk <thomas.senyk at pelagicore.com> wrote:
>
?

> Nothing in the UI is entering/leaving screen or explicitly created/destroyed ... so I wonder where the new Node comes from.
>
> I'll look closer at what the Node is.

QSG_VISUALIZE=changes and/or QSG_RENDERER_DEBUG=changes might help pinpoint it.

cheers,
Gunnar


From oswald.buddenhagen at theqtcompany.com  Thu Jun 11 18:47:40 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Thu, 11 Jun 2015 18:47:40 +0200
Subject: [Development] Specifying module dependencies
In-Reply-To: <2162083.TQU43La6D2@simon-sx58>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>
	<20150610203206.5693520.9858.26394@theqtcompany.com>
	<20150611102910.GD6652@troll08.it.local>
	<2162083.TQU43La6D2@simon-sx58>
Message-ID: <20150611164740.GC8645@troll08.it.local>

On Thu, Jun 11, 2015 at 03:43:15PM +0200, Simon Hausmann wrote:
> On Thursday, June 11, 2015 12:29:10 PM Oswald Buddenhagen wrote:
> > On Wed, Jun 10, 2015 at 08:32:07PM +0000, Hausmann Simon wrote:
> > > Hi,
> > >
> > > Ok :) let's try with reduced qmake syntax (just variables, no functions).
> > > We can still fall back to json if it's too clumsy.
> > as you can "parse anything", what's wrong with parsing the function
> > calls from qt.pro? they match a pretty simple regexp ...
>
> Nothing is wrong with that. In fact that's a great idea :)
>
> So how about we place a dependencies.pri into the top-level directory of each
> module that contains just that one addModule(...) function call?
>
> Then qt.pro can just include whatever is there, the CI can simply parse it and
> - this is different to today's status - the module dependencies are tracked
> within the module instead of in the external qt5.git.
>
it's not that easy.

you won't get rid of the redundant dependency specifications anyway,
because qt.pro (and the sync.profile's) are about repository deps, while
the module's requires() (and whatever other methods they use to exclude
themselves) are about module (and non-qt) deps.

about sync.profile and pinning, i think you didn't consider non-mainline
branches in your plan. you need to specify the branches of the other
modules you want to build against *somewhere*. nowadays that could be
actually qt5.git's .gitmodules, as it now contains the branches. of
course, this implies branching qt5.git for every CI-controlled
non-mainline branch. this actually sounds quite logical. i'm all for
removing the inter-repo deps from sync.profile - it was never meant to
contain them in the first place.


From steveire at gmail.com  Thu Jun 11 19:42:55 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Thu, 11 Jun 2015 19:42:55 +0200
Subject: [Development] Some Qt3D feedback
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111229.34666.marc.mutz@kdab.com>
	<CACHsx4JYxgcvvp0BNLH-5qiqqd09W2RA027exsacigppGEi5uQ@mail.gmail.com>
	<201506111446.20906.marc.mutz@kdab.com>
Message-ID: <mlchav$7eg$1@ger.gmane.org>

Marc Mutz wrote:
> On Thursday 11 June 2015 13:09:39 Stephen Kelly wrote:
>> I didn't make any claim that "the use of a namespace for a Qt library is
>> new".
>>
>> Whatever you rebutted was not my claim.

So, you believe there is no use in pursuing any of the questions I asked
here:

 http://thread.gmane.org/gmane.comp.lib.qt.devel/21775/focus=21865

Fair enough. That appears to be the mailing list consensus.

Maybe the wiki page for new modules should recommend coin flips to answer
those questions :).

Thanks,

Steve.



From sean.harmer at kdab.com  Thu Jun 11 19:46:54 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Thu, 11 Jun 2015 18:46:54 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <mlchav$7eg$1@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111446.20906.marc.mutz@kdab.com>
	<mlchav$7eg$1@ger.gmane.org>
Message-ID: <1637657.fa75jvLXrZ@titan>

On Thursday 11 June 2015 19:42:55 Stephen Kelly wrote:
> Marc Mutz wrote:
> > On Thursday 11 June 2015 13:09:39 Stephen Kelly wrote:
> >> I didn't make any claim that "the use of a namespace for a Qt library is
> >> new".
> >>
> >> Whatever you rebutted was not my claim.
>
> So, you believe there is no use in pursuing any of the questions I asked
> here:
>
>  http://thread.gmane.org/gmane.comp.lib.qt.devel/21775/focus=21865
>
> Fair enough. That appears to be the mailing list consensus.
>
> Maybe the wiki page for new modules should recommend coin flips to answer
> those questions :).

I said I'm happy to discuss. I'm just waiting for some more opinions, please
don't take that as me trying to shut the discussion down. :)

Cheers,

Sean
--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel. Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - Qt Experts - Platform-independent software solutions

From steveire at gmail.com  Thu Jun 11 19:50:03 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Thu, 11 Jun 2015 19:50:03 +0200
Subject: [Development] Some Qt3D feedback
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111446.20906.marc.mutz@kdab.com>
	<mlchav$7eg$1@ger.gmane.org> <1637657.fa75jvLXrZ@titan>
Message-ID: <mlchoc$it1$1@ger.gmane.org>

Sean Harmer wrote:

> On Thursday 11 June 2015 19:42:55 Stephen Kelly wrote:
>> Marc Mutz wrote:
>> > On Thursday 11 June 2015 13:09:39 Stephen Kelly wrote:
>> >> I didn't make any claim that "the use of a namespace for a Qt library
>> >> is new".
>> >>
>> >> Whatever you rebutted was not my claim.
>>
>> So, you believe there is no use in pursuing any of the questions I asked
>> here:
>>
>>  http://thread.gmane.org/gmane.comp.lib.qt.devel/21775/focus=21865
>>
>> Fair enough. That appears to be the mailing list consensus.
>>
>> Maybe the wiki page for new modules should recommend coin flips to answer
>> those questions :).
>
> I said I'm happy to discuss. I'm just waiting for some more opinions,
> please don't take that as me trying to shut the discussion down. :)

Cool. Let's wait and see.

Thanks,

Steve.



From steveire at gmail.com  Thu Jun 11 19:57:13 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Thu, 11 Jun 2015 19:57:13 +0200
Subject: [Development] Some Qt3D feedback
References: <ml2j2r$eg3$1@ger.gmane.org> <2646160.nJGqpQo0xz@cartman>
	<mla1m4$1bk$1@ger.gmane.org> <3582065.6MfDC8jFMz@cartman>
Message-ID: <mlci5p$sra$1@ger.gmane.org>

Sean Harmer wrote:

>> I don't know. As far as I know deciding to use a namespace for this one
>> was done without discussion on the mailing list?
>
> There has been at least some discussion of namespaces in the past. For
> e.g.
>
> http://lists.qt-project.org/pipermail/development/2012-August/005580.html
>
> And it's not like we've done this in secret.

I don't think I implied that it was!

Thanks for the response. Let's see if anyone else has thoughts on this that
they want to share.

Thanks,

Steve.



From 416365416c at gmail.com  Thu Jun 11 20:29:11 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Thu, 11 Jun 2015 11:29:11 -0700
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <AM3PR02MB094638010CFFC93FE5E02D6AF5BC0@AM3PR02MB0946.eurprd02.prod.outlook.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<13279726.762LyY3m5A@tjmaciei-mobl4>
	<20150610151406.5693520.88469.26350@theqtcompany.com>
	<CALX7-s4=XfgUanzsXrZzDuMDGafvCYCrmBnnFY4PJ+RFkm73sw@mail.gmail.com>
	<AM3PR02MB094638010CFFC93FE5E02D6AF5BC0@AM3PR02MB0946.eurprd02.prod.outlook.com>
Message-ID: <CALX7-s5iAf-sERD2SpfjR6NDDWQkpM4sodZ010B08cj-fj_L7A@mail.gmail.com>

On Thu, Jun 11, 2015 at 7:11 AM, Hausmann Simon
<Simon.Hausmann at theqtcompany.com> wrote:
> Hi,
>
> I agree about the inconsistency in tense, that is a good argument against error(),
> although it is similarly unfortunate that the inconsistency in tense is more widespread than
> assumed.
>
> I'm not sure onErred or onErrored is any better, to be honest. I think it's more likely
> to result in a typo than the most basic form of the word - error - instead of some conjugation.
>
> In the light of that I think I'd prefer onFailed or onFailure - but I think it would perhaps be
> a mistake to make our existing APIs more inconsistent than necessary. It seems like an
> unfortunate choice, but I think it's better to stick to error() than to have some QML types
> have onError and some have onFailure.

I strongly advocate against replacing onError with onFailure. The
issue as I see it is a conflict between classic (perhaps BASIC
derived?) convention of handlers being "on" + <state noun> versus our
convention of "on" + <past tense verb>. Failure, Error (and success,
completion etc.) are all the old convention so it's not worth moving
from Error just to another word in the same convention that we're
trying to escape from. I also don't like to conceptually pin error to
failure, because in rare cases you can still have a partial success
despite an error condition.

Since there is this other convention that uses "onError" a lot (at
least in XMLHttpRequest), I can see how a similar (but past tense)
word would be confusing to many developers. So now we're weighing the
cost of confusing both new and old developers just to make the
refactoring support work better. I'm no longer convinced it's
worthwhile, so I'm with Simon on that it's better to stick to error()
for now. At least for the QML exposed APIs.

> If I break out the thesaurus, then we also have
>
>       errorBefell

If we want to sound fancy, we can use an obscure language and then it
can be shorter too: tokFeil . Also solves the problem of looking like
other APIs, as they limited themselves to English.

--
Alan Alpert

From 416365416c at gmail.com  Thu Jun 11 20:47:36 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Thu, 11 Jun 2015 11:47:36 -0700
Subject: [Development] [QtCS] QtRemoteObjects Session Summary
In-Reply-To: <D19E5501.230B%bstottle@ford.com>
References: <CALX7-s7sbB0Gpb_7M-B__tWGAtB75K3xbdQR6izaDihNmqP0xw@mail.gmail.com>
	<2030608.WcmVyIMcUm@simon-sx58>
	<CALX7-s7BLR3jjwnRn02r1oHVzOtbaLxOVDMyg3EshEmH=eQQMQ@mail.gmail.com>
	<D19E5501.230B%bstottle@ford.com>
Message-ID: <CALX7-s5bsSgiTcF-a3QM_TLv6Nxxnoio1LseR7Ut3bSC+A5Neg@mail.gmail.com>

On Wed, Jun 10, 2015 at 7:21 PM, Stottlemyer, Brett (B.S.)
<bstottle at ford.com> wrote:
> Hi Alan.  Hi Simon.
>
> On 6/10/15, 4:23 PM, "Alan Alpert" <416365416c at gmail.com> wrote:
>>On Wed, Jun 10, 2015 at 6:52 AM, Simon Hausmann
>><simon.hausmann at theqtcompany.com> wrote:
>>> On Tuesday, June 09, 2015 01:23:29 PM Alan Alpert wrote:
>>>> A brief overview of planned features:
>>>> -QML API
>>>> -Protocol Layer Adapters
>>>> -Investigate merge with QWebChannel (sounds similar, of course no-one
>>>> working on QWebChannel was present to confirm).
>>>>
>>>> After it is established with those features and solid quality, it
>>>> could be considered to promote it to an add-on module.
>
> I?m the one who talked about QtRO (it was named Replicant at the time) at
> last year?s Contributors Summit and requested the playground.  I
> definitely like the idea of making it an add-on module, but are you
> suggesting it needs protocol layer adapters as a prerequisite?

That was the impression I got from the session. Really it's just that
the developers want it ready before submitting it as an add-on module,
and supporting a second usecase (like QWebChannel) is a strong sign of
that. It sounded like QWebChannel needed the protocol adapters before
they could jump in.

There's a strong argument for making it an add-on module if we have
three separate use-cases served (Ford, BlackBerry, QWebChannel). That
demonstrates at least some level of value beyond a specific use-case.

> The additional QML API piece would be welcome, and I?m open to see if
> there is benefit to merge/code share with QWebChannel.  I?ve always been
> resistant to try to make QtRO play nice with other languages, though.  Of
> course that would be fantastic!  No argument there.  But you?ve already
> mentioned one of the difficulties - exported abstractitemmodels.  That is
> a very Qt specific implementation, with support for QVariant types and
> specific roles.  And concrete signals/slots.  It isn?t a matter of simply
> passing data to another language (although that is hard enough when it
> comes to all the types Qt supports marshaling for already).  Even if you
> could pass the data to python or java effectively, how would the receiver
> be expected to display the results?

They have their own modules on their side. One of the sessions you
missed included a demo with Meteor.js talking to QML applications
using a somewhat similar approach. It had custom logic that mapped
Meteor's wire protocol into QObject like structures so that QML could
use it. Or at least that's how I assume it worked, given that I have a
similar case myself with a specific node.js server at work (all this
travel and 5.5.0 release and I haven't had a chance to checkout
Attila's code yet). It would *NOT* be a generic "Java to C++" level
adapter, it's specific FW (Qt) to specific FW (e.g. Meteor.js)
assuming they have QObject compatible semantics.

> QtRO also supports ?dynamic? objects, where the method, signal and
> property signatures are sent over the wire to allow a dynamic metaobject
> to be created.  IIRC, even protocol buffers need to be compiled on all
> sides, at least in C/C++.  Would this be a feature you would intend to
> support in an adapter?
>
> Do you have a good way of doing this without either a) duplicating a lot
> of functionality interspersed throughout Qt, or b) adding a tremendous
> burden to QtRO?  Again, I like the idea, I just worry about the
> implementation cost.

Then I'll start working on the implementation, because my idea of it
was that the cost would be low. I'll add you to the change on gerrit
when I have a draft ready.

>>>> The idea with protocol adapters is that currently it only sends
>>>> QDataStream output over the wire. I want to send more accessible
>>>> JSON-RPC (like) data over the wire for working with node, and Attila
>>>> had a demo of getting object data from Meteor (although that was
>>>> custom hacked for demo purposes). Protocol adapters will allow you to
>>>> serialize it in these other forms, and that is the mechanism by which
>>>> we gain compatibility with other languages/frameworks without them
>>>> needing explicit QRO support - We'll talk their language if there
>>>> exists compatible semantics. They'll probably remain separate from the
>>>> transport adapters, but we'll see how the implementation develops.
>>>> I'll start looking into the implementation this month.
>
> I look forward to seeing what you propose.
>
>>> I feel that mistake is made over and over again in many similar
>>>designs. It is
>>> perhaps one area where the web development is doing better. It's my
>>>(perhaps
>>> incorrect?) impression that web services tend to be accessed using more
>>> explicit code instead of using transparent method calls or property
>>>access.
>>> The XMLHttpRequest API is one example here, and the promises based
>>>fetch() API
>>> makes this even better IMHO.
>>
>>This is attempted to be addressed (at least from the QML API) by
>>having explicit node objects. It can have error handling and state
>>communication (still to be designed), and fall-back mechanisms like
>>default values. I agree error handling shouldn't be hidden entirely,
>>but I would also say that it's still an area where we want to make
>>developer's lives easier with pre-built common-case logic.
>
> This is how it is currently addressed in C++ as well, although we need to
> expose the errors as signals and enhance this area.
>
>>We already have the XMLHttpRequest API for distributed systems. The
>>point of QRO, as I see it, is something more convenient and more
>>pre-made by comparison.
>
> Indeed.  QtRO makes it trivial to create a Replica of a Qt object in
> another process or on another device.  You interact with the Replica just
> as you would the original object.  It doesn?t hide errors, but also
> doesn?t require overhead for nominal/happy-path behavior.
>
>>> The other aspect that I think is crucial in a distributed system is
>>> compatibility. This is why systems like thrift and protocol buffers
>>>exist:
>>> They provide type safety (!) and make it really easy to maintain wire
>>> compatibility. JSON is also "okay" with this, but it has the huge
>>>disadvantage
>>> that usually json formats are "untyped".
>>>
>>
>>Anything you think our transport and protocol layer adapters is
>>missing in this respect? Even if we first have to write a protocol
>>layer adapter for each piece of compatibility we want, I imagine we
>>could eventually hit upon a suitably general (yet performant) protocol
>>adapter which can become standard.
>
> I?m guessing you have a particular adapter in mind to start with.  What is
> it?

I have a JSON based system at work that I need to support, but it
might not be something I can share. I intend to look into meteor.js,
it sounds like it might be very similar to my BlackBerry needs and
serve better as a public example.

--
Alan Alpert

From apoenitz at t-online.de  Thu Jun 11 22:07:00 2015
From: apoenitz at t-online.de (=?iso-8859-1?Q?Andr=E9_P=F6nitz?=)
Date: Thu, 11 Jun 2015 22:07:00 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <D19F1872.32124%lars.knoll@theqtcompany.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<AM3PR02MB0534124D8A311638A0558137E4BE0@AM3PR02MB0534.eurprd02.prod.outlook.com>
	<20150609113514.GE26200@troll08.it.local>
	<201506111138.40390.marc.mutz@kdab.com>
	<D19F1872.32124%lars.knoll@theqtcompany.com>
Message-ID: <20150611200659.GA3340@klara.mpi.htwm.de>

On Thu, Jun 11, 2015 at 08:55:24AM +0000, Knoll Lars wrote:
> >On Tuesday 09 June 2015 13:35:14 Oswald Buddenhagen wrote:
> >> On Tue, Jun 09, 2015 at 10:59:32AM +0000, Heikkinen Jani wrote:
> >> > Hi,
> >> >
> >> > I tried to create error reports about the findings to be able to
> >> > follow-up the progress. Please create new one if something is missing.
> >>
> >> the point was about the entirely new headers that were not in the diffs,
> >> i.e., entirely new apis. it's a quite different (and much bigger) task
> >> than ensuring compatibility with existing api revisions.
> >>
> >> i can create a task, but it's not up to me to actually schedule it. lars
> >> (or multiple other maintainers) need to make that call.
> >
> >Any news on this? Will we set aside time to look at the new API in more
> >depth
> >before publishing or will we rush out 5.5 with known and unknown API
> >issues?
> >
> >(yes, this question is meant to be suggestive :)
>
> Well, afaik the new APIs have been reviewed, but maybe not as widely as we
> should have. But so far, I haven?t seen bigger issues apart from the one
> in Qt Network.
>
> We?ll have to weight things against each other. Looking at that, I don?t
> believe delaying 5.5 is a good option as we?re getting extremely close to
> the summer break. I don?t think releasing in August is a better idea.
>
> So I propose we?ll sit down here in the office today and tomorrow with a
> few people and go through the new APIs to be certain we didn?t miss any
> big issues. That?s the fastest way to get some certainty without too large
> risks to delay our release.

I'd guess that's pretty much the best solution for now.

Looking a bit further: (More or less) consistent API used to be one of
the core values of Qt. Right now introducing new API in a consistent
way seems to work mostly by inertia - *if* it works.

I also doubt it will work that way for eternity, as accidents (and worse,
intentional deviations from established patterns and conventions by some
approvers) accumulate.

To be blunt: Even though some of the existing patterns and conventions
*are* unfashionable in 2015, consistency is a value by itself. Any
*partial* "modernization" of the API destroys that consistency, and
therefore value. So even if "use pattern B instead of A" is
uncontroversial when considered isolated, it's not a given that using
B instead of A in new Qt API is a win. And that ignores the fact that
there's rarely an situaion of a B being *uniformly* better than an A.

Sitting down with a few people *is* a way to fix things up last minute,
but I'd feel more comfortable if something to the same effect was formal
part of the process.

I am not sure about the concrete abilities of gerrit infrastructure, but
having a bot adding a specific user (or two, or three) to any change
introducing new API does not seem completely impossible.

Regarding the specific user(s): Less is more. Looking back, the time
it worked best for me was when it was clear who the single person to
ask about names and conventions was. Yes, that's a bottleneck for the
process, but getting uniformity by simulated annealing is extremely
unlikely if the initial solution is immutable. Such as our API after
the first release.

Andre'

From Frederik.Gladhorn at theqtcompany.com  Thu Jun 11 22:30:37 2015
From: Frederik.Gladhorn at theqtcompany.com (Gladhorn Frederik)
Date: Thu, 11 Jun 2015 20:30:37 +0000
Subject: [Development] Specifying module dependencies
In-Reply-To: <20150611164740.GC8645@troll08.it.local>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>
	<20150610203206.5693520.9858.26394@theqtcompany.com>
	<20150611102910.GD6652@troll08.it.local>
	<2162083.TQU43La6D2@simon-sx58>,
	<20150611164740.GC8645@troll08.it.local>
Message-ID: <VI1PR02MB1071168DBA2B19460BD36FF095BC0@VI1PR02MB1071.eurprd02.prod.outlook.com>

On Thursday 11. June 2015 18.47.40 Oswald Buddenhagen wrote:
> On Thu, Jun 11, 2015 at 03:43:15PM +0200, Simon Hausmann wrote:
> > On Thursday, June 11, 2015 12:29:10 PM Oswald Buddenhagen wrote:
> > > On Wed, Jun 10, 2015 at 08:32:07PM +0000, Hausmann Simon wrote:
> > > > Hi,
> > > >
> > > > Ok :) let's try with reduced qmake syntax (just variables, no
> > > > functions).
> > > > We can still fall back to json if it's too clumsy.
> > >
> > > as you can "parse anything", what's wrong with parsing the function
> > > calls from qt.pro? they match a pretty simple regexp ...
> >
> > Nothing is wrong with that. In fact that's a great idea :)
> >
> > So how about we place a dependencies.pri into the top-level directory of
> > each module that contains just that one addModule(...) function call?
> >
> > Then qt.pro can just include whatever is there, the CI can simply parse it
> > and - this is different to today's status - the module dependencies are
> > tracked within the module instead of in the external qt5.git.
>
> it's not that easy.
>
> you won't get rid of the redundant dependency specifications anyway,
> because qt.pro (and the sync.profile's) are about repository deps, while
> the module's requires() (and whatever other methods they use to exclude
> themselves) are about module (and non-qt) deps.
>
> about sync.profile and pinning, i think you didn't consider non-mainline
> branches in your plan. you need to specify the branches of the other
> modules you want to build against *somewhere*. nowadays that could be
> actually qt5.git's .gitmodules, as it now contains the branches. of
> course, this implies branching qt5.git for every CI-controlled
> non-mainline branch. this actually sounds quite logical. i'm all for
> removing the inter-repo deps from sync.profile - it was never meant to
> contain them in the first place.

I'm concerned about using qt5.git to hold the information of module dependencies since it will never be complete and the information should imho be with the module, not in some other git repository. From that point of view sync.profile is preferable.
The reason is that it doesn't scale - when a new module is created, it shouldn't have to require registration in qt5.git.
This also applies to modules that are not (yet) part of official releases or that are proprietary for whatever reason. All of these modules don't belong in qt5.git.

Therefore I would propose containing the information of what dependencies a module (on the git repository level) has inside the module itself.

I see that the library level dependencies need to be in the build system, that makes sense since it's more fine-grained.
Maybe we can still aim to have a recommended way of doing this.

Cheers,
Frederik


>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

From apoenitz at t-online.de  Thu Jun 11 23:15:20 2015
From: apoenitz at t-online.de (=?iso-8859-1?Q?Andr=E9_P=F6nitz?=)
Date: Thu, 11 Jun 2015 23:15:20 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <1637657.fa75jvLXrZ@titan>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111446.20906.marc.mutz@kdab.com>
	<mlchav$7eg$1@ger.gmane.org> <1637657.fa75jvLXrZ@titan>
Message-ID: <20150611211520.GA3501@klara.mpi.htwm.de>

On Thu, Jun 11, 2015 at 06:46:54PM +0100, Sean Harmer wrote:
> On Thursday 11 June 2015 19:42:55 Stephen Kelly wrote:
> > Marc Mutz wrote:
> > > On Thursday 11 June 2015 13:09:39 Stephen Kelly wrote:
> > >> I didn't make any claim that "the use of a namespace for a Qt library is
> > >> new".
> > >>
> > >> Whatever you rebutted was not my claim.
> >
> > So, you believe there is no use in pursuing any of the questions I asked
> > here:
> >
> >  http://thread.gmane.org/gmane.comp.lib.qt.devel/21775/focus=21865
> >
> > Fair enough. That appears to be the mailing list consensus.
> >
> > Maybe the wiki page for new modules should recommend coin flips to answer
> > those questions :).
>
> I said I'm happy to discuss. I'm just waiting for some more opinions,

Well. I don't really have *more* opinions to offer, I just happen to
agree with Stephen on all the 8 issues he raised.

Specifically, for item #6:

    [Stephen]
    > Qt3DParamter might be better *and* more consistent.
    > Similar applies to other classes.

    [Sean]
    It's precisely because of these kinds of issues that we decided to use
    namespaces in Qt3D rather than the poor-man's prefix name spacing.
    [...]
    Name spaces are supported everywhere these days so why not just use
    them, especially in a new add-on module?

That's exactly the kind of situation I was referring to in my previous
mail: This is *intentionally* introducing API inconsistency. It does not
really matter to me whether "poor-man's prefix name spacing" is
unfashionable or "we" consider it bad. It is simply *inconsistent* with
more than 200 of existing exported QQuick*, QSG* and QQml* classes.

Andre'

From marc.mutz at kdab.com  Fri Jun 12 00:28:05 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 12 Jun 2015 00:28:05 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <20150611200659.GA3340@klara.mpi.htwm.de>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<D19F1872.32124%lars.knoll@theqtcompany.com>
	<20150611200659.GA3340@klara.mpi.htwm.de>
Message-ID: <201506120028.05644.marc.mutz@kdab.com>

On Thursday 11 June 2015 22:07:00 Andr? P?nitz wrote:
> To be blunt: Even though some of the existing patterns and conventions
> are unfashionable in 2015, consistency is a value by itself. Any
> partial "modernization" of the API destroys that consistency, and
> therefore value. So even if "use pattern B instead of A" is
> uncontroversial when considered isolated, it's not a given that using
> B instead of A in new Qt API is a win. And that ignores the fact that
> there's rarely an situaion of a B being uniformly better than an A.

Would you mind being more specific about what Pattern A and Pattern B you have
in mind?

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Fri Jun 12 00:57:45 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 12 Jun 2015 00:57:45 +0200
Subject: [Development] Qt 5.5.0 header diff
In-Reply-To: <201506120028.05644.marc.mutz@kdab.com>
References: <1822751.A3UDJcD0cB@frederik-thinkcentre-m93p>
	<20150611200659.GA3340@klara.mpi.htwm.de>
	<201506120028.05644.marc.mutz@kdab.com>
Message-ID: <201506120057.46083.marc.mutz@kdab.com>

On Friday 12 June 2015 00:28:05 Marc Mutz wrote:
> On Thursday 11 June 2015 22:07:00 Andr? P?nitz wrote:
> > To be blunt: Even though some of the existing patterns and conventions
> > are unfashionable in 2015, consistency is a value by itself. Any
> > partial "modernization" of the API destroys that consistency, and
> > therefore value. So even if "use pattern B instead of A" is
> > uncontroversial when considered isolated, it's not a given that using
> > B instead of A in new Qt API is a win. And that ignores the fact that
> > there's rarely an situaion of a B being uniformly better than an A.
>
> Would you mind being more specific about what Pattern A and Pattern B you
> have in mind?

Nevermind, just saw your other mail...

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Fri Jun 12 00:58:42 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 12 Jun 2015 00:58:42 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <20150611211520.GA3501@klara.mpi.htwm.de>
References: <ml2j2r$eg3$1@ger.gmane.org> <1637657.fa75jvLXrZ@titan>
	<20150611211520.GA3501@klara.mpi.htwm.de>
Message-ID: <201506120058.42979.marc.mutz@kdab.com>

On Thursday 11 June 2015 23:15:20 Andr? P?nitz wrote:
> That's exactly the kind of situation I was referring to in my previous
> mail: This is intentionally introducing API inconsistency. It does not
> really matter to me whether "poor-man's prefix name spacing" is
> unfashionable or "we" consider it bad. It is simply inconsistent with
> more than 200 of existing exported QQuick*, QSG* and QQml* classes.

For me, QQuick*, QSG*, QQml* are as much inconsistent with QtCore, QtGui and
QtWidget (excepting QGraphics*) naming, where none of the types starts with
poor man's prefix namespacing, as Qt3D::QParameter and QQml*.

Indeed, if you're working an a classical QtWidgets application, you might be
very surprised about all those common prefixes in other modules, and annoyed
by having useless code completion on class names beginning with QGraphics...
:)

And as Qt grows and grows, the chance of name clashes increases
(http://en.wikipedia.org/wiki/Birthday_problem), as witnessed by the
introduction of namespaces for disambiguating names from QtQuick1 and
QtDeclarative. QtMultimedia (which largely uses traditional names) has several
common names, too. Namespaces, if the whole module is wrapped, and the
namespace name is derived consistently from the module's soname, provide a
reliable partition of the name space.

If a new library cannot change the established ways, including to experiment
with it, then Qt will be forever locked in its 90s API, because, let's face
it, come Qt 6, no-one will have the time to implement nor the incentive to
break SC in such a broad way as to lift all of Qt to a new API standard, on
top of all the work that will go into C++11/14-enabling the API, and the
inevitable work on the containers. And the pain will grow and grow.

So, giving each module the leeway to modernize its API at its own pace seems
to me the only workable solution. Of course, APIs should still be consistent,
but whether a module uses namespaces or not doesn't really influence the
consistency. Setters for text will still be called setText() and getters
text(), QObject subclass' ctors will still end in QObject *parent =
0^Wnullptr, etc.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From andre at familiesomers.nl  Fri Jun 12 08:08:51 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Fri, 12 Jun 2015 08:08:51 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
Message-ID: <557A7773.3050903@familiesomers.nl>

Hi,

I made notes in the Modern C++ session. You can also find them on the
Wiki here: https://wiki.qt.io/QtCS2015_ModernCpp but I was requested to
also post them here on the ML. If you were there and remember things
differently, please edit and post a reply with corrections.

======

Sunday June 7, 10:00 AM

Impact on supported compilers: VS2012 from 5.6. onwards and LTS release
Discussed more in depth with the deprecation session
What kind of features do we want, and what version of C++? 11? 14? What
are the minimum requirements, even if we don?t rely on the existance of
the feature? Qt is 5-8 years behind on C++, due to its nature. Auto,
constexpr, lambda?s, r-value ref, decltype, nullptr, ? (missed the
rest). From compiler detection Variadic templates? We don?t use too many
templates at all? QNX is not a problem in terms of compatibility. Gcc
needs 4.7 for decent support of modern cpp. OS/X on gcc is dead, use
clang instead. For windows embedded (EC) rely on MSVC 2012.

Available for use then:
* Auto
* decltype
* nullptr
* r-value ref
* lambda
* class enum
* explicit overrides

Not available for use are:
* uniform initialization and constexpr (is broken in VS2013.)
* Explicit conversions,
* = default,
* = deleted,
* inheriting constructors,
* noexcept

C++/11 needed for user applications as well then. It also lightens the
maintenance burden.

When to use?
============
Don?t go overboard. We need some guidelines. QtCreator team has
experience. r-value, deltype are no-brainers. Class enums are a bit more
of a discussion. It needs testing, and do we want that in the API? There
is an inconsistency with existing API. The Qt:: scope is a big
collection that would have been clearer. Auto is for use in code, not in
API. Use auto where the type is (implicity) also on the right side.
Iterators is a prime example. Creator may be used as a rule of thumb: if
creator can?t follow them, don?t use them. Nullptr should be used in the
headers, they need to be cleaner than the implementation. In source
pointers: where it increases readability. Where it is not unclear, feel
free to use 0 instead. It may cause some minor source incompatibilities.
Don?t change existing code for the sake of this.

Library use
=========
We can?t detect the version, but we might require a minimum? Wishlist :
* std::initialize lists
* std::move
* std::function
* type traits (including enable_if),
* std::forward
* nulltpr_t
* std::chrono?
* shared_ptr
* unique_ptr. QScopedPointer might be made movable now.
New smart pointer session, or on the Mailing list?

TODO: We need to test this what is supported with the base line compilers.

No for now: std::for_each (issues with leaks)
For now, don?t put std lib ABI into Qt ABI, except for nulltpr_t.
For lambda?s: how to deal with captures? They are dangerous. Default to
capture by value, capture by reference or pointer is problem.

We need to be a bit conservative in our public API for now, until we get
some more experience. First learn, then slowly introduce.


Andr?

--


From joerg.bornemann at theqtcompany.com  Fri Jun 12 09:05:09 2015
From: joerg.bornemann at theqtcompany.com (Joerg Bornemann)
Date: Fri, 12 Jun 2015 09:05:09 +0200
Subject: [Development] Specifying module dependencies
In-Reply-To: <20150611164740.GC8645@troll08.it.local>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>	<20150610203206.5693520.9858.26394@theqtcompany.com>	<20150611102910.GD6652@troll08.it.local>	<2162083.TQU43La6D2@simon-sx58>
	<20150611164740.GC8645@troll08.it.local>
Message-ID: <557A84A5.5020404@theqtcompany.com>

On 11-Jun-15 18:47, Oswald Buddenhagen wrote:

> you won't get rid of the redundant dependency specifications anyway,
> because qt.pro (and the sync.profile's) are about repository deps, while
> the module's requires() (and whatever other methods they use to exclude
> themselves) are about module (and non-qt) deps.

But it's easily possible to deduce information about repository
dependencies from module dependencies, isn't it?


Cheers,

Joerg

From marc.mutz at kdab.com  Fri Jun 12 10:17:21 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 12 Jun 2015 10:17:21 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <557A7773.3050903@familiesomers.nl>
References: <557A7773.3050903@familiesomers.nl>
Message-ID: <201506121017.21905.marc.mutz@kdab.com>

Hi Andre,

thanks for the write-up!

On Friday 12 June 2015 08:08:51 Andr? Somers wrote:
> Available for use then:

range-for?
variadic macros (these we already use in tests/ and no-one complained so far).

> No for now: std::for_each (issues with leaks)

Which leaks?

> For now, don?t put std lib ABI into Qt ABI, except for nulltpr_t.

Too late: QException inherits std::exception (for a looong time already), and
by virtue of various exported subclasses of QVector and QList, we export ABI
that contains std::vector and std::list (toStdList(), toStdVector()). We
probably also export ABI using std::string, because I'm sure someone somewhere
has inherited an exported class from QString...

std::list and std::string are BiC in GCC, probably each at different releases,
and probably between C++98 and 11 builds.

FTR: Making std::list::size() O(1) in C++11 was a huge mistake, IMO. It
pessimises the one use-case I have _ever_ used std::list for: splicing. Maybe
forward_list is a replacement now...

> For lambda?s: how to deal with captures? They are dangerous. Default to
> capture by value, capture by reference or pointer is problem.

The first thing *I* think when thinking lambdas is: code bloat. Please be
_very_ careful. Every lambda has it's own unique type, even if they are token-
for-token identical. Using the same one on a template makes the whole template
code duplicate. And I don't know any compiler that does a merge of binary
identical code (does anyone?).

So, when a lambda is used in more than one place, please consider making it a
namespace-level auto variable (only possible if it doesn't use local captures)
or, yes, go the extra mile and write the function object explicitly.

Then again, using a lambda instead of a member-function private slot tends to
leads to more compact executable code (at least than the SLOT()-based
connect()).

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From oswald.buddenhagen at theqtcompany.com  Fri Jun 12 09:47:44 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Fri, 12 Jun 2015 09:47:44 +0200
Subject: [Development] Specifying module dependencies
In-Reply-To: <557A84A5.5020404@theqtcompany.com>
	<VI1PR02MB1071168DBA2B19460BD36FF095BC0@VI1PR02MB1071.eurprd02.prod.outlook.com>
Message-ID: <20150612074744.GA13238@troll08.it.local>

On Thu, Jun 11, 2015 at 08:30:37PM +0000, Gladhorn Frederik wrote:
> On Thursday 11. June 2015 18.47.40 Oswald Buddenhagen wrote:
> > you won't get rid of the redundant dependency specifications anyway,
> > because qt.pro (and the sync.profile's) are about repository deps,
> > while the module's requires() (and whatever other methods they use
> > to exclude themselves) are about module (and non-qt) deps.
> >
> > about sync.profile and pinning, i think you didn't consider
> > non-mainline branches in your plan. you need to specify the branches
> > of the other modules you want to build against *somewhere*. nowadays
> > that could be actually qt5.git's .gitmodules, as it now contains the
> > branches. of course, this implies branching qt5.git for every
> > CI-controlled non-mainline branch. this actually sounds quite
> > logical. i'm all for removing the inter-repo deps from sync.profile
> > - it was never meant to contain them in the first place.
>
> I'm concerned about using qt5.git to hold the information of module
> dependencies since it will never be complete
>
this will always be the case at some times as long as the information is
held redundantly.

> and the information should imho be with the module, not in some other
> git repository. From that point of view sync.profile is preferable.

> The reason is that it doesn't scale - when a new module is created, it
> shouldn't have to require registration in qt5.git.  This also applies
> to modules that are not (yet) part of official releases or that are
> proprietary for whatever reason. All of these modules don't belong in
> qt5.git.
>
new modules can be registered before they enter mainline - there are
plenty of precedents for that.
proprietary modules can be added in a proprietary branch.

this is really the same discussion as specifying sources belonging to a
project by wildcard. i'm fairly firmly on the 'nope' side on this one
(see discussion in https://bugreports.qt.io/browse/QBS-58).

> Therefore I would propose containing the information of what
> dependencies a module (on the git repository level) has inside the
> module itself.
>
that must include the branches. these will inevitably be redundant with
qt5/.gitmodules. and we've recently seen that this redundancy is
actually causing problems.

On Fri, Jun 12, 2015 at 09:05:09AM +0200, Joerg Bornemann wrote:
> But it's easily possible to deduce information about repository
> dependencies from module dependencies, isn't it?
>
to do that, you need
- a full understanding of the build system. virtually impossible to get
  with qmake.
- the repositories themselves, so the build tool can find the modules in
  them. this does not help when you need to decide which repositories
  you need to clone in the first place.

it all boils down to the fact that aggregation must happen top-down.
we could unify the implementation somewhat by adding more custom fields
to .gitmodules instead of duplicating some of the information in qt.pro.
but there is no way around the fundamental requirement. even with qbs.

From sean.harmer at kdab.com  Fri Jun 12 10:21:38 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Fri, 12 Jun 2015 09:21:38 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <20150611211520.GA3501@klara.mpi.htwm.de>
References: <ml2j2r$eg3$1@ger.gmane.org> <1637657.fa75jvLXrZ@titan>
	<20150611211520.GA3501@klara.mpi.htwm.de>
Message-ID: <5930622.KWh3614YEP@titan>

Hi,

On Thursday 11 June 2015 23:15:20 Andr? P?nitz wrote:
> Specifically, for item #6:
>
>     [Stephen]
>
>     > Qt3DParamter might be better *and* more consistent.
>     > Similar applies to other classes.
>
>     [Sean]
>     It's precisely because of these kinds of issues that we decided to use
>     namespaces in Qt3D rather than the poor-man's prefix name spacing.
>     [...]
>     Name spaces are supported everywhere these days so why not just use
>     them, especially in a new add-on module?
>
> That's exactly the kind of situation I was referring to in my previous
> mail: This is *intentionally* introducing API inconsistency. It does not
> really matter to me whether "poor-man's prefix name spacing" is
> unfashionable or "we" consider it bad. It is simply *inconsistent* with
> more than 200 of existing exported QQuick*, QSG* and QQml* classes.

The majority of those QQuick*, QSG*, and QQml* classes are not exported or
documented as internal so the 200 number is overstated.

Also, as Marc pointed out, those class names are themselves inconsistent with
other classes within QtCore, QtNetwork, QtGui etc. As I replied earlier, once
you add a using namespace Qt3D to a translation unit the Qt3D actually looks
more consistent with other parts of Qt than using QQuick* etc. with the
proviso that you need to disambiguate in the case of collisions.

Furthermore, it is inconsistent to want to push forwards with the allowable
set of C++ 11/14/whatever features which will mean dropping support for older
compilers and platforms, yet denying the ability to evolve our API beyond the
1990's paradigm. Dropping support for older compilers is a much harder pill to
swallow than asking people to use a namespace in a new addon module.

I'm not arguing that namespaces should be used because they are fashionable.
I'm arguing they should be used because this is the intended use case of a
very mature language feature. If we can't try new things out in new addon
modules, then where can we try them?

I propose we try keeping the Qt3D namespace. I'm sure our user base, which is
made up of intelligent people, can figure out how to resolve any issues that
arise due to the presence of the namespace very quickly then move on with no
more difficulty than with any other areas of Qt.

Cheers,

Sean
--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel. Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - Qt Experts - Platform-independent software solutions

From olivier at woboq.com  Fri Jun 12 12:12:17 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Fri, 12 Jun 2015 12:12:17 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <201506121017.21905.marc.mutz@kdab.com>
References: <557A7773.3050903@familiesomers.nl>
	<201506121017.21905.marc.mutz@kdab.com>
Message-ID: <2365366.FDXVDv2rHR@finn>

On Friday 12. June 2015 10:17:21 Marc Mutz wrote:
> Hi Andre,
>
> thanks for the write-up!
>
> On Friday 12 June 2015 08:08:51 Andr? Somers wrote:
> > Available for use then:
> range-for?
> variadic macros (these we already use in tests/ and no-one complained so
> far).
> > No for now: std::for_each (issues with leaks)
>
> Which leaks?

Good question!

I think the discussion was more about the ranged-based for.
We cannot recommend to use it with Qt containers because it detaches. But
otherwise it may still be good it we want to modify the container in-place.

> > For now, don?t put std lib ABI into Qt ABI, except for nulltpr_t.
>
> Too late: QException inherits std::exception (for a looong time already),

That's a good point, I had not realized that.

However: inheriting do not make the name part of the mangling. And QException
is almost not used (esp if compiled with -fno-exception)


> and by virtue of various exported subclasses of QVector and QList, we
> export ABI that contains std::vector and std::list (toStdList(),
> toStdVector()). We probably also export ABI using std::string, because I'm
> sure someone somewhere has inherited an exported class from QString...

Those method are inline and therefore do not count (because the only impacted
compiler is MSVC which is not binary compatible with itself between releases)


Anyway, in light of this QException breakage, maybe we should consider using
the standard library in our ABI.
Which mean using things like std::function, std::unique_ptr, in our ABI.
Should we allow that?



We also did not had the time to come to the smart pointer discussion.

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org


From szehowe.koh at gmail.com  Fri Jun 12 16:23:09 2015
From: szehowe.koh at gmail.com (Sze Howe Koh)
Date: Fri, 12 Jun 2015 22:23:09 +0800
Subject: [Development] Some Qt3D feedback
In-Reply-To: <5930622.KWh3614YEP@titan>
References: <ml2j2r$eg3$1@ger.gmane.org> <1637657.fa75jvLXrZ@titan>
	<20150611211520.GA3501@klara.mpi.htwm.de>
	<5930622.KWh3614YEP@titan>
Message-ID: <CALW8pfUfk+78cXv9SU96rdUfHhc-D94qU_08oKnxb8hO231ZbQ@mail.gmail.com>

First, a big thanks to Stephen for bringing these issues to the ML's attention.

The topic of namespacing has been raised a few times before, but
discussions faded without us reaching any solid conclusions:
http://comments.gmane.org/gmane.comp.lib.qt.devel/13176

I think the disagreements we have on this topic stem from the desire
to uphold two different values that tread on each others' toes a bit:
* Progress (related to replacing old things with new and better ones)
* Consistency (related to familiarity and intuitiveness)

Let's aim to achieve both without unnecessarily sacrificing either.
This means being willing to try new things, but also means applying
the findings from these trials to the entire Qt framework as uniformly
as possible.


On 12 June 2015 at 16:21, Sean Harmer <sean.harmer at kdab.com> wrote:
> On Thursday 11 June 2015 23:15:20 Andr? P?nitz wrote:
>> Specifically, for item #6:
>>
>>     [Stephen]
>>
>>     > Qt3DParamter might be better *and* more consistent.
>>     > Similar applies to other classes.
>>
>>     [Sean]
>>     It's precisely because of these kinds of issues that we decided to use
>>     namespaces in Qt3D rather than the poor-man's prefix name spacing.
>>     [...]
>>     Name spaces are supported everywhere these days so why not just use
>>     them, especially in a new add-on module?
>>
>> That's exactly the kind of situation I was referring to in my previous
>> mail: This is *intentionally* introducing API inconsistency. It does not
>> really matter to me whether "poor-man's prefix name spacing" is
>> unfashionable or "we" consider it bad. It is simply *inconsistent* with
>> more than 200 of existing exported QQuick*, QSG* and QQml* classes.
>
> The majority of those QQuick*, QSG*, and QQml* classes are not exported or
> documented as internal so the 200 number is overstated.
>
> Also, as Marc pointed out, those class names are themselves inconsistent with
> other classes within QtCore, QtNetwork, QtGui etc. As I replied earlier, once
> you add a using namespace Qt3D to a translation unit the Qt3D actually looks
> more consistent with other parts of Qt than using QQuick* etc. with the
> proviso that you need to disambiguate in the case of collisions.
>
> Furthermore, it is inconsistent to want to push forwards with the allowable
> set of C++ 11/14/whatever features which will mean dropping support for older
> compilers and platforms, yet denying the ability to evolve our API beyond the
> 1990's paradigm. Dropping support for older compilers is a much harder pill to
> swallow than asking people to use a namespace in a new addon module.
>
> I'm not arguing that namespaces should be used because they are fashionable.
> I'm arguing they should be used because this is the intended use case of a
> very mature language feature. If we can't try new things out in new addon
> modules, then where can we try them?

I agree that we should try new things to improve on the old ways. The
important thing is that we convert the trial results into solid
written guidelines, so that we don't spend time discussing this again
come Qt 5.6 or 5.7.

I propose the following, with the hope that we formalise our decisions
at http://wiki.qt.io/Coding_Conventions for future reference.



(1) Let's commit to extracting (and following) solid guidelines from
this experiment.

By the time we reach the Qt 5.6 feature freeze, we need to have clear
directions in the wiki on (i) what new modules in Qt 5.6+ should look
like, and ideally (ii) what all modules in Qt 6 should look like. Do
we convert QQmlComponent to QtQml::QComponent, or convert
Qt3D::QComponent to Q3DComponent?



(2) Let's decide on how to name namespaces.

We recently got new namespaces with both the "Q" prefix
(QWebSocketProtocol) as well as the "Qt" prefix (QtWin, QtAndroid,
Qt3D). Which shall it be?



(3) Let's decide on how namespaces and #include headers should work
with each other.

There are a few sub-issues here:

a) We already have weird headers like <QtConcurrentRun>, and we almost
ended up with weird headers like <QWinFunctions> for the QtWin
namespace: https://codereview.qt-project.org/#/c/69108/ We need ground
rules on how to design header names around namespace names.


b) Should namespaces be #includable? Some are (QtWin, QTest), some
aren't (Qt3D).


c) At Qt 5.0's launch, the advice given to users was "Only #include
the class name, not the module name". In other words, use "#include
<QQmlComponent>", not "#include <QtQml/QQmlComponent>. However, if
class names are allowed to be non-unique, this advice must change. I
guess we revert to the old way of #including the module name along
with the class name?



(4) Let's decide on how to name QML types.

Spot the odd one out:

- (Qt Multimedia module) QCamera class -> Camera QML type
- (Qt 3D Core module) Qt3D::QCamera class -> Camera QML type
- (Qt QML module) QQmlComponent class -> Component QML type
- (Qt 3D Core module) Qt3D::QComponent class -> Component3D QML type



(5) Let's decide on the relationship between C++ modules and QML modules.

C++ classes are split between between "Qt 3D Core" and "Qt 3D
Renderer". QML types are not (everything is under "Qt3D". Do we want
this asymmetry?



(6) Let's finalize: Is it "Qt 3D Render" or "Qt 3D Renderer"?

All other modules use:
* #include <QtModuleName> for the module-wide include
* QT += modulename for the .pro file

However, we currently have a "Qt 3D Render" module with:
* #include <Qt3DRenderer>
* QT += 3drenderer

Let's stick to existing conventions here.



(7) (Unimportant in itself, but related to a few items above) Let's
decide on the definition of "module".

This word is seriously overloaded (and sometimes abused, e.g. "QtBase
module"). Anyway, Active Qt and Qt 3D are the 2 "modules" in Qt that
have "sub-modules". How should "module" be defined?

One possibility is: 1 module = 1 .pro file entry = 1 DLL (excluding
plugins), meaning that "QAxContainer", "QAxServer", "Qt 3D Core", "Qt
3D Renderer", and "Qt 3D Input" are modules, while "Active Qt" and "Qt
3D" are "module groups".



What do you think?


Regards,
Sze-Howe

From thiago.macieira at intel.com  Fri Jun 12 16:36:27 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Fri, 12 Jun 2015 07:36:27 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <201506121017.21905.marc.mutz@kdab.com>
References: <557A7773.3050903@familiesomers.nl>
	<201506121017.21905.marc.mutz@kdab.com>
Message-ID: <26560213.kjTEtmaPu2@tjmaciei-mobl4>

On Friday 12 June 2015 10:17:21 Marc Mutz wrote:
> Hi Andre,
>
> thanks for the write-up!
>
> On Friday 12 June 2015 08:08:51 Andr? Somers wrote:
> > Available for use then:
> range-for?

Nope and they are the ones that are bad for our containers until extended
lifetime references show up, probably at C++17.

> variadic macros (these we already use in tests/ and no-one complained so
> far).

Nope, only with #ifdef.

> > No for now: std::for_each (issues with leaks)
>
> Which leaks?

Not leaks, access to dangling references via as_const

	for (auto x : as_const(someFunction()))
		// dangling

> > For now, don?t put std lib ABI into Qt ABI, except for nulltpr_t.
>
> Too late: QException inherits std::exception (for a looong time already),
> and by virtue of various exported subclasses of QVector and QList, we
> export ABI that contains std::vector and std::list (toStdList(),
> toStdVector()). We probably also export ABI using std::string, because I'm
> sure someone somewhere has inherited an exported class from QString...

QException is an exception, since we usually don't use exceptions anyway.

The export you're talking about only happens with MSVC.

Other than that, the rule stands firm.

> > For lambda?s: how to deal with captures? They are dangerous. Default to
> > capture by value, capture by reference or pointer is problem.
>
> The first thing *I* think when thinking lambdas is: code bloat. Please be
> _very_ careful. Every lambda has it's own unique type, even if they are
> token- for-token identical. Using the same one on a template makes the
> whole template code duplicate. And I don't know any compiler that does a
> merge of binary identical code (does anyone?).

Good point, Marc.

> So, when a lambda is used in more than one place, please consider making it
> a namespace-level auto variable (only possible if it doesn't use local
> captures) or, yes, go the extra mile and write the function object
> explicitly.

No namespace-level lambdas, please. Go for a functor instead at that point,
since you'll having a namespace-level object of 1 byte.

> Then again, using a lambda instead of a member-function private slot tends
> to leads to more compact executable code (at least than the SLOT()-based
> connect()).

I think that was the objective.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Fri Jun 12 16:37:15 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Fri, 12 Jun 2015 07:37:15 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <2365366.FDXVDv2rHR@finn>
References: <557A7773.3050903@familiesomers.nl>
	<201506121017.21905.marc.mutz@kdab.com> <2365366.FDXVDv2rHR@finn>
Message-ID: <3147439.bG9cYWDEZY@tjmaciei-mobl4>

On Friday 12 June 2015 12:12:17 Olivier Goffart wrote:
> Which mean using things like std::function, std::unique_ptr, in our ABI.
> Should we allow that?

The problem is deciding between std::function and std::__1::function.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From mw_triad at users.sourceforge.net  Fri Jun 12 16:49:38 2015
From: mw_triad at users.sourceforge.net (Matthew Woehlke)
Date: Fri, 12 Jun 2015 10:49:38 -0400
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <201506121017.21905.marc.mutz@kdab.com>
References: <557A7773.3050903@familiesomers.nl>
	<201506121017.21905.marc.mutz@kdab.com>
Message-ID: <mleri3$rlt$1@ger.gmane.org>

On 2015-06-12 04:17, Marc Mutz wrote:
> On Friday 12 June 2015 08:08:51 Andr? Somers wrote:
>> Available for use then:
>
> range-for?
> variadic macros (these we already use in tests/ and no-one complained so far).

Andr?, you mentioned 'auto'... does that include return type deduction?
What about trailing return specifiers?

(I recently posted a useful "helper function" - qOverload - that uses a
variadic template.)

>> Not available for use are:
>> * = default,
>> * = deleted,

Where are these not supported? I have code that (AFAIK) has been using
these already, and IIRC our compiler requirements are lower.

>> For now, don?t put std lib ABI into Qt ABI, except for nulltpr_t.
>
> Too late: QException inherits std::exception (for a looong time already), and
> by virtue of various exported subclasses of QVector and QList, we export ABI
> that contains std::vector and std::list (toStdList(), toStdVector()). We
> probably also export ABI using std::string, because I'm sure someone somewhere
> has inherited an exported class from QString...

Besides being inline (template, dontcha know), isn't there an option to
disable those? (Maybe not std::exception one, but at least the Qt <->
STL container conversions?)

--
Matthew


From sean.harmer at kdab.com  Fri Jun 12 16:59:32 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Fri, 12 Jun 2015 15:59:32 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <CALW8pfUfk+78cXv9SU96rdUfHhc-D94qU_08oKnxb8hO231ZbQ@mail.gmail.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <5930622.KWh3614YEP@titan>
	<CALW8pfUfk+78cXv9SU96rdUfHhc-D94qU_08oKnxb8hO231ZbQ@mail.gmail.com>
Message-ID: <1734366.AMj2HhZrKT@titan>

Thanks for structuring this! Much appreciated.

On Friday 12 June 2015 22:23:09 Sze Howe Koh wrote:
> First, a big thanks to Stephen for bringing the
> I propose the following, with the hope that we formalise our decisions
> at http://wiki.qt.io/Coding_Conventions for future reference.

Agreed.

> (1) Let's commit to extracting (and following) solid guidelines from
> this experiment.
>
> By the time we reach the Qt 5.6 feature freeze, we need to have clear
> directions in the wiki on (i) what new modules in Qt 5.6+ should look
> like, and ideally (ii) what all modules in Qt 6 should look like. Do
> we convert QQmlComponent to QtQml::QComponent, or convert
> Qt3D::QComponent to Q3DComponent?

Agreed.

> (2) Let's decide on how to name namespaces.
>
> We recently got new namespaces with both the "Q" prefix
> (QWebSocketProtocol) as well as the "Qt" prefix (QtWin, QtAndroid,
> Qt3D). Which shall it be?

I vote for the Qt prefix to match the header directory prefixes i.e.

#include <QtCore/QThread>

and

namespace QtCore {
class QThread
}

just to pick an example for Qt6. Such a transition should be scriptable as a
porting tool to go from Qt5 -> Qt6.

> (3) Let's decide on how namespaces and #include headers should work
> with each other.
>
> There are a few sub-issues here:
>
> a) We already have weird headers like <QtConcurrentRun>, and we almost
> ended up with weird headers like <QWinFunctions> for the QtWin
> namespace: https://codereview.qt-project.org/#/c/69108/ We need ground
> rules on how to design header names around namespace names.
>
>
> b) Should namespaces be #includable? Some are (QtWin, QTest), some
> aren't (Qt3D).
>
>
> c) At Qt 5.0's launch, the advice given to users was "Only #include
> the class name, not the module name". In other words, use "#include
> <QQmlComponent>", not "#include <QtQml/QQmlComponent>. However, if
> class names are allowed to be non-unique, this advice must change. I
> guess we revert to the old way of #including the module name along
> with the class name?

No strong opinion but with a slight preference for

#include <QtQml/QQmlComponent>

which in a namespaced world could become:

#include <QtQml/QComponent>

> (4) Let's decide on how to name QML types.
>
> Spot the odd one out:
>
> - (Qt Multimedia module) QCamera class -> Camera QML type
> - (Qt 3D Core module) Qt3D::QCamera class -> Camera QML type
> - (Qt QML module) QQmlComponent class -> Component QML type
> - (Qt 3D Core module) Qt3D::QComponent class -> Component3D QML type

We renamed the Component3D type from Component fairly recently at the request
of Konstantin Ritt to avoid a collision with QML's Component. I would prefer
to use namespacing here too. Again, this only becomes necessary when mixing
QtQML and Qt3D in the same QML file.

> (5) Let's decide on the relationship between C++ modules and QML modules.
>
> C++ classes are split between between "Qt 3D Core" and "Qt 3D
> Renderer". QML types are not (everything is under "Qt3D". Do we want
> this asymmetry?

Not sure I understand this. We have qml imports for the Qt3D.Core,
Qt3D.Renderer and Qt3D.Input.

There is an asymmetry that I don't particularly like in that the C++ classes
in the 3 Qt3D libraries are all under the generic Qt3D namespace. Thinking
about it I'd prefer to have those separated too i.e.

namespace Qt3DCore {...}
namespace Qt3DRenderer {...}
namespace Qt3DInput {...}

> (6) Let's finalize: Is it "Qt 3D Render" or "Qt 3D Renderer"?
>
> All other modules use:
> * #include <QtModuleName> for the module-wide include
> * QT += modulename for the .pro file
>
> However, we currently have a "Qt 3D Render" module with:
> * #include <Qt3DRenderer>
> * QT += 3drenderer
>
> Let's stick to existing conventions here.

That was fixed yesterday to be Qt3DRenderer everywhere. Whether that's the best
name is still being discussed but at least it's consistent now.

As an aside, my concern with the Qt3DRenderer name is that it's a verb whereas
other modules I can see being named along the lines of Qt3DPhysics, Qt3DAudio,
Qt3DSkeletalAnimation etc. In that scheme we should likely change the name
everywhere to Qt3DRender.

> (7) (Unimportant in itself, but related to a few items above) Let's
> decide on the definition of "module".
>
> This word is seriously overloaded (and sometimes abused, e.g. "QtBase
> module"). Anyway, Active Qt and Qt 3D are the 2 "modules" in Qt that
> have "sub-modules". How should "module" be defined?
>
> One possibility is: 1 module = 1 .pro file entry = 1 DLL (excluding
> plugins), meaning that "QAxContainer", "QAxServer", "Qt 3D Core", "Qt
> 3D Renderer", and "Qt 3D Input" are modules, while "Active Qt" and "Qt
> 3D" are "module groups".

Seems reasonable to me.

> What do you think?

That it's the weekend! Enjoy your $beverage, $sport, $hobbie everyone! :)

Cheers,

Sean
--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel. Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - Qt Experts - Platform-independent software solutions

From marc.mutz at kdab.com  Fri Jun 12 18:58:59 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 12 Jun 2015 18:58:59 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <3147439.bG9cYWDEZY@tjmaciei-mobl4>
References: <557A7773.3050903@familiesomers.nl> <2365366.FDXVDv2rHR@finn>
	<3147439.bG9cYWDEZY@tjmaciei-mobl4>
Message-ID: <201506121859.00537.marc.mutz@kdab.com>

On Friday 12 June 2015 16:37:15 Thiago Macieira wrote:
> On Friday 12 June 2015 12:12:17 Olivier Goffart wrote:
> > Which mean using things like std::function, std::unique_ptr, in our ABI.
> > Should we allow that?
>
> The problem is deciding between std::function and std::__1::function.

Is __1 now standard? Or just a placeholder for what Clang's libc++ uses?

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Fri Jun 12 19:02:05 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 12 Jun 2015 19:02:05 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <mleri3$rlt$1@ger.gmane.org>
References: <557A7773.3050903@familiesomers.nl>
	<201506121017.21905.marc.mutz@kdab.com>
	<mleri3$rlt$1@ger.gmane.org>
Message-ID: <201506121902.06058.marc.mutz@kdab.com>

On Friday 12 June 2015 16:49:38 Matthew Woehlke wrote:
> >> For now, don?t put std lib ABI into Qt ABI, except for nulltpr_t.
> >
> >
> >
> > Too late: QException inherits std::exception (for a looong time already),
> > and  by virtue of various exported subclasses of QVector and QList, we
> > export ABI that contains std::vector and std::list (toStdList(),
> > toStdVector()). We probably also export ABI using std::string, because
> > I'm sure someone somewhere has inherited an exported class from
> > QString...
>
> Besides being inline (template, dontcha know), isn't there an option to
> disable those? (Maybe not std::exception one, but at least the Qt <->
> STL container conversions?)

No, they are members. If the conversion was a free function, exporting QVector
or QList wouldn't export the STL types. We can't disable them, either, as
they're already exported. It would also be source-incompatible to do so.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From olivier at woboq.com  Fri Jun 12 18:07:51 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Fri, 12 Jun 2015 18:07:51 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <3147439.bG9cYWDEZY@tjmaciei-mobl4>
References: <557A7773.3050903@familiesomers.nl> <2365366.FDXVDv2rHR@finn>
	<3147439.bG9cYWDEZY@tjmaciei-mobl4>
Message-ID: <7075172.e1LWSRiyL1@finn>

On Friday 12. June 2015 07:37:15 Thiago Macieira wrote:
> On Friday 12 June 2015 12:12:17 Olivier Goffart wrote:
> > Which mean using things like std::function, std::unique_ptr, in our ABI.
> > Should we allow that?
>
> The problem is deciding between std::function and std::__1::function.

That's not up to us to decide. That's up to the compiler/build system.

But the question is real:
Should we allow std library types in our ABI?

Cons:
 - We break binary compatibility when changing the std library or when the std
library breaks compatibility

Pros:
 - We don't have to re-invent every wheels.  (std::function for example would
be quite useful and re implementing it ourself is not trivial.)


Given that most users are using the std library anyway so they will have to
recompile their application as they change standard library, I think the
limitation is hurting us more than the benefit.


--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org

From mw_triad at users.sourceforge.net  Fri Jun 12 18:40:40 2015
From: mw_triad at users.sourceforge.net (Matthew Woehlke)
Date: Fri, 12 Jun 2015 12:40:40 -0400
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <201506121902.06058.marc.mutz@kdab.com>
References: <557A7773.3050903@familiesomers.nl>	<201506121017.21905.marc.mutz@kdab.com>	<mleri3$rlt$1@ger.gmane.org>
	<201506121902.06058.marc.mutz@kdab.com>
Message-ID: <mlf229$dof$1@ger.gmane.org>

On 2015-06-12 13:02, Marc Mutz wrote:
> On Friday 12 June 2015 16:49:38 Matthew Woehlke wrote:
>> On 2015-06-12 04:17, Marc Mutz wrote:
>>> On Friday 12 June 2015 08:08:51 Andr? Somers wrote:
>>>> For now, don?t put std lib ABI into Qt ABI, except for nulltpr_t.
>>>
>>> Too late: QException inherits std::exception (for a looong time already),
>>> and  by virtue of various exported subclasses of QVector and QList, we
>>> export ABI that contains std::vector and std::list (toStdList(),
>>> toStdVector()). We probably also export ABI using std::string, because
>>> I'm sure someone somewhere has inherited an exported class from
>>> QString...
>>
>> Besides being inline (template, dontcha know), isn't there an option to
>> disable those? (Maybe not std::exception one, but at least the Qt <->
>> STL container conversions?)
>
> No, they are members. If the conversion was a free function, exporting QVector
> or QList wouldn't export the STL types. We can't disable them, either, as
> they're already exported. It would also be source-incompatible to do so.

Oh, right. Sorry, I missed the "exported subclasses" part. Yes, with
exported instantiations, you can't magically make the symbols go away.
(Though I suppose users that disable STL would at least not be able to
call them, since the declarations would be missing?)

--
Matthew


From apoenitz at t-online.de  Fri Jun 12 22:52:35 2015
From: apoenitz at t-online.de (=?iso-8859-1?Q?Andr=E9_P=F6nitz?=)
Date: Fri, 12 Jun 2015 22:52:35 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506120058.42979.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <1637657.fa75jvLXrZ@titan>
	<20150611211520.GA3501@klara.mpi.htwm.de>
	<201506120058.42979.marc.mutz@kdab.com>
Message-ID: <20150612205235.GA3496@klara.mpi.htwm.de>

On Fri, Jun 12, 2015 at 12:58:42AM +0200, Marc Mutz wrote:
> On Thursday 11 June 2015 23:15:20 Andr? P?nitz wrote:
> > That's exactly the kind of situation I was referring to in my previous
> > mail: This is intentionally introducing API inconsistency. It does not
> > really matter to me whether "poor-man's prefix name spacing" is
> > unfashionable or "we" consider it bad. It is simply inconsistent with
> > more than 200 of existing exported QQuick*, QSG* and QQml* classes.
>
> For me, QQuick*, QSG*, QQml* are as much inconsistent with QtCore, QtGui and
> QtWidget (excepting QGraphics*) naming, where none of the types starts with
> poor man's prefix namespacing, as Qt3D::QParameter and QQml*.

Generally useful stuff goes to QtCore, less general stuff is found in "leaf"
modules. Commonly used items get short names, leaf items longer ones. It's a kind
of Huffman code at heart. Using poor man's prefix namespacing is one way out. Not
the only one, not necessarily the best, but one seen in real life and one that's
known to work.

> And as Qt grows and grows, the chance of name clashes increases
> (http://en.wikipedia.org/wiki/Birthday_problem),

I had cherished some hope that Qt class names in leaf modules are not chosen
according a discrete (almost) uniform distribution. Looks like I stand corrected.
[1/2 ;-)]

The good news is that even the most stupid version of prefix namespacing
(QModuleXXX) solves this nicely, as it restricts the potential of conflicts
to the module itself.

> as witnessed by the
> introduction of namespaces for disambiguating names from QtQuick1 and
> QtDeclarative. QtMultimedia (which largely uses traditional names) has several
> common names, too. Namespaces, if the whole module is wrapped, and the
> namespace name is derived consistently from the module's soname, provide a
> reliable partition of the name space.

It is easy to predict that the use of proper C++ namespaces immediately opens the
door to bikeshedding on the merits of using declatations and using directives.
It is as easy to predict that the Modernizers will claim that the only true
solution is to use fully qualified names, everywhere. We will end up with a random
mess of old style identifiers and newfangled ones, with additional :: line noise on
top of what we'd get by poor man's namespacing, without the bikeshedding effort.

> If a new library cannot change the established ways, including to experiment
> with it, then Qt will be forever locked in its 90s API, because, let's face
> it, come Qt 6, no-one will have the time to implement nor the incentive to
> break SC in such a broad way as to lift all of Qt to a new API standard, on
> top of all the work that will go into C++11/14-enabling the API, and the
> inevitable work on the containers. And the pain will grow and grow.

There's quite some room for experiments in playground projects. I don't
consider "Qt proper" as the appropriate venue for experiments. I would likely
see that less strict if there were less strict compatibility requirements
allowing to correct failed experiments. But as it stands, we have them.

I tend to agree that the transition from Qt 5 to 6 will ask for a painless upgrade
path again. We had rather good experiences with the large degree of source
compatibility from 4 to 5. Less so from 3 to 4. The main point here is that an
upgrade path does not necessarily require full source compatibility, it "only"
needs to either allow for code being compilable with both version, possibly after
some massaging of the original code base, *or* a mostly automated migration.
Since going from QFooBar to QtFoo::QBar is possible in both cases, using poor man's
namespacing in Qt 5 does not add significant technical debt.

> So, giving each module the leeway to modernize its API at its own pace seems
> to me the only workable solution. Of course, APIs should still be consistent,
> but whether a module uses namespaces or not doesn't really influence the
> consistency.

It does by itself as the namespace is part of the API. And it adds more
opportunities for even less consistency, see the reference to the use
of 'using' above.

Andre'

From thiago.macieira at intel.com  Fri Jun 12 23:42:44 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Fri, 12 Jun 2015 14:42:44 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <201506121859.00537.marc.mutz@kdab.com>
References: <557A7773.3050903@familiesomers.nl>
	<3147439.bG9cYWDEZY@tjmaciei-mobl4>
	<201506121859.00537.marc.mutz@kdab.com>
Message-ID: <3168200.nmen3gG1pL@tjmaciei-mobl4>

On Friday 12 June 2015 18:58:59 Marc Mutz wrote:
> On Friday 12 June 2015 16:37:15 Thiago Macieira wrote:
> > On Friday 12 June 2015 12:12:17 Olivier Goffart wrote:
> > > Which mean using things like std::function, std::unique_ptr, in our ABI.
> > > Should we allow that?
> >
> > The problem is deciding between std::function and std::__1::function.
>
> Is __1 now standard? Or just a placeholder for what Clang's libc++ uses?

It's what libc++ uses, which is the real problem. For as long as there are
systems where you can opt into libstdc++ or libc++, we should avoid hardcoding
one or the other.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Fri Jun 12 23:45:29 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Fri, 12 Jun 2015 14:45:29 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <mleri3$rlt$1@ger.gmane.org>
References: <557A7773.3050903@familiesomers.nl>
	<201506121017.21905.marc.mutz@kdab.com>
	<mleri3$rlt$1@ger.gmane.org>
Message-ID: <2996357.aFxrkyR603@tjmaciei-mobl4>

On Friday 12 June 2015 10:49:38 Matthew Woehlke wrote:
> On 2015-06-12 04:17, Marc Mutz wrote:
> > On Friday 12 June 2015 08:08:51 Andr? Somers wrote:
> >> Available for use then:
> > range-for?
> > variadic macros (these we already use in tests/ and no-one complained so
> > far).
> Andr?, you mentioned 'auto'... does that include return type deduction?
> What about trailing return specifiers?

Return type deduction is a C++14 feature, so no.

Trailing return specifiers are allowed. That's Q_COMPILER_AUTO_FUNCTION and
works in MSVC since 2010, ICC since 12.1, GCC since 4.4.

> >> Not available for use are:
> >> * = default,
> >> * = deleted,
>
> Where are these not supported? I have code that (AFAIK) has been using
> these already, and IIRC our compiler requirements are lower.

GCC requires 4.7 for this. I think we were discussing whether our minimum is
4.6 or 4.7.

> Besides being inline (template, dontcha know), isn't there an option to
> disable those? (Maybe not std::exception one, but at least the Qt <->
> STL container conversions?)

QT_NO_STL isn't supported since 5.0.

That increased our build times considerably...

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From bstottle at ford.com  Sat Jun 13 01:24:46 2015
From: bstottle at ford.com (Stottlemyer, Brett (B.S.))
Date: Fri, 12 Jun 2015 23:24:46 +0000
Subject: [Development] [QtCS] QtRemoteObjects Session Summary
In-Reply-To: <CALX7-s5bsSgiTcF-a3QM_TLv6Nxxnoio1LseR7Ut3bSC+A5Neg@mail.gmail.com>
References: <CALX7-s7sbB0Gpb_7M-B__tWGAtB75K3xbdQR6izaDihNmqP0xw@mail.gmail.com>
	<2030608.WcmVyIMcUm@simon-sx58>
	<CALX7-s7BLR3jjwnRn02r1oHVzOtbaLxOVDMyg3EshEmH=eQQMQ@mail.gmail.com>
	<D19E5501.230B%bstottle@ford.com>
	<CALX7-s5bsSgiTcF-a3QM_TLv6Nxxnoio1LseR7Ut3bSC+A5Neg@mail.gmail.com>
Message-ID: <D1A0DB62.2484%bstottle@ford.com>

On 6/11/15, 2:47 PM, "Alan Alpert" <416365416c at gmail.com> wrote:
...
>They have their own modules on their side. One of the sessions you
>missed included a demo with Meteor.js talking to QML applications
>using a somewhat similar approach. It had custom logic that mapped
>Meteor's wire protocol into QObject like structures so that QML could
>use it. Or at least that's how I assume it worked, given that I have a
>similar case myself with a specific node.js server at work (all this
>travel and 5.5.0 release and I haven't had a chance to checkout
>Attila's code yet). It would *NOT* be a generic "Java to C++" level
>adapter, it's specific FW (Qt) to specific FW (e.g. Meteor.js)
>assuming they have QObject compatible semantics.

It?s been the generic ?Java to C++? level adapter I?ve been worried about.
 Thanks for clearing that up.


>Then I'll start working on the implementation, because my idea of it
>was that the cost would be low. I'll add you to the change on gerrit
>when I have a draft ready.

It seems you are checking off my concerns, conceptually at least.  By
talking to a specific framework, you would be limiting the scope of what
would need to be marshaled, as well as how.  You would also likely have a
known set of features that could be tested, something that is hard for
QtRO and generic QObject types.

FYI, part of what repc (a compiler for .rep interface files included in
QtRO) does is support the generation of the boilerplate code to marshal
your own types.  Since this gets compiled into both sides of the
interface, you aren?t limited in the types you can send and receive.  The
concern has been having someone add a new type to QtRO (in user space, not
in the library) and then file a bug when it doesn?t automatically play
nice in some other language.

So in your picture of this extension, adapter ?x? would most likely just
not support specific features of QtRO, such as QAbstractItemModel
remoting?  Or, if it did, it would be the responsibility of the author to
figure out how (or, alternatively create a specific QObject to act on the
C++ side to interact with the TBD functionality of ?x??s framework).  Is
this correct?  This sounds reasonable.  And while it is work, it is
bounded work.

My remaining question is how to you see this tying in to QtRO.  It is
seeming that this is pointing to a pluggable back end.  That would at
least make the adapters decoupled from the rest of QtRO (that was another
concern - ?we can?t accept QtRO as an add-on until it supports
languages/adapters x, y, z?).  We already support this in part, with the
ability to pass in a QUrl which decides whether to use QLocalServer or
QTcpServer, and can be extended to other connection types.  While this is
start, I?m not sure it is sufficient to handle additional frameworks.  The
types are also compiled in ATM, so can?t be added dynamically.

Brett



From tuukka.turunen at theqtcompany.com  Sat Jun 13 08:34:08 2015
From: tuukka.turunen at theqtcompany.com (Turunen Tuukka)
Date: Sat, 13 Jun 2015 06:34:08 +0000
Subject: [Development] Announcement: Deprecating QNX 6.5.0
In-Reply-To: <20150611095718.GA26178@polaris>
References: <20150611095718.GA26178@polaris>
Message-ID: <667330A9-BA71-4D5E-A7AB-1F3129422773@theqtcompany.com>


Hi,

Please remember to update this to documentation. Both the supported platforms page and QNX platform notes.

Yours,

--
Tuukka

> Rafael Roquetto <rafael.roquetto at kdab.com> kirjoitti 11.6.2015 kello 12.54:
>
> Hello,
>
> It was agreed during this year's Qt Contributors Summit that, as of Qt 5.6,
> QNX 6.5.0 will no longer be supported. Therefore, it is being marked as
> deprecated for Qt 5.5. Among other reasons, the lack of proper C++11 support
> stood as the main driving factor to this.
>
> Support for QNX 6.6 is not affected.
>
> Best regards,
> Rafael
>
> --
> Rafael Roquetto | rafael.roquetto at kdab.com | Software Engineer
> Klar?lvdalens Datakonsult AB, a KDAB Group company
> Tel. Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
> KDAB - Qt Experts
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

From konrad at silmor.de  Sat Jun 13 12:53:44 2015
From: konrad at silmor.de (Konrad Rosenbaum)
Date: Sat, 13 Jun 2015 12:53:44 +0200
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <AM2PR02MB0356BDE548186B876FAA8E53E6BC0@AM2PR02MB0356.eurprd02.prod.outlook.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<55793702.4070506@theqtcompany.com>
	<AM2PR02MB0356BDE548186B876FAA8E53E6BC0@AM2PR02MB0356.eurprd02.prod.outlook.com>
Message-ID: <1545680.S0q0QKdcSG@zaphod>

On Thursday 11 June 2015 07:29:51 Smith Martin wrote:
> onError is immediately understood by all sentient beings in the universe.

So, apparently either Germans are not sentient or from outside this
universe. Might explain a lot about me...

At the very least I disagree with your use of "immediately".

The phrase "on error" has no immediate translation in some languages - e.g.
in German it has to be translated to  "nach Fehler" ("after error") instead
of the more literal "auf Fehler" ("on-top-of error") or the intuitive (but
very wrong) "an Fehler" ("at/next-to error").

On the other hand "onSuccess" always sounds like a toast to me ("Auf den
Erfolg!" - "To success!") and it takes me a while to understand why a
program would believe in performing rituals for good luck.

It might be this oddity of my language, but I really hate this whole
"onSomething" style - it reeks of hungarian notation and seems completely
superfluous.


Either way, since I don't care much about QML/JS - do whatever you like
there. But PLEASE do not ruin it for the C++ side!


	Konrad
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 490 bytes
Desc: This is a digitally signed message part.
Url : http://lists.qt-project.org/pipermail/development/attachments/20150613/19feb8db/attachment.bin

From Simon.Hausmann at theqtcompany.com  Sat Jun 13 13:49:57 2015
From: Simon.Hausmann at theqtcompany.com (Hausmann Simon)
Date: Sat, 13 Jun 2015 11:49:57 +0000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <1545680.S0q0QKdcSG@zaphod>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<55793702.4070506@theqtcompany.com>
	<AM2PR02MB0356BDE548186B876FAA8E53E6BC0@AM2PR02MB0356.eurprd02.prod.outlook.com>,
	<1545680.S0q0QKdcSG@zaphod>
Message-ID: <20150613114956.5693520.33813.26777@theqtcompany.com>

Hi,

Perhaps my German is rusty, but I find "on error" translates well to German with bei/beim: "Beim Auftreten eines Fehlers...".


Simon

  Original Message
From: Konrad Rosenbaum
Sent: Saturday, June 13, 2015 12:54
To: development at qt-project.org
Subject: Re: [Development] Avoid overloading of 'error'


On Thursday 11 June 2015 07:29:51 Smith Martin wrote:
> onError is immediately understood by all sentient beings in the universe.

So, apparently either Germans are not sentient or from outside this
universe. Might explain a lot about me...

At the very least I disagree with your use of "immediately".

The phrase "on error" has no immediate translation in some languages - e.g.
in German it has to be translated to  "nach Fehler" ("after error") instead
of the more literal "auf Fehler" ("on-top-of error") or the intuitive (but
very wrong) "an Fehler" ("at/next-to error").

On the other hand "onSuccess" always sounds like a toast to me ("Auf den
Erfolg!" - "To success!") and it takes me a while to understand why a
program would believe in performing rituals for good luck.

It might be this oddity of my language, but I really hate this whole
"onSomething" style - it reeks of hungarian notation and seems completely
superfluous.


Either way, since I don't care much about QML/JS - do whatever you like
there. But PLEASE do not ruin it for the C++ side!


        Konrad

From Martin.Smith at theqtcompany.com  Sat Jun 13 13:58:17 2015
From: Martin.Smith at theqtcompany.com (Smith Martin)
Date: Sat, 13 Jun 2015 11:58:17 +0000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <1545680.S0q0QKdcSG@zaphod>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<55793702.4070506@theqtcompany.com>
	<AM2PR02MB0356BDE548186B876FAA8E53E6BC0@AM2PR02MB0356.eurprd02.prod.outlook.com>,
	<1545680.S0q0QKdcSG@zaphod>
Message-ID: <AM2PR02MB0356E1D8BC3C8563D14D1A18E6BA0@AM2PR02MB0356.eurprd02.prod.outlook.com>

If you are saying you didn't know what onError meant, then I truly am astonished. Understanding onError, given all the other onThis and onThat we have in QML, really doesn't depend on the This or the That being a verb. I didn't mean that any of these phrases translates well into other languages.

I suppose it should have been done with "when" instead of "on."

________________________________________
From: development-bounces+martin.smith=theqtcompany.com at qt-project.org <development-bounces+martin.smith=theqtcompany.com at qt-project.org> on behalf of Konrad Rosenbaum <konrad at silmor.de>
Sent: Saturday, June 13, 2015 12:53 PM
To: development at qt-project.org
Subject: Re: [Development] Avoid overloading of 'error'

On Thursday 11 June 2015 07:29:51 Smith Martin wrote:
> onError is immediately understood by all sentient beings in the universe.

So, apparently either Germans are not sentient or from outside this
universe. Might explain a lot about me...

At the very least I disagree with your use of "immediately".

The phrase "on error" has no immediate translation in some languages - e.g.
in German it has to be translated to  "nach Fehler" ("after error") instead
of the more literal "auf Fehler" ("on-top-of error") or the intuitive (but
very wrong) "an Fehler" ("at/next-to error").

On the other hand "onSuccess" always sounds like a toast to me ("Auf den
Erfolg!" - "To success!") and it takes me a while to understand why a
program would believe in performing rituals for good luck.

It might be this oddity of my language, but I really hate this whole
"onSomething" style - it reeks of hungarian notation and seems completely
superfluous.


Either way, since I don't care much about QML/JS - do whatever you like
there. But PLEASE do not ruin it for the C++ side!


        Konrad

From gunnar.roth at gmx.de  Sat Jun 13 19:33:14 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Sat, 13 Jun 2015 19:33:14 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <2996357.aFxrkyR603@tjmaciei-mobl4>
References: <557A7773.3050903@familiesomers.nl>
	<201506121017.21905.marc.mutz@kdab.com>
	<mleri3$rlt$1@ger.gmane.org> <2996357.aFxrkyR603@tjmaciei-mobl4>
Message-ID: <BB2F6DE2-94BA-4307-807F-7C344ACDE7A6@gmx.de>


>
>>>> Not available for use are:
>>>> * = default,
>>>> * = deleted,
>>
>> Where are these not supported? I have code that (AFAIK) has been using
>> these already, and IIRC our compiler requirements are lower.
>
> GCC requires 4.7 for this. I think we were discussing whether our minimum is
> 4.6 or 4.7.
>
I am quite sure that this only works since vs 2013, Would be glad if proven wrong.
see https://msdn.microsoft.com/en-us/library/dn457344.aspx <https://msdn.microsoft.com/en-us/library/dn457344.aspx>

Regards,
Gunnar


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150613/e17bc04b/attachment.html

From lorn.potter at gmail.com  Sat Jun 13 21:42:06 2015
From: lorn.potter at gmail.com (Lorn Potter)
Date: Sun, 14 Jun 2015 05:42:06 +1000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <CA8E35D5-1E96-4028-ABC8-A63720517429@edeltech.ch>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<CA8E35D5-1E96-4028-ABC8-A63720517429@edeltech.ch>
Message-ID: <557C878E.606@gmail.com>

On 11/06/2015 12:36 am, Samuel Gaist wrote:


>
> failed doesn't always mean there was an error with a direct relation.

I was going to say this, but you beat me to it.
Also, "errored" is just wrong, "error" is also past tense.



--
Lorn 'ljp' Potter
Software Engineer, llornkcor technologies / Jolla
Qt Sensors / connectivity


From 416365416c at gmail.com  Sun Jun 14 05:01:54 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Sat, 13 Jun 2015 20:01:54 -0700
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <557C878E.606@gmail.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<CA8E35D5-1E96-4028-ABC8-A63720517429@edeltech.ch>
	<557C878E.606@gmail.com>
Message-ID: <CALX7-s5HwMTVGnKzDB4jURtDNioyEp_Va5Q+atHi+0myty6+DA@mail.gmail.com>

On Sat, Jun 13, 2015 at 12:42 PM, Lorn Potter <lorn.potter at gmail.com> wrote:
> On 11/06/2015 12:36 am, Samuel Gaist wrote:
>
>
>>
>> failed doesn't always mean there was an error with a direct relation.
>
> I was going to say this, but you beat me to it.
> Also, "errored" is just wrong, "error" is also past tense.

I consulted a linguist. She said that if you wanted to use error as a
verb (it's not normally one), errored would be the past tense. But
that it's probably not the best choice of word.

She also said to link to this comic: http://smbc-comics.com/index.php?id=3761

--
Alan Alpert

From lorn.potter at gmail.com  Sun Jun 14 07:35:37 2015
From: lorn.potter at gmail.com (Lorn Potter)
Date: Sun, 14 Jun 2015 15:35:37 +1000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <CALX7-s5HwMTVGnKzDB4jURtDNioyEp_Va5Q+atHi+0myty6+DA@mail.gmail.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<CA8E35D5-1E96-4028-ABC8-A63720517429@edeltech.ch>
	<557C878E.606@gmail.com>
	<CALX7-s5HwMTVGnKzDB4jURtDNioyEp_Va5Q+atHi+0myty6+DA@mail.gmail.com>
Message-ID: <557D12A9.4070508@gmail.com>

On 14/06/2015 1:01 pm, Alan Alpert wrote:
> On Sat, Jun 13, 2015 at 12:42 PM, Lorn Potter <lorn.potter at gmail.com> wrote:
>> On 11/06/2015 12:36 am, Samuel Gaist wrote:
>>
>>
>>>
>>> failed doesn't always mean there was an error with a direct relation.
>>
>> I was going to say this, but you beat me to it.
>> Also, "errored" is just wrong, "error" is also past tense.
>
> I consulted a linguist. She said that if you wanted to use error as a
> verb (it's not normally one), errored would be the past tense. But
> that it's probably not the best choice of word.

She's wrong. 'errored' is not even in the American English or the Oxford
English dictionaries.

http://www.merriam-webster.com/dictionary/suggestions/errored
http://www.oxforddictionaries.com/spellcheck/english/?q=errored



--
Lorn 'ljp' Potter
Software Engineer, llornkcor technologies / Jolla
Qt Sensors / connectivity


From Lars.Knoll at theqtcompany.com  Sun Jun 14 12:06:21 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Sun, 14 Jun 2015 10:06:21 +0000
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <BB2F6DE2-94BA-4307-807F-7C344ACDE7A6@gmx.de>
References: <557A7773.3050903@familiesomers.nl>
	<201506121017.21905.marc.mutz@kdab.com> <mleri3$rlt$1@ger.gmane.org>
	<2996357.aFxrkyR603@tjmaciei-mobl4>
	<BB2F6DE2-94BA-4307-807F-7C344ACDE7A6@gmx.de>
Message-ID: <DF6EFC89-46B7-440D-9F91-93A8C68A6242@theqtcompany.com>

On 13/06/15 19:33, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org<mailto:development-bounces+lars.knoll=theqtcompany.com at qt-project.org> on behalf of Gunnar Roth" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org<mailto:development-bounces+lars.knoll=theqtcompany.com at qt-project.org> on behalf of gunnar.roth at gmx.de<mailto:gunnar.roth at gmx.de>> wrote:



Not available for use are:
* = default,
* = deleted,

Where are these not supported? I have code that (AFAIK) has been using
these already, and IIRC our compiler requirements are lower.

GCC requires 4.7 for this. I think we were discussing whether our minimum is
4.6 or 4.7.

I am quite sure that this only works since vs 2013, Would be glad if proven wrong.
see https://msdn.microsoft.com/en-us/library/dn457344.aspx

The main place where we use this feature is anyway with Q_DISABLE_COPY. So for now, I don't think it's a huge problem if we can't use those.

Cheers,
Lars

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150614/539d5589/attachment.html

From marc.mutz at kdab.com  Sun Jun 14 14:00:03 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Sun, 14 Jun 2015 14:00:03 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <DF6EFC89-46B7-440D-9F91-93A8C68A6242@theqtcompany.com>
References: <557A7773.3050903@familiesomers.nl>
	<BB2F6DE2-94BA-4307-807F-7C344ACDE7A6@gmx.de>
	<DF6EFC89-46B7-440D-9F91-93A8C68A6242@theqtcompany.com>
Message-ID: <201506141400.04465.marc.mutz@kdab.com>

On Sunday 14 June 2015 12:06:21 Knoll Lars wrote:
[ regarding = default, = delete ]
> The main place where we use this feature is anyway with Q_DISABLE_COPY. So
> for now, I don't think it's a huge problem if we can't use those.

That's = delete, yes, and you can always make those into linker errors by
leaving the function undefined (and sometimes, for member functions, into a
compiler error by marking them private). Q_DECL_EQ_DELETE then just lifts
those errors to an earlier stage, with a better error message. No
functionality is lost.

= default, however, has no workaround. We can't even use Q_DECL_EQ_DELETE,
because it qualitatively changes the nature of the special member function
it's applied to: in one case, it's user-provided, in the other, compiler-
synthesized. That can turn non-trivial types into trivial ones, and as I
recently learned from Thiago, that may change the way an object of the type is
passed by-value to functions.

So, we might as well remove Q_DECL_EQ_DEFAULT, I think.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From thiago.macieira at intel.com  Sun Jun 14 18:55:08 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sun, 14 Jun 2015 09:55:08 -0700
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <557D12A9.4070508@gmail.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<CALX7-s5HwMTVGnKzDB4jURtDNioyEp_Va5Q+atHi+0myty6+DA@mail.gmail.com>
	<557D12A9.4070508@gmail.com>
Message-ID: <2859490.OQFXhj0xX3@tjmaciei-mobl4>

On Sunday 14 June 2015 15:35:37 Lorn Potter wrote:
> On 14/06/2015 1:01 pm, Alan Alpert wrote:
> > On Sat, Jun 13, 2015 at 12:42 PM, Lorn Potter <lorn.potter at gmail.com>
wrote:
> >> On 11/06/2015 12:36 am, Samuel Gaist wrote:
> >>> failed doesn't always mean there was an error with a direct relation.
> >>
> >> I was going to say this, but you beat me to it.
> >> Also, "errored" is just wrong, "error" is also past tense.
> >
> > I consulted a linguist. She said that if you wanted to use error as a
> > verb (it's not normally one), errored would be the past tense. But
> > that it's probably not the best choice of word.
>
> She's wrong. 'errored' is not even in the American English or the Oxford
> English dictionaries.
>
> http://www.merriam-webster.com/dictionary/suggestions/errored
> http://www.oxforddictionaries.com/spellcheck/english/?q=errored

They don't seem to be listing "error" as a verb. Wiktionary has it:
https://en.wiktionary.org/wiki/error#Verb

But the point is that there is contention on the issue, so we shouldn't use
"error" as a verb.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sun Jun 14 19:08:03 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sun, 14 Jun 2015 10:08:03 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <BB2F6DE2-94BA-4307-807F-7C344ACDE7A6@gmx.de>
References: <557A7773.3050903@familiesomers.nl>
	<2996357.aFxrkyR603@tjmaciei-mobl4>
	<BB2F6DE2-94BA-4307-807F-7C344ACDE7A6@gmx.de>
Message-ID: <17931088.7emqeUohDo@tjmaciei-mobl4>

On Saturday 13 June 2015 19:33:14 Gunnar Roth wrote:
> >>>> Not available for use are:
> >>>> * = default,
> >>>> * = deleted,
> >>
> >> Where are these not supported? I have code that (AFAIK) has been using
> >> these already, and IIRC our compiler requirements are lower.
> >
> > GCC requires 4.7 for this. I think we were discussing whether our minimum
> > is 4.6 or 4.7.
>
> I am quite sure that this only works since vs 2013, Would be glad if proven
> wrong. see https://msdn.microsoft.com/en-us/library/dn457344.aspx
> <https://msdn.microsoft.com/en-us/library/dn457344.aspx>

The best list of what works and what doesn't can be found here:

http://code.qt.io/cgit/qt/qtbase.git/tree/src/corelib/global/qcompilerdetection.h#n447
http://code.woboq.org/qt5/qtbase/src/corelib/global/qcompilerdetection.h.html#447

Just scroll down to your compiler.

For this particular feature in MSVC, it's listed as of MSVC 2012:

http://code.woboq.org/qt5/qtbase/src/corelib/global/qcompilerdetection.h.html#851

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Sun Jun 14 19:08:53 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sun, 14 Jun 2015 10:08:53 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <201506141400.04465.marc.mutz@kdab.com>
References: <557A7773.3050903@familiesomers.nl>
	<DF6EFC89-46B7-440D-9F91-93A8C68A6242@theqtcompany.com>
	<201506141400.04465.marc.mutz@kdab.com>
Message-ID: <4526928.9SY6lczChG@tjmaciei-mobl4>

On Sunday 14 June 2015 14:00:03 Marc Mutz wrote:
> So, we might as well remove Q_DECL_EQ_DEFAULT, I think.

Agreed, since it does not mean the same thing to have and not to have it.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From g.scheikl at avibit.com  Sun Jun 14 19:43:34 2015
From: g.scheikl at avibit.com (Gerhard Scheikl)
Date: Sun, 14 Jun 2015 19:43:34 +0200
Subject: [Development] QVariantMap <-> QML
Message-ID: <1866360.x5kpfeVIYL@gerhardpc>

Hi

I recently discovered some unexpected behavior when exchanging a QVariantMap
with QML code:

Here's what I'm doing on the C++ side:
my_map = json_document.toVariant();
engine.rootContext()->setContextProperty("myMap", my_map);

Then on the QML side:
myMap.asdf.name = "asdf"

This change is not reflected in the original map.
Obviously, accessing asdf.name returns a copy.

Is this the intended behavior?
If so, how can I ensure that the data in C++ and on the QML side is always the
same?
(use QJSValue? use a QObject hierarchy with dynamic properties?)

Thanks!

Best regards
Gerhard

From xbenlau at gmail.com  Sun Jun 14 19:45:39 2015
From: xbenlau at gmail.com (Ben Lau)
Date: Mon, 15 Jun 2015 01:45:39 +0800
Subject: [Development] QVariantMap <-> QML
In-Reply-To: <1866360.x5kpfeVIYL@gerhardpc>
References: <1866360.x5kpfeVIYL@gerhardpc>
Message-ID: <CAAq4oLKzH0hoqxJ=OPuhWOE=_f=PHYKtsPCVrpNsV4ywwKVqyg@mail.gmail.com>

On 15 June 2015 at 01:43, Gerhard Scheikl <g.scheikl at avibit.com> wrote:

> Hi
>
> I recently discovered some unexpected behavior when exchanging a
> QVariantMap
> with QML code:
>
> Here's what I'm doing on the C++ side:
> my_map = json_document.toVariant();
> engine.rootContext()->setContextProperty("myMap", my_map);
>
> Then on the QML side:
> myMap.asdf.name = "asdf"
>
> This change is not reflected in the original map.
> Obviously, accessing asdf.name returns a copy.
>
> Is this the intended behavior?
> If so, how can I ensure that the data in C++ and on the QML side is always
> the
> same?
> (use QJSValue? use a QObject hierarchy with dynamic properties?)
>
> Thanks!
>
>

var tmp = myMap.asdf;
tmp.name = "asdf"
myMap.asdf = tmp;
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150615/fa7e9584/attachment.html

From g.scheikl at avibit.com  Sun Jun 14 19:48:59 2015
From: g.scheikl at avibit.com (Gerhard Scheikl)
Date: Sun, 14 Jun 2015 19:48:59 +0200
Subject: [Development] QVariantMap <-> QML
In-Reply-To: <CAAq4oLKzH0hoqxJ=OPuhWOE=_f=PHYKtsPCVrpNsV4ywwKVqyg@mail.gmail.com>
References: <1866360.x5kpfeVIYL@gerhardpc>
	<CAAq4oLKzH0hoqxJ=OPuhWOE=_f=PHYKtsPCVrpNsV4ywwKVqyg@mail.gmail.com>
Message-ID: <14346669.K5lZ13XNay@gerhardpc>

Ben Lau <xbenlau at gmail.com>, 15.06.2015 01:45:
> var tmp = myMap.asdf;
> tmp.name = "asdf"
> myMap.asdf = tmp;

Thanks for the fast reply!

Unfortunately, this approach is very cumbersome for deeper hierarchies like:
a.b.c.d[2].e.f = "g"

I was hoping for a more convenient solution.

Best regards
Gerhard

From Simon.Hausmann at theqtcompany.com  Sun Jun 14 19:57:40 2015
From: Simon.Hausmann at theqtcompany.com (Hausmann Simon)
Date: Sun, 14 Jun 2015 17:57:40 +0000
Subject: [Development] QVariantMap <-> QML
In-Reply-To: <1866360.x5kpfeVIYL@gerhardpc>
References: <1866360.x5kpfeVIYL@gerhardpc>
Message-ID: <20150614175739.5693520.19780.26829@theqtcompany.com>

Hi,

This is a result of QVariant being a value type. If you make a copy and modify it, then the original remains as-is. The call to setContextProperty creates a copy. If you want explicitly shared data between the JavaScript environment and C++ then I would recommend using a JavaScript object - accessed from C++ as QJSValue, because those are explicitly shared.

Simon

  Original Message
From: Gerhard Scheikl
Sent: Sunday, June 14, 2015 19:43
To: development at qt-project.org
Subject: [Development] QVariantMap <-> QML


Hi

I recently discovered some unexpected behavior when exchanging a QVariantMap
with QML code:

Here's what I'm doing on the C++ side:
my_map = json_document.toVariant();
engine.rootContext()->setContextProperty("myMap", my_map);

Then on the QML side:
myMap.asdf.name = "asdf"

This change is not reflected in the original map.
Obviously, accessing asdf.name returns a copy.

Is this the intended behavior?
If so, how can I ensure that the data in C++ and on the QML side is always the
same?
(use QJSValue? use a QObject hierarchy with dynamic properties?)

Thanks!

Best regards
Gerhard
_______________________________________________
Development mailing list
Development at qt-project.org
http://lists.qt-project.org/mailman/listinfo/development

From Martin.Smith at theqtcompany.com  Sun Jun 14 21:02:31 2015
From: Martin.Smith at theqtcompany.com (Smith Martin)
Date: Sun, 14 Jun 2015 19:02:31 +0000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <2859490.OQFXhj0xX3@tjmaciei-mobl4>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<CALX7-s5HwMTVGnKzDB4jURtDNioyEp_Va5Q+atHi+0myty6+DA@mail.gmail.com>
	<557D12A9.4070508@gmail.com>,<2859490.OQFXhj0xX3@tjmaciei-mobl4>
Message-ID: <AM2PR02MB03562FC38F65F91C4A6BE9AEE6B90@AM2PR02MB0356.eurprd02.prod.outlook.com>

"err" is the verb. To err is human. onErr: to forgive is divine.

martin

________________________________________
From: development-bounces+martin.smith=theqtcompany.com at qt-project.org <development-bounces+martin.smith=theqtcompany.com at qt-project.org> on behalf of Thiago Macieira <thiago.macieira at intel.com>
Sent: Sunday, June 14, 2015 6:55 PM
To: development at qt-project.org
Subject: Re: [Development] Avoid overloading of 'error'

On Sunday 14 June 2015 15:35:37 Lorn Potter wrote:
> On 14/06/2015 1:01 pm, Alan Alpert wrote:
> > On Sat, Jun 13, 2015 at 12:42 PM, Lorn Potter <lorn.potter at gmail.com>
wrote:
> >> On 11/06/2015 12:36 am, Samuel Gaist wrote:
> >>> failed doesn't always mean there was an error with a direct relation.
> >>
> >> I was going to say this, but you beat me to it.
> >> Also, "errored" is just wrong, "error" is also past tense.
> >
> > I consulted a linguist. She said that if you wanted to use error as a
> > verb (it's not normally one), errored would be the past tense. But
> > that it's probably not the best choice of word.
>
> She's wrong. 'errored' is not even in the American English or the Oxford
> English dictionaries.
>
> http://www.merriam-webster.com/dictionary/suggestions/errored
> http://www.oxforddictionaries.com/spellcheck/english/?q=errored

They don't seem to be listing "error" as a verb. Wiktionary has it:
https://en.wiktionary.org/wiki/error#Verb

But the point is that there is contention on the issue, so we shouldn't use
"error" as a verb.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center

_______________________________________________
Development mailing list
Development at qt-project.org
http://lists.qt-project.org/mailman/listinfo/development

From olivier at woboq.com  Sun Jun 14 22:05:54 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Sun, 14 Jun 2015 22:05:54 +0200
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <AM2PR02MB03562FC38F65F91C4A6BE9AEE6B90@AM2PR02MB0356.eurprd02.prod.outlook.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<2859490.OQFXhj0xX3@tjmaciei-mobl4>
	<AM2PR02MB03562FC38F65F91C4A6BE9AEE6B90@AM2PR02MB0356.eurprd02.prod.outlook.com>
Message-ID: <3669476.3pf2O7shbg@finn>

Should we re-target the discussion to the problem at hand?
The problem is that error is overloaded and that is annoying when connecting
to it. Renaming it would be one way to solve the problem. (e.g: adding a
second signal that is emitted at the same time and possibly deprecate the old
one)
None of the concerned classes are used in QML AFAIK, this is purely a C++
problem.

If you ask my opinion, 'errorOccurred' sounds like a sensible name.


--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org

From Martin.Smith at theqtcompany.com  Sun Jun 14 22:04:53 2015
From: Martin.Smith at theqtcompany.com (Smith Martin)
Date: Sun, 14 Jun 2015 20:04:53 +0000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <3669476.3pf2O7shbg@finn>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<2859490.OQFXhj0xX3@tjmaciei-mobl4>
	<AM2PR02MB03562FC38F65F91C4A6BE9AEE6B90@AM2PR02MB0356.eurprd02.prod.outlook.com>,
	<3669476.3pf2O7shbg@finn>
Message-ID: <AM2PR02MB035683B528D117291A84B0DCE6B90@AM2PR02MB0356.eurprd02.prod.outlook.com>

Hasn't it already been decided to change the name?

+1 for that.

martin

________________________________________
From: development-bounces+martin.smith=theqtcompany.com at qt-project.org <development-bounces+martin.smith=theqtcompany.com at qt-project.org> on behalf of Olivier Goffart <olivier at woboq.com>
Sent: Sunday, June 14, 2015 10:05 PM
To: development at qt-project.org
Subject: Re: [Development] Avoid overloading of 'error'

Should we re-target the discussion to the problem at hand?
The problem is that error is overloaded and that is annoying when connecting
to it. Renaming it would be one way to solve the problem. (e.g: adding a
second signal that is emitted at the same time and possibly deprecate the old
one)
None of the concerned classes are used in QML AFAIK, this is purely a C++
problem.

If you ask my opinion, 'errorOccurred' sounds like a sensible name.


--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org
_______________________________________________
Development mailing list
Development at qt-project.org
http://lists.qt-project.org/mailman/listinfo/development

From thiago.macieira at intel.com  Mon Jun 15 08:18:18 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sun, 14 Jun 2015 23:18:18 -0700
Subject: [Development] Fwd: (QTBUG-46655) qt5base: font license files missing
Message-ID: <11035771.b9HOrmF5uL@tjmaciei-mobl4>

The file qtbase-opensource-src-5.4.2/lib/fonts/README
states:
'Copyright statements and the source of the qpf fonts are located in
../../src/3rdparty/fonts'

The directory src/3rdparty/fonts does not exist in qtbase-opensource-
src-5.4.2.tar.xz archive.

This directory exists in the 'old' qt-4.8.7 distribution and contains the
various font license files.

-----------------------------------------

Does anyone know:

a) where the font files come from?
b) what licences apply to them?
c) if those font files are still used in any version?

Please note that if no one answers c) in one week, I'll just remove the files.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From simon.hausmann at theqtcompany.com  Mon Jun 15 08:24:22 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Mon, 15 Jun 2015 08:24:22 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506111149.23890.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <mla1m4$1bk$1@ger.gmane.org>
	<201506111149.23890.marc.mutz@kdab.com>
Message-ID: <2401532.Dad0NEj85K@simon-sx58>

On Thursday, June 11, 2015 11:49:23 AM Marc Mutz wrote:
> On Wednesday 10 June 2015 21:03:32 Stephen Kelly wrote:
> > I would encourage a discussion of why this module needs namespaces when
> > the  rest of Qt gets by without them. There is certainly a consistency
> > angle.
>
> I think you come a few years late :)

Not when it comes to public API AFAICS.

> QtPatternist

An internal namespace, not reflected in the public API.

> QtConcurrent

A namespace for functions only, no public classes within.

> QTest

A namespace for functions only, no public classes within.

> QV4

An internal namespace, not reflected in the public API.

> QtQml

An internal namespace, not reflected in the public API.

> QtDeclarative

I don't see this as a public API namespace neither. Where did you find it?

> QtWayland
> ...

The client module doesn't have public API and the compositor module doesn't
use namespaces for the public API.




Simon

From simon.hausmann at theqtcompany.com  Mon Jun 15 08:52:52 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Mon, 15 Jun 2015 08:52:52 +0200
Subject: [Development] Specifying module dependencies
In-Reply-To: <20150612074744.GA13238@troll08.it.local>
References: <20150612074744.GA13238@troll08.it.local>
Message-ID: <46288284.CtoxMCC968@simon-sx58>

On Friday, June 12, 2015 09:47:44 AM Oswald Buddenhagen wrote:
> On Thu, Jun 11, 2015 at 08:30:37PM +0000, Gladhorn Frederik wrote:
> > On Thursday 11. June 2015 18.47.40 Oswald Buddenhagen wrote:
> > > you won't get rid of the redundant dependency specifications anyway,
> > > because qt.pro (and the sync.profile's) are about repository deps,
> > > while the module's requires() (and whatever other methods they use
> > > to exclude themselves) are about module (and non-qt) deps.
> > >
> > > about sync.profile and pinning, i think you didn't consider
> > > non-mainline branches in your plan. you need to specify the branches
> > > of the other modules you want to build against *somewhere*. nowadays
> > > that could be actually qt5.git's .gitmodules, as it now contains the
> > > branches. of course, this implies branching qt5.git for every
> > > CI-controlled non-mainline branch. this actually sounds quite
> > > logical. i'm all for removing the inter-repo deps from sync.profile
> > > - it was never meant to contain them in the first place.
> >
> > I'm concerned about using qt5.git to hold the information of module
> > dependencies since it will never be complete
>
> this will always be the case at some times as long as the information is
> held redundantly.
>
> > and the information should imho be with the module, not in some other
> > git repository. From that point of view sync.profile is preferable.
> >
> > The reason is that it doesn't scale - when a new module is created, it
> > shouldn't have to require registration in qt5.git.  This also applies
> > to modules that are not (yet) part of official releases or that are
> > proprietary for whatever reason. All of these modules don't belong in
> > qt5.git.
>
> new modules can be registered before they enter mainline - there are
> plenty of precedents for that.
> proprietary modules can be added in a proprietary branch.
>
> this is really the same discussion as specifying sources belonging to a
> project by wildcard. i'm fairly firmly on the 'nope' side on this one
> (see discussion in https://bugreports.qt.io/browse/QBS-58).
>
> > Therefore I would propose containing the information of what
> > dependencies a module (on the git repository level) has inside the
> > module itself.
>
> that must include the branches. these will inevitably be redundant with
> qt5/.gitmodules. and we've recently seen that this redundancy is
> actually causing problems.
>
> On Fri, Jun 12, 2015 at 09:05:09AM +0200, Joerg Bornemann wrote:
> > But it's easily possible to deduce information about repository
> > dependencies from module dependencies, isn't it?
>
> to do that, you need
> - a full understanding of the build system. virtually impossible to get
>   with qmake.
> - the repositories themselves, so the build tool can find the modules in
>   them. this does not help when you need to decide which repositories
>   you need to clone in the first place.
>
> it all boils down to the fact that aggregation must happen top-down.
> we could unify the implementation somewhat by adding more custom fields
> to .gitmodules instead of duplicating some of the information in qt.pro.
> but there is no way around the fundamental requirement. even with qbs.

Perhaps there is a misunderstanding here, so let me confirm also what Joerg
said: At this point we're interested in discussion repository dependencies. I
understand that are somewhat parallel to the qt module dependencies and I also
understand that a full build system "evaluation" is required to entirely
reduce the duplication. However at this point we're interested in taking one
step into a more modular direction for the repositories only.

As it stands today, in order for a repository to be built by the current CI
system, it has to be included in qt5.git. This is an unfortunate artifact of
the way the system builds but I'm not convinced that it is a restriction we
want to impose on contributed repositories. Therefore the new CI system does
not require this.

In order for a module to be part of the official Qt release, it also has to be
part of qt5.git. I think that part is a reasonable requirement, for the
convenience of the users of Qt who would like to build the product in one go.
I for one have no intention of trying to change this part.

We also do have at this point a duplication of repository dependencies in
qt.pro as well as in the repository sync.profile. I do believe that we can
eliminate this dependency without any downside, based on your idea of placing
a .pri file into the top-level directory of each repository. That can replace
sync.profile and qt.pro as well as the CI system can use that file instead of
the CI system using sync.profile and the build system using qt.pro.

I think such a step would be an improvement that we should pursue. As
consequence  we could lift the requirement that in order for a module to be
built by the CI system it has to be part of qt5.git. I do recognize that it is
not the perfect solution - it isn't fully flexible in terms of building the
code in one repository against a flexible set of modules coming from
repositories in different branches.

I think it would boil down to:

1) If you want your Qt module(s) to be part of a Qt release, then your
repository needs to be registered in qt5.git and it will following the Qt
product branching. So your 5.6 branch has to build and work against the 5.6
branch of all the modules coming from depending repositories.

2) If you are not part of a Qt release yet but you would still like to use the
continuous integration system, then your code has to build and work against
the dev branch of the modules coming from depending repositories.

Not perfect, no :). But an improvement IMHO. I think we want modules to become
part of the Qt release and product, and we also want to allowing for automated
testing as soon as possible.

Simon

From marc.mutz at kdab.com  Mon Jun 15 10:18:38 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 15 Jun 2015 10:18:38 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <2401532.Dad0NEj85K@simon-sx58>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111149.23890.marc.mutz@kdab.com>
	<2401532.Dad0NEj85K@simon-sx58>
Message-ID: <201506151018.39451.marc.mutz@kdab.com>

On Monday 15 June 2015 08:24:22 Simon Hausmann wrote:
> > QtPatternist
>
> An internal namespace, not reflected in the public API.

QtPatternist::Item appears in public functions of exported public API class
QXmlNodeModelIndex, e.g. Yes, now I see the comment (git grep hid it).

> > QtConcurrent
>
> A namespace for functions only, no public classes within.
>
> > QTest
>
> A namespace for functions only, no public classes within.

_That_ argument again... :)

Could you explain to me why you think that classes are different from
functions, pleaae?

From a technical POV, the classes themselves have internal linkage. It's their
member functions who have external linkage and are exported.

And run(QThreadPool*, ...) forms as much part of QThreadPool's API as does
QThreadPool::run(QRunnable*). All non-member functions that mention a type in
their paramater list are logically part of the type. And C++ enforces that
(with ADL).

There's simply no difference between a class in a namespace and a free
function in a namespace, except, of course, that after a using directive, you
still see the class name (abridged) while you don't see the namespace for free
functions.

So _if_ there's a qualitative difference between free functions and classes in
namespaces, it's the free function case that should be controversial, no?

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From olivier at woboq.com  Mon Jun 15 11:49:40 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Mon, 15 Jun 2015 11:49:40 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <3168200.nmen3gG1pL@tjmaciei-mobl4>
References: <557A7773.3050903@familiesomers.nl>
	<201506121859.00537.marc.mutz@kdab.com>
	<3168200.nmen3gG1pL@tjmaciei-mobl4>
Message-ID: <1999922.A8vEDpqMJj@finn>

On Friday 12. June 2015 14:42:44 Thiago Macieira wrote:
> On Friday 12 June 2015 18:58:59 Marc Mutz wrote:
> > On Friday 12 June 2015 16:37:15 Thiago Macieira wrote:
> > > On Friday 12 June 2015 12:12:17 Olivier Goffart wrote:
> > > > Which mean using things like std::function, std::unique_ptr, in our
> > > > ABI.
> > > > Should we allow that?
> > >
> > > The problem is deciding between std::function and std::__1::function.
> >
> > Is __1 now standard? Or just a placeholder for what Clang's libc++ uses?
>
> It's what libc++ uses, which is the real problem. For as long as there are
> systems where you can opt into libstdc++ or libc++, we should avoid
> hardcoding one or the other.

We are not hard coding one. The compiler selects one.

Now, that would mean that we break binary compatibility when the user switches
the standard library. The question is whether we want to support this.

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org

From simon.hausmann at theqtcompany.com  Mon Jun 15 12:27:00 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Mon, 15 Jun 2015 12:27:00 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506151018.39451.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <2401532.Dad0NEj85K@simon-sx58>
	<201506151018.39451.marc.mutz@kdab.com>
Message-ID: <3150691.Qok5J0xsdy@simon-sx58>

On Monday, June 15, 2015 10:18:38 AM Marc Mutz wrote:
[...]
> > > QtConcurrent
> >
> > A namespace for functions only, no public classes within.
> >
> > > QTest
> >
> > A namespace for functions only, no public classes within.
>
> _That_ argument again... :)
>
> Could you explain to me why you think that classes are different from
> functions, pleaae?

When reading the code they look different compared to other Qt APIs:

	QtConcurrent::run(pool, ...)

is consistent with class functions in other parts of Qt from the way they look
when reading code. We do have those. Classes in name spaces look different on
the other hand:

    Qt3D::QParameter param = ...;

This class usage is different to me than other usages in Qt. I do believe that
we have a hand full of "inner" classes, for example

    QAbstractTextDocumentLayout::Selection

but I feel those are the minority and they are not prefixed with a "Q".

I understand that I can write

   QParameter param = ...

with the help of "using namespace Qt3D;" further up in the file. But this is
where the inconsistency comes in, because other Qt modules currently don't
require the use of "using" in order to achieve the similarity here. At the
same time when I see "QParameter" as plain type name, I feel that it is a
"vague" name and I would prefer a more precise term that relates more to the
use case at hand.

> >From a technical POV, the classes themselves have internal linkage. It's
> >their
> member functions who have external linkage and are exported.
>
> And run(QThreadPool*, ...) forms as much part of QThreadPool's API as does
> QThreadPool::run(QRunnable*). All non-member functions that mention a type
> in their paramater list are logically part of the type. And C++ enforces
> that (with ADL).
>
> There's simply no difference between a class in a namespace and a free
> function in a namespace, except, of course, that after a using directive,
> you still see the class name (abridged) while you don't see the namespace
> for free functions.
>
> So _if_ there's a qualitative difference between free functions and classes
> in namespaces, it's the free function case that should be controversial,
> no?

Yes, from a technical point of view it's easy to argue that free functions are
"controversial". But I'm not looking at this from a technical point of view.
>From all that I can tell, this is purely a question of aesthetics, hardly
something that can be decided based on numbers or other technical figures.


Simon

From Lars.Knoll at theqtcompany.com  Mon Jun 15 13:49:36 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Mon, 15 Jun 2015 11:49:36 +0000
Subject: [Development] Some Qt3D feedback
In-Reply-To: <3150691.Qok5J0xsdy@simon-sx58>
References: <ml2j2r$eg3$1@ger.gmane.org> <2401532.Dad0NEj85K@simon-sx58>
	<201506151018.39451.marc.mutz@kdab.com> <3150691.Qok5J0xsdy@simon-sx58>
Message-ID: <B4D22AFA-4D71-4D65-A00F-D5DD6FEE65D9@theqtcompany.com>


On 15/06/15 12:27, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Simon Hausmann" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of simon.hausmann at theqtcompany.com> wrote:

>On Monday, June 15, 2015 10:18:38 AM Marc Mutz wrote:
>[...]
>> > > QtConcurrent
>> >
>> > A namespace for functions only, no public classes within.
>> >
>> > > QTest
>> >
>> > A namespace for functions only, no public classes within.
>>
>> _That_ argument again... :)
>>
>> Could you explain to me why you think that classes are different from
>> functions, pleaae?
>
>When reading the code they look different compared to other Qt APIs:
>
>	QtConcurrent::run(pool, ...)
>
>is consistent with class functions in other parts of Qt from the way they look
>when reading code. We do have those. Classes in name spaces look different on
>the other hand:
>
>    Qt3D::QParameter param = ...;
>
>This class usage is different to me than other usages in Qt. I do believe that
>we have a hand full of "inner" classes, for example
>
>    QAbstractTextDocumentLayout::Selection
>
>but I feel those are the minority and they are not prefixed with a "Q".
>
>I understand that I can write
>
>   QParameter param = ...
>
>with the help of "using namespace Qt3D;" further up in the file. But this is
>where the inconsistency comes in, because other Qt modules currently don't
>require the use of "using" in order to achieve the similarity here. At the
>same time when I see "QParameter" as plain type name, I feel that it is a
>"vague" name and I would prefer a more precise term that relates more to the
>use case at hand.

I'd agree with this.

Btw, if we use namespaces, then I think that using a Q prefix on the inner classes is wrong.

Qt3D::Parameter is much better to read than Qt3D::Qparameter. Duplicating the 'Q' feels like the worst of both worlds to me. Not duplicating it would be more consistent with other things such as inner classes used in other places or enums and functions inside namespaces.

Code written without a using directive, would feel somewhat similar to existing Qt code. Unfortunately, it would break badly if people wrote a using declaration at the beginning of their file. I guess that's where the idea of using a Q on the inner class came from.

So if the namespace is relatively short, this could be done. But if we advocate against using directives, then are we actually a lot better than using class name prefixing? Is Qt3D::Parameter better than Q3DParameter?

Cheers,
Lars

>
>> >From a technical POV, the classes themselves have internal linkage. It's
>> >their
>> member functions who have external linkage and are exported.
>>
>> And run(QThreadPool*, ...) forms as much part of QThreadPool's API as does
>> QThreadPool::run(QRunnable*). All non-member functions that mention a type
>> in their paramater list are logically part of the type. And C++ enforces
>> that (with ADL).
>>
>> There's simply no difference between a class in a namespace and a free
>> function in a namespace, except, of course, that after a using directive,
>> you still see the class name (abridged) while you don't see the namespace
>> for free functions.
>>
>> So _if_ there's a qualitative difference between free functions and classes
>> in namespaces, it's the free function case that should be controversial,
>> no?
>
>Yes, from a technical point of view it's easy to argue that free functions are
>"controversial". But I'm not looking at this from a technical point of view.
>>From all that I can tell, this is purely a question of aesthetics, hardly
>something that can be decided based on numbers or other technical figures.
>
>
>Simon
>_______________________________________________
>Development mailing list
>Development at qt-project.org
>http://lists.qt-project.org/mailman/listinfo/development

From sean.harmer at kdab.com  Mon Jun 15 14:01:04 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Mon, 15 Jun 2015 13:01:04 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <B4D22AFA-4D71-4D65-A00F-D5DD6FEE65D9@theqtcompany.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<2401532.Dad0NEj85K@simon-sx58>	<201506151018.39451.marc.mutz@kdab.com>
	<3150691.Qok5J0xsdy@simon-sx58>
	<B4D22AFA-4D71-4D65-A00F-D5DD6FEE65D9@theqtcompany.com>
Message-ID: <557EBE80.9010500@kdab.com>

On 15/06/2015 12:49, Knoll Lars wrote:
> On 15/06/15 12:27, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Simon Hausmann" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of simon.hausmann at theqtcompany.com> wrote:
>
>> On Monday, June 15, 2015 10:18:38 AM Marc Mutz wrote:
>> [...]
>>>>> QtConcurrent
>>>> A namespace for functions only, no public classes within.
>>>>
>>>>> QTest
>>>> A namespace for functions only, no public classes within.
>>> _That_ argument again... :)
>>>
>>> Could you explain to me why you think that classes are different from
>>> functions, pleaae?
>> When reading the code they look different compared to other Qt APIs:
>>
>> 	QtConcurrent::run(pool, ...)
>>
>> is consistent with class functions in other parts of Qt from the way they look
>> when reading code. We do have those. Classes in name spaces look different on
>> the other hand:
>>
>>     Qt3D::QParameter param = ...;
>>
>> This class usage is different to me than other usages in Qt. I do believe that
>> we have a hand full of "inner" classes, for example
>>
>>     QAbstractTextDocumentLayout::Selection
>>
>> but I feel those are the minority and they are not prefixed with a "Q".
>>
>> I understand that I can write
>>
>>    QParameter param = ...
>>
>> with the help of "using namespace Qt3D;" further up in the file. But this is
>> where the inconsistency comes in, because other Qt modules currently don't
>> require the use of "using" in order to achieve the similarity here. At the
>> same time when I see "QParameter" as plain type name, I feel that it is a
>> "vague" name and I would prefer a more precise term that relates more to the
>> use case at hand.
> I'd agree with this.
>
> Btw, if we use namespaces, then I think that using a Q prefix on the inner classes is wrong.
>
> Qt3D::Parameter is much better to read than Qt3D::Qparameter. Duplicating the 'Q' feels like the worst of both worlds to me. Not duplicating it would be more consistent with other things such as inner classes used in other places or enums and functions inside namespaces.
>
> Code written without a using directive, would feel somewhat similar to existing Qt code. Unfortunately, it would break badly if people wrote a using declaration at the beginning of their file. I guess that's where the idea of using a Q on the inner class came from.
>
> So if the namespace is relatively short, this could be done. But if we advocate against using directives, then are we actually a lot better than using class name prefixing? Is Qt3D::Parameter better than Q3DParameter?

Right. The reasons for duplicating the Q were:

* The existing syncqt.pl works
* Code written with a using directive still looks like Qt code

Although we could recommend people to not use using directives we can't
enforce it (nor should we) so the expense of the single repeated Q
seemed like the least onerous option. Not ideal, but a compromise from
the other options.

Cheers,

Sean


--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel. Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - Qt Experts - Platform-independent software solutions


From Lars.Knoll at theqtcompany.com  Mon Jun 15 14:02:24 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Mon, 15 Jun 2015 12:02:24 +0000
Subject: [Development] Some Qt3D feedback
In-Reply-To: <1734366.AMj2HhZrKT@titan>
References: <ml2j2r$eg3$1@ger.gmane.org> <5930622.KWh3614YEP@titan>
	<CALW8pfUfk+78cXv9SU96rdUfHhc-D94qU_08oKnxb8hO231ZbQ@mail.gmail.com>
	<1734366.AMj2HhZrKT@titan>
Message-ID: <A8D7C90C-F35A-461E-B6DD-DF46B4F225B9@theqtcompany.com>


On 12/06/15 16:59, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Sean Harmer" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of sean.harmer at kdab.com> wrote:

>Thanks for structuring this! Much appreciated.
>
>On Friday 12 June 2015 22:23:09 Sze Howe Koh wrote:
>> First, a big thanks to Stephen for bringing the
>> I propose the following, with the hope that we formalise our decisions
>> at http://wiki.qt.io/Coding_Conventions for future reference.
>
>Agreed.
>
>> (1) Let's commit to extracting (and following) solid guidelines from
>> this experiment.
>>
>> By the time we reach the Qt 5.6 feature freeze, we need to have clear
>> directions in the wiki on (i) what new modules in Qt 5.6+ should look
>> like, and ideally (ii) what all modules in Qt 6 should look like. Do
>> we convert QQmlComponent to QtQml::QComponent, or convert
>> Qt3D::QComponent to Q3DComponent?
>
>Agreed.
>
>> (2) Let's decide on how to name namespaces.
>>
>> We recently got new namespaces with both the "Q" prefix
>> (QWebSocketProtocol) as well as the "Qt" prefix (QtWin, QtAndroid,
>> Qt3D). Which shall it be?
>
>I vote for the Qt prefix to match the header directory prefixes i.e.
>
>#include <QtCore/QThread>
>
>and
>
>namespace QtCore {
>class QThread
>}

That was IIRC the agreement we had during early Qt 5 development. Unfortunately we didn't pull through with it. I would also vote for all public namespaces to be prefixed with Qt in the future.

>
>just to pick an example for Qt6. Such a transition should be scriptable as a
>porting tool to go from Qt5 -> Qt6
>
>> (3) Let's decide on how namespaces and #include headers should work
>> with each other.
>>
>> There are a few sub-issues here:
>>
>> a) We already have weird headers like <QtConcurrentRun>, and we almost
>> ended up with weird headers like <QWinFunctions> for the QtWin
>> namespace: https://codereview.qt-project.org/#/c/69108/ We need ground
>> rules on how to design header names around namespace names.
>>
>>
>> b) Should namespaces be #includable? Some are (QtWin, QTest), some
>> aren't (Qt3D).
>>
>>
>> c) At Qt 5.0's launch, the advice given to users was "Only #include
>> the class name, not the module name". In other words, use "#include
>> <QQmlComponent>", not "#include <QtQml/QQmlComponent>. However, if
>> class names are allowed to be non-unique, this advice must change. I
>> guess we revert to the old way of #including the module name along
>> with the class name?
>
>No strong opinion but with a slight preference for
>
>#include <QtQml/QQmlComponent>
>
>which in a namespaced world could become:
>
>#include <QtQml/QComponent>
>
>> (4) Let's decide on how to name QML types.
>>
>> Spot the odd one out:
>>
>> - (Qt Multimedia module) QCamera class -> Camera QML type
>> - (Qt 3D Core module) Qt3D::QCamera class -> Camera QML type
>> - (Qt QML module) QQmlComponent class -> Component QML type
>> - (Qt 3D Core module) Qt3D::QComponent class -> Component3D QML type
>
>We renamed the Component3D type from Component fairly recently at the request
>of Konstantin Ritt to avoid a collision with QML's Component. I would prefer
>to use namespacing here too. Again, this only becomes necessary when mixing
>QtQML and Qt3D in the same QML file.

On the QML side, people can import with 'as', and we've never used any Q prefix there. So the whole namespace concepts fits a lot more naturally in there than in the existing C++ Qt world.

In addition, we'll anyway get more duplication of names with the new version of the Controls that are planned for 5.6. So we might as well start to live with it.

>
>> (5) Let's decide on the relationship between C++ modules and QML modules.
>>
>> C++ classes are split between between "Qt 3D Core" and "Qt 3D
>> Renderer". QML types are not (everything is under "Qt3D". Do we want
>> this asymmetry?
>
>Not sure I understand this. We have qml imports for the Qt3D.Core,
>Qt3D.Renderer and Qt3D.Input.
>
>There is an asymmetry that I don't particularly like in that the C++ classes
>in the 3 Qt3D libraries are all under the generic Qt3D namespace. Thinking
>about it I'd prefer to have those separated too i.e.
>
>namespace Qt3DCore {...}
>namespace Qt3DRenderer {...}
>namespace Qt3DInput {...}

Yes, in principle things should be symmetric between C++ and QML (if possible). In practice, these namespace names get pretty damn long.
>
>> (6) Let's finalize: Is it "Qt 3D Render" or "Qt 3D Renderer"?
>>
>> All other modules use:
>> * #include <QtModuleName> for the module-wide include
>> * QT += modulename for the .pro file
>>
>> However, we currently have a "Qt 3D Render" module with:
>> * #include <Qt3DRenderer>
>> * QT += 3drenderer
>>
>> Let's stick to existing conventions here.
>
>That was fixed yesterday to be Qt3DRenderer everywhere. Whether that's the best
>name is still being discussed but at least it's consistent now.
>
>As an aside, my concern with the Qt3DRenderer name is that it's a verb whereas
>other modules I can see being named along the lines of Qt3DPhysics, Qt3DAudio,
>Qt3DSkeletalAnimation etc. In that scheme we should likely change the name
>everywhere to Qt3DRender.
>
>> (7) (Unimportant in itself, but related to a few items above) Let's
>> decide on the definition of "module".
>>
>> This word is seriously overloaded (and sometimes abused, e.g. "QtBase
>> module"). Anyway, Active Qt and Qt 3D are the 2 "modules" in Qt that
>> have "sub-modules". How should "module" be defined?
>>
>> One possibility is: 1 module = 1 .pro file entry = 1 DLL (excluding
>> plugins), meaning that "QAxContainer", "QAxServer", "Qt 3D Core", "Qt
>> 3D Renderer", and "Qt 3D Input" are modules, while "Active Qt" and "Qt
>> 3D" are "module groups".
>
>Seems reasonable to me.

Yes, the above is as it should be IMO. Module is a shared library or a QML import. Qtbase is a repository. So Qt3D or QtMultimedia consist of several modules. They are both repositories as well as some sort of funcational unit in Qt. What we're lacking is a good name for the functional unit.

Cheers,
Lars


From marc.mutz at kdab.com  Mon Jun 15 17:24:39 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 15 Jun 2015 17:24:39 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <1999922.A8vEDpqMJj@finn>
References: <557A7773.3050903@familiesomers.nl>
	<3168200.nmen3gG1pL@tjmaciei-mobl4> <1999922.A8vEDpqMJj@finn>
Message-ID: <201506151724.39945.marc.mutz@kdab.com>

On Monday 15 June 2015 11:49:40 Olivier Goffart wrote:
> On Friday 12. June 2015 14:42:44 Thiago Macieira wrote:
> > On Friday 12 June 2015 18:58:59 Marc Mutz wrote:
> > > On Friday 12 June 2015 16:37:15 Thiago Macieira wrote:
> > > > On Friday 12 June 2015 12:12:17 Olivier Goffart wrote:
> > > > > Which mean using things like std::function, std::unique_ptr, in our
> > > > > ABI.
> > > > > Should we allow that?
> > > >
> > > > The problem is deciding between std::function and std::__1::function.
> > >
> > > Is __1 now standard? Or just a placeholder for what Clang's libc++
> > > uses?
> >
> > It's what libc++ uses, which is the real problem. For as long as there
> > are systems where you can opt into libstdc++ or libc++, we should avoid
> > hardcoding one or the other.
>
> We are not hard coding one. The compiler selects one.
>
> Now, that would mean that we break binary compatibility when the user
> switches the standard library. The question is whether we want to support
> this.

For as long as Qt existed, on Windows you could not link debug and release
versions mixed, because memory allocated in the application (new QWidget) is
deleted inside Qt (~QWidget).

So, we actually don't have binary compatibility in the sense that you can link
Qt into any C++ project, regardless of how and with which compiler Qt or the
project was built (there are C++ libraries that can do this, they funnel
everything through a C API and reconstruct a header-only C++ API on top of
that, much like you'd do with any other language binding, IIRC, it was in
Lippincott's talk last year (https://www.youtube.com/watch?v=3ZO0V4Prefc)).

Qt's binary compatibility is between Qt versions, not between toolchains, and
as such, I don't see a problem saying that if you change the toolchain (STL
(version)), then the BC guarantees are voided. That's just what we have now
already.

IoW: Before we continue to ban STL types from the API because of BC reasons,
we first need to fix the problem with mixed debug/release builds on Windows
(e.g. by stuffing every heap-allocated object that isn't born and dies in the
same library, into a shared_ptr, whose custom deleter takes care of calling
the right delete version). OTOH, if we're not fixing that issue, there's no
point in banning STL types from the API, at least not with the BC argument.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From thiago.macieira at intel.com  Mon Jun 15 17:27:44 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 15 Jun 2015 08:27:44 -0700
Subject: [Development] Some Qt3D feedback
In-Reply-To: <557EBE80.9010500@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<B4D22AFA-4D71-4D65-A00F-D5DD6FEE65D9@theqtcompany.com>
	<557EBE80.9010500@kdab.com>
Message-ID: <1484116.lGcEOp48Mb@tjmaciei-mobl4>

On Monday 15 June 2015 13:01:04 Sean Harmer wrote:
> * The existing syncqt.pl works

syncqt actually has support for namespaces so you could #include <NS/Class>
but I think it's disabled since it has some bugs and nothing is using it. We
could re-enable it.

Note that the namespace should not be the same as the module name. If we're
going to use the module name, we should simply make qdoc stop suggesting
#include <Class> for this module and qmake not add -I$QTDIR/include/Module.
That way, people have to #include <QtModule/Class> and there would be no
clash.

> * Code written with a using directive still looks like Qt code

That's their problem.

> Although we could recommend people to not use using directives we can't
> enforce it (nor should we) so the expense of the single repeated Q
> seemed like the least onerous option. Not ideal, but a compromise from
> the other options.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Mon Jun 15 17:33:35 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 15 Jun 2015 08:33:35 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <201506151724.39945.marc.mutz@kdab.com>
References: <557A7773.3050903@familiesomers.nl> <1999922.A8vEDpqMJj@finn>
	<201506151724.39945.marc.mutz@kdab.com>
Message-ID: <10396392.BVOeXtzl53@tjmaciei-mobl4>

On Monday 15 June 2015 17:24:39 Marc Mutz wrote:
> Qt's binary compatibility is between Qt versions, not between toolchains,
> and  as such, I don't see a problem saying that if you change the toolchain
> (STL (version)), then the BC guarantees are voided. That's just what we
> have now already.

I disagree. I understand what you said, but right now it is possible to switch
from libstdc++ to libc++ with no ill effects[*]. So the question is should be
asked the other way around: do we knowingly remove this currently-working
ability?

[*] provided, of course, that the two share their base C++ ABI, which some
Linux distros have not yet learned to do.

> IoW: Before we continue to ban STL types from the API because of BC
> reasons,  we first need to fix the problem with mixed debug/release builds
> on Windows (e.g. by stuffing every heap-allocated object that isn't born
> and dies in the same library, into a shared_ptr, whose custom deleter takes
> care of calling the right delete version). OTOH, if we're not fixing that
> issue, there's no point in banning STL types from the API, at least not
> with the BC argument.

That's a self-inflicted problem of MSVC. Whoever chooses to use MSVC is
therefore choosing to live with the problems that MSVC has. MinGW has no such
issues.

And the two things are not at all the same. In one, there's a feature from
libc++ that we are currently making use of. In the other, there's an MSVC
defect that we are not currently working around.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From olivier at woboq.com  Mon Jun 15 17:43:58 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Mon, 15 Jun 2015 17:43:58 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <201506151724.39945.marc.mutz@kdab.com>
References: <557A7773.3050903@familiesomers.nl> <1999922.A8vEDpqMJj@finn>
	<201506151724.39945.marc.mutz@kdab.com>
Message-ID: <3212263.lRkVWlcAu1@finn>

On Monday 15. June 2015 17:24:39 Marc Mutz wrote:
> On Monday 15 June 2015 11:49:40 Olivier Goffart wrote:
> > On Friday 12. June 2015 14:42:44 Thiago Macieira wrote:
> > > On Friday 12 June 2015 18:58:59 Marc Mutz wrote:
> > > > On Friday 12 June 2015 16:37:15 Thiago Macieira wrote:
> > > > > On Friday 12 June 2015 12:12:17 Olivier Goffart wrote:
> > > > > > Which mean using things like std::function, std::unique_ptr, in
> > > > > > our
> > > > > > ABI.
> > > > > > Should we allow that?
> > > > >
> > > > > The problem is deciding between std::function and
> > > > > std::__1::function.
> > > >
> > > > Is __1 now standard? Or just a placeholder for what Clang's libc++
> > > > uses?
> > >
> > > It's what libc++ uses, which is the real problem. For as long as there
> > > are systems where you can opt into libstdc++ or libc++, we should avoid
> > > hardcoding one or the other.
> >
> > We are not hard coding one. The compiler selects one.
> >
> > Now, that would mean that we break binary compatibility when the user
> > switches the standard library. The question is whether we want to support
> > this.
>
> For as long as Qt existed, on Windows you could not link debug and release
> versions mixed, because memory allocated in the application (new QWidget) is
> deleted inside Qt (~QWidget).
>
> So, we actually don't have binary compatibility in the sense that you can
> link Qt into any C++ project, regardless of how and with which compiler Qt
> or the project was built (there are C++ libraries that can do this, they
> funnel everything through a C API and reconstruct a header-only C++ API on
> top of that, much like you'd do with any other language binding, IIRC, it
> was in Lippincott's talk last year
> (https://www.youtube.com/watch?v=3ZO0V4Prefc)).
>
> Qt's binary compatibility is between Qt versions, not between toolchains,
> and as such, I don't see a problem saying that if you change the toolchain
> (STL (version)), then the BC guarantees are voided. That's just what we
> have now already.
>
> IoW: Before we continue to ban STL types from the API because of BC reasons,
> we first need to fix the problem with mixed debug/release builds on Windows
> (e.g. by stuffing every heap-allocated object that isn't born and dies in
> the same library, into a shared_ptr, whose custom deleter takes care of
> calling the right delete version). OTOH, if we're not fixing that issue,
> there's no point in banning STL types from the API, at least not with the
> BC argument.

The situation on Windows and the situation on Unix are different.
On windows binary compatibility is not kept accross toolchain.
But on Linux it is (mostly)

On Unix: Clang and GCC build are compatible, C++03/C++11/C++14 builds are
compatible. Debug/release build are compatible, libstdcpp and libcpp builds
are currently compatible. Exceptions/-fno-exceptions build are supposed to be
compatibles. And you can mix and match.

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org



From sahumada at texla.cl  Mon Jun 15 19:40:07 2015
From: sahumada at texla.cl (Sergio Ahumada)
Date: Mon, 15 Jun 2015 19:40:07 +0200
Subject: [Development] Specifying module dependencies
In-Reply-To: <46288284.CtoxMCC968@simon-sx58>
References: <20150612074744.GA13238@troll08.it.local>
	<46288284.CtoxMCC968@simon-sx58>
Message-ID: <557F0DF7.5030101@texla.cl>

On 15.06.2015 08:52, Simon Hausmann wrote:
>
> Perhaps there is a misunderstanding here, so let me confirm also what Joerg
> said: At this point we're interested in discussion repository dependencies. I
> understand that are somewhat parallel to the qt module dependencies and I also
> understand that a full build system "evaluation" is required to entirely
> reduce the duplication. However at this point we're interested in taking one
> step into a more modular direction for the repositories only.
>
> As it stands today, in order for a repository to be built by the current CI
> system, it has to be included in qt5.git. This is an unfortunate artifact of
> the way the system builds but I'm not convinced that it is a restriction we
> want to impose on contributed repositories. Therefore the new CI system does
> not require this.

maybe I misunderstood .. but are you saying that it is a hard
requirement to be registered in qt5.git in order to able to be part of
the current CI ?

how did https://codereview.qt-project.org/96072 and
https://codereview.qt-project.org/98297 get merged by the current CI then ?

> I think it would boil down to:
>
> 1) If you want your Qt module(s) to be part of a Qt release, then your
> repository needs to be registered in qt5.git and it will following the Qt
> product branching. So your 5.6 branch has to build and work against the 5.6
> branch of all the modules coming from depending repositories.
>
> 2) If you are not part of a Qt release yet but you would still like to use the
> continuous integration system, then your code has to build and work against
> the dev branch of the modules coming from depending repositories.
>
> Not perfect, no :). But an improvement IMHO. I think we want modules to become
> part of the Qt release and product, and we also want to allowing for automated
> testing as soon as possible.

I would say this is mostly how it works today the current CI unless I am
really out-of-date :)

cheers,
--
Sergio Ahumada
sahumada at texla.cl


From marc.mutz at kdab.com  Mon Jun 15 21:30:25 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 15 Jun 2015 21:30:25 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <3212263.lRkVWlcAu1@finn>
References: <557A7773.3050903@familiesomers.nl>
	<201506151724.39945.marc.mutz@kdab.com> <3212263.lRkVWlcAu1@finn>
Message-ID: <201506152130.26592.marc.mutz@kdab.com>

On Monday 15 June 2015 17:43:58 Olivier Goffart wrote:
> On Unix: Clang and GCC build are compatible,

Yes.

> C++03/C++11/C++14 builds are
> compatible.

No. On C++98, std::list is required to have O(1) splice(), in C++11+, O(1)
size() instead. The two are mutually exclusive, so std::list cannot be BC. And
at some point GCC will (have to change|will have changed) its basic_string
implementation to not be CoW anymore.

> Debug/release build are compatible, libstdcpp and libcpp
> builds  are currently compatible. Exceptions/-fno-exceptions build are
> supposed to be compatibles. And you can mix and match.

And all of this will still be true. Except that - like every other C++ library
- distributions need to deal with the incompatibility of std::list and
std::basic_string between C++98 and C++11.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From apoenitz at t-online.de  Mon Jun 15 21:01:54 2015
From: apoenitz at t-online.de (=?iso-8859-1?Q?Andr=E9_P=F6nitz?=)
Date: Mon, 15 Jun 2015 21:01:54 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <557EBE80.9010500@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <2401532.Dad0NEj85K@simon-sx58>
	<201506151018.39451.marc.mutz@kdab.com>
	<3150691.Qok5J0xsdy@simon-sx58>
	<B4D22AFA-4D71-4D65-A00F-D5DD6FEE65D9@theqtcompany.com>
	<557EBE80.9010500@kdab.com>
Message-ID: <20150615190154.GA2703@klara.mpi.htwm.de>


There seem to be two claims floating around:

  (a) namespaces help avoiding name clashs

-- and --

  (b) namespaces are not more onerous than poor man's prefixes

I see that that both can be true.

I cannot see that both can be true *at the same time*.

Which one can be true depends on the recommended use of 'using'.

So, assuming Qt modules would start using C++ namespaces,
would *you* recommend the use of 'using'?

if so:

    Please explain how that avoids name clashes.

else:

    Please explain how "QFoo::Bar" (or the even longer QtFoo::Bar,
    or QFoo::QBar or QtFoo::Bar) is *not* more onerous than "QFooBar"


Your "Although we could recommend people to not use using directives we
can't enforce it (nor should we)" indicates a preference for the 'else'
branch (expectedly so), but I'd appreciate to see the reasoning why
having to type '::' (and possibly 't' and a second 'Q') can be seen
positively *at all*

[And in the unexpected case that there was *any* way to see this
positively, it would be nice to learn how that offsets the inconsistency
with most of the rest of Qt. But I don't see how to get there.]

Andre'

From marc.mutz at kdab.com  Mon Jun 15 22:12:46 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 15 Jun 2015 22:12:46 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <10396392.BVOeXtzl53@tjmaciei-mobl4>
References: <557A7773.3050903@familiesomers.nl>
	<201506151724.39945.marc.mutz@kdab.com>
	<10396392.BVOeXtzl53@tjmaciei-mobl4>
Message-ID: <201506152212.46914.marc.mutz@kdab.com>

On Monday 15 June 2015 17:33:35 Thiago Macieira wrote:
> On Monday 15 June 2015 17:24:39 Marc Mutz wrote:
> > Qt's binary compatibility is between Qt versions, not between toolchains,
> > and  as such, I don't see a problem saying that if you change the
> > toolchain (STL (version)), then the BC guarantees are voided. That's
> > just what we have now already.
>
> I disagree. I understand what you said, but right now it is possible to
> switch  from libstdc++ to libc++ with no ill effects[*]. So the question
> is should be asked the other way around: do we knowingly remove this
> currently-working ability?

On Solaris, back when I still used it, you could switch between the RougeWave-
based STL, which was essentially frozen in the mid-90s, and stlport, which
could compile Boost. The two STLs were both binary incompatible. The correct
solution for this is to provide differently-compiled Qt versions, one for each
STL.

But let's take a step back, and review: With Windows out of the picture,
because it isn't BC with itself, and OS X probably having only one STL, which
on top is versioned with inline namespaces, that leaves the ability to switch
between stdlibc++ and libc++, which no other C++ library supports, incl.,
AFAICT, the KDE ones.

> [*] provided, of course, that the two share their base C++ ABI, which some
> Linux distros have not yet learned to do.

...and that not even works on all distributions.

A few years ago, there even wasn't a libc++ to make this argument.

I find this use-case of interchangable std C++ libraries far-fetched ("an den
Haaren herbeigezogen", for those of you who know German) and not really worth
pursuing, because it's basically a) the libc++/stdlibc++ developer's job to
make the two interchangeable, and b) failing that, the distro's and, more
importantly, the alternative is for us to continue to castrate ourselves to a
life of poorly re-implemented copies of std:: functionality, and reduced
interop with the myriad of *other* C++ libraries, both of which affects *all*
platforms and not just the one that doesn't really need our help, because it's
doing an excellent job of installed-software management already, unlike the
others.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Mon Jun 15 22:26:05 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 15 Jun 2015 22:26:05 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <20150615190154.GA2703@klara.mpi.htwm.de>
References: <ml2j2r$eg3$1@ger.gmane.org> <557EBE80.9010500@kdab.com>
	<20150615190154.GA2703@klara.mpi.htwm.de>
Message-ID: <201506152226.06428.marc.mutz@kdab.com>

On Monday 15 June 2015 21:01:54 Andr? P?nitz wrote:
> if so:
>
>     Please explain how that avoids name clashes.

You only need to add the prefix when the compiler tells you. E.g. if you use
QtGui::QTransform in one file and Qt3D::QTransform in another, in the same
project, you can write QTransform in both, without ambiguity. Only when you
need both in the same TU _and_ you using-direct _both_, you need to prefix
QtGui:: or Qt3D::, but only for QTransform, not, say, QAspectThread.

> else:
>
>     Please explain how "QFoo::Bar" (or the even longer QtFoo::Bar,
>     or QFoo::QBar or QtFoo::Bar) is not more onerous than "QFooBar"

Purely a matter of personal style. Given that the rest of the world has
happily lived with a standard library in namespace std, I fail to see how Qt
being inconsistent with the rest of the C++ world on something that is not
part of its core competency is something good.

How about we make syncqt create a header with typedefs QtFoo::QBar -> QFooBar?
:)

>
> Your "Although we could recommend people to not use using directives we
> can't enforce it (nor should we)" indicates a preference for the 'else'
> branch (expectedly so), but I'd appreciate to see the reasoning why
> having to type '::' (and possibly 't' and a second 'Q') can be seen
> positively at all

Namespaces partition not only the name space, but also ADL spaces. The larger
the project, the more important restricting all-too far-reaching ADL becomes.

As a practical example: We could import std::rel_ops into namespace Qt3D, and
would never have^Wforget to write op!=, op>, op<= and op>= again anymore, in
Qt3D, because they are synthesized from op== and op<, resp. We cannot do that
in the global namespace, because it would affect user code.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From thiago.macieira at intel.com  Mon Jun 15 22:03:55 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 15 Jun 2015 13:03:55 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <201506152212.46914.marc.mutz@kdab.com>
References: <557A7773.3050903@familiesomers.nl>
	<10396392.BVOeXtzl53@tjmaciei-mobl4>
	<201506152212.46914.marc.mutz@kdab.com>
Message-ID: <1894663.C4Ty3klsHK@tjmaciei-mobl4>

On Monday 15 June 2015 22:12:46 Marc Mutz wrote:
> > I disagree. I understand what you said, but right now it is possible to
> > switch  from libstdc++ to libc++ with no ill effects[*]. So the question
> > is should be asked the other way around: do we knowingly remove this
> > currently-working ability?
>
> On Solaris, back when I still used it, you could switch between the
> RougeWave- based STL, which was essentially frozen in the mid-90s, and
> stlport, which could compile Boost. The two STLs were both binary
> incompatible. The correct solution for this is to provide
> differently-compiled Qt versions, one for each STL.

Correct, but RWstl was not designed to be interoperable with libstdc++. libc++
was. It can be specifically configured to work in a separate (inline) namespace
and it will share the base C++ ABI with libstdc++ (libsupc++).

> But let's take a step back, and review: With Windows out of the picture,
> because it isn't BC with itself, and OS X probably having only one STL,
> which on top is versioned with inline namespaces, that leaves the ability
> to switch between stdlibc++ and libc++, which no other C++ library
> supports, incl., AFAICT, the KDE ones.

Right, that's only between libstdc++ and libc++. The question is which OS that
is relevant for:

a) OS X
b) Linux distributions that properly compile libc++ [*]
c) BSDs that have switched to Clang as the main compiler (e.g, FreeBSD)

> > [*] provided, of course, that the two share their base C++ ABI, which some
> > Linux distros have not yet learned to do.
>
> ...and that not even works on all distributions.
>
> A few years ago, there even wasn't a libc++ to make this argument.

A few years ago, our argument was different: we had the -no-stl option. During
Qt 3 times, that meant binary incompatible builds of Qt. For Qt 4, someone
made it so that the two builds were compatible -- whether that was intentional
or accidental, I don't know (that was before my time). What I did ensure was
that we made that official.

That proved beneficial when Apple decided to create libc++.

> I find this use-case of interchangable std C++ libraries far-fetched ("an
> den Haaren herbeigezogen", for those of you who know German) and not really
> worth pursuing, because it's basically a) the libc++/stdlibc++ developer's
> job to make the two interchangeable, and b) failing that, the distro's and,
> more importantly, the alternative is for us to continue to castrate
> ourselves to a life of poorly re-implemented copies of std:: functionality,
> and reduced interop with the myriad of *other* C++ libraries, both of which
> affects *all* platforms and not just the one that doesn't really need our
> help, because it's doing an excellent job of installed-software management
> already, unlike the others.

It's the same reason why we keep 32-bit OS X builds working: some people using
Qt still need to link against proprietary libraries that are using the "wrong"
options.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Mon Jun 15 23:03:08 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 15 Jun 2015 14:03:08 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <1894663.C4Ty3klsHK@tjmaciei-mobl4>
References: <557A7773.3050903@familiesomers.nl>
	<201506152212.46914.marc.mutz@kdab.com>
	<1894663.C4Ty3klsHK@tjmaciei-mobl4>
Message-ID: <4659466.0rTWc1MjrG@tjmaciei-mobl4>

On Monday 15 June 2015 13:03:55 Thiago Macieira wrote:
> b) Linux distributions that properly compile libc++ [*]
>
> > > [*] provided, of course, that the two share their base C++ ABI, which
> > > some
> > > Linux distros have not yet learned to do.

By the way, the list of Linux distributions that properly compile libc++ does
NOT include:

1) Debian & Ubuntu
libc++.so.1 contains _ZTIi and _ZdlPv, for example

2) OpenSUSE 13.2
$ ldd -d -r /usr/lib64/libc++.so.1
        linux-vdso.so.1 (0x00007ffc9f73c000)
        libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f15d6c52000)
        libc.so.6 => /lib64/libc.so.6 (0x00007f15d68ab000)
        libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00007f15d6694000)
        /lib64/ld-linux-x86-64.so.2 (0x00007f15d712f000)
undefined symbol: _ZTVN10__cxxabiv120__si_class_type_infoE
(/usr/lib64/libc++.so.1)
undefined symbol: _ZTVN10__cxxabiv117__class_type_infoE
(/usr/lib64/libc++.so.1)
undefined symbol: _ZTVN10__cxxabiv121__vmi_class_type_infoE
(/usr/lib64/libc++.so.1)
undefined symbol: __cxa_pure_virtual    (/usr/lib64/libc++.so.1)
undefined symbol: __gxx_personality_v0  (/usr/lib64/libc++.so.1)
undefined symbol: __cxa_end_catch       (/usr/lib64/libc++.so.1)
undefined symbol: __cxa_allocate_exception      (/usr/lib64/libc++.so.1)
undefined symbol: __cxa_guard_release   (/usr/lib64/libc++.so.1)
undefined symbol: __cxa_begin_catch     (/usr/lib64/libc++.so.1)
undefined symbol: __cxa_rethrow (/usr/lib64/libc++.so.1)
undefined symbol: __cxa_throw   (/usr/lib64/libc++.so.1)
undefined symbol: __cxa_guard_abort     (/usr/lib64/libc++.so.1)
undefined symbol: __cxa_free_exception  (/usr/lib64/libc++.so.1)
undefined symbol: __cxa_guard_acquire   (/usr/lib64/libc++.so.1)

3) Arch Linux
libc++abi has _ZTIi and _ZdlPv but libstdc++ doesn't link to it.

4) Fedora
libc++ not shipped
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From olivier at woboq.com  Tue Jun 16 01:28:53 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Tue, 16 Jun 2015 01:28:53 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <201506152130.26592.marc.mutz@kdab.com>
References: <557A7773.3050903@familiesomers.nl> <3212263.lRkVWlcAu1@finn>
	<201506152130.26592.marc.mutz@kdab.com>
Message-ID: <4930578.PG3rHCkGoY@finn>

On Monday 15. June 2015 21:30:25 Marc Mutz wrote:
> On Monday 15 June 2015 17:43:58 Olivier Goffart wrote:
> > On Unix: Clang and GCC build are compatible,
>
> Yes.
>
> > C++03/C++11/C++14 builds are compatible.
>
> No. [... std::list ...]

Yes. I was talking about Qt build, and since Qt does not use the stdlib in
it's ABI currently, a change in std::list is irrelevant for Qt.

> > Debug/release build are compatible, libstdcpp and libcpp
> > builds  are currently compatible. Exceptions/-fno-exceptions build are
> > supposed to be compatibles. And you can mix and match.
>
> And all of this will still be true. Except that - like every other C++
> library - distributions need to deal with the incompatibility of std::list
> and std::basic_string between C++98 and C++11.

Depends whether or not we make the choice to break the "no stl in abi" rule.

From andre at familiesomers.nl  Tue Jun 16 08:14:14 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Tue, 16 Jun 2015 08:14:14 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506152226.06428.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<557EBE80.9010500@kdab.com>	<20150615190154.GA2703@klara.mpi.htwm.de>
	<201506152226.06428.marc.mutz@kdab.com>
Message-ID: <557FBEB6.8010600@familiesomers.nl>

Marc Mutz schreef op 15-6-2015 om 22:26:
> On Monday 15 June 2015 21:01:54 Andr? P?nitz wrote:
>> if so:
>>
>>      Please explain how that avoids name clashes.
> You only need to add the prefix when the compiler tells you. E.g. if you use
> QtGui::QTransform in one file and Qt3D::QTransform in another, in the same
> project, you can write QTransform in both, without ambiguity. Only when you
> need both in the same TU _and_ you using-direct _both_, you need to prefix
> QtGui:: or Qt3D::, but only for QTransform, not, say, QAspectThread.
Would that help with being able to read and understand the code, or
would it hinder? If someone were to post a snippet of code using that
QTransform in it, how does one know if that is QtGui::QTransform or
Qt3D::QTransform? Or would that be sufficiently clear from the context.
Code is, after all, not only to be understood by compilers, but also by
humans reading it. How would it affect people trying to use a search
engine to find out what QTransform does? At QtCS, we saw that quite a
portion of people just google class names for the docs (and discussed
that one still ends up at 4.8 docs a bit too often when doing that).

Andr?


From Kai.Koehne at theqtcompany.com  Tue Jun 16 08:48:01 2015
From: Kai.Koehne at theqtcompany.com (Koehne Kai)
Date: Tue, 16 Jun 2015 06:48:01 +0000
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <4930578.PG3rHCkGoY@finn>
References: <557A7773.3050903@familiesomers.nl> <3212263.lRkVWlcAu1@finn>
	<201506152130.26592.marc.mutz@kdab.com> <4930578.PG3rHCkGoY@finn>
Message-ID: <AM2PR02MB0673FD77E4DC15D6A66C2390E1A70@AM2PR02MB0673.eurprd02.prod.outlook.com>

> -----Original Message-----
> From: development-bounces+kai.koehne=theqtcompany.com at qt-
> [..]
> Depends whether or not we make the choice to break the "no stl in abi" rule.

I understood the rule has miniscule practical value,  and hinders us from providing the best Qt API possible. So I'm all for removing it.

My 2 cents

Kai


From Lars.Knoll at theqtcompany.com  Tue Jun 16 08:59:11 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Tue, 16 Jun 2015 06:59:11 +0000
Subject: [Development] Some Qt3D feedback
In-Reply-To: <557FBEB6.8010600@familiesomers.nl>
References: <ml2j2r$eg3$1@ger.gmane.org> <557EBE80.9010500@kdab.com>
	<20150615190154.GA2703@klara.mpi.htwm.de>
	<201506152226.06428.marc.mutz@kdab.com>
	<557FBEB6.8010600@familiesomers.nl>
Message-ID: <D1A59568.32431%lars.knoll@theqtcompany.com>

On 16/06/15 08:14, "Andr? Somers" <andre at familiesomers.nl> wrote:

>Marc Mutz schreef op 15-6-2015 om 22:26:
>> On Monday 15 June 2015 21:01:54 Andr? P?nitz wrote:
>>> if so:
>>>
>>>      Please explain how that avoids name clashes.
>> You only need to add the prefix when the compiler tells you. E.g. if
>>you use
>> QtGui::QTransform in one file and Qt3D::QTransform in another, in the
>>same
>> project, you can write QTransform in both, without ambiguity. Only when
>>you
>> need both in the same TU _and_ you using-direct _both_, you need to
>>prefix
>> QtGui:: or Qt3D::, but only for QTransform, not, say, QAspectThread.
>Would that help with being able to read and understand the code, or
>would it hinder? If someone were to post a snippet of code using that
>QTransform in it, how does one know if that is QtGui::QTransform or
>Qt3D::QTransform? Or would that be sufficiently clear from the context.
>Code is, after all, not only to be understood by compilers, but also by
>humans reading it. How would it affect people trying to use a search
>engine to find out what QTransform does? At QtCS, we saw that quite a
>portion of people just google class names for the docs (and discussed
>that one still ends up at 4.8 docs a bit too often when doing that).

This is quite an important point to remember when designing our APIs. Code
is written once, but read many times. We?ve always been striving for code
that is self explaining and not confusing to anybody reading it. It?s one
of Qt?s core strengths. And this is something that can become very hard if
we have duplicated class names in different namespaces and they are used
unprefixed.

Cheers,
Lars


From Kai.Koehne at theqtcompany.com  Tue Jun 16 10:49:23 2015
From: Kai.Koehne at theqtcompany.com (Koehne Kai)
Date: Tue, 16 Jun 2015 08:49:23 +0000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <3669476.3pf2O7shbg@finn>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<2859490.OQFXhj0xX3@tjmaciei-mobl4>
	<AM2PR02MB03562FC38F65F91C4A6BE9AEE6B90@AM2PR02MB0356.eurprd02.prod.outlook.com>
	<3669476.3pf2O7shbg@finn>
Message-ID: <AM2PR02MB0673F9D3D481508156AB9DFAE1A70@AM2PR02MB0673.eurprd02.prod.outlook.com>



> -----Original Message-----
> From: development-bounces+kai.koehne=theqtcompany.com at qt-
> [...]
> If you ask my opinion, 'errorOccurred' sounds like a sensible name.

I concur that errorOccurred() is the most sensible choice. It also matches the wording in the existing documentation ('error occurred' appears 188 x in qtbase.git).

Regarding types exposed to QML, let's see ... maybe we can even hack it so that 'onError' still works with Qt 6 for QML. But we've still plenty of time to figure this out, since the error() signal won't go away soon :)

I'll try to come up with patches for qtbase now.

Regards

Kai

From simon.hausmann at theqtcompany.com  Tue Jun 16 10:54:48 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Tue, 16 Jun 2015 10:54:48 +0200
Subject: [Development] Specifying module dependencies
In-Reply-To: <557F0DF7.5030101@texla.cl>
References: <20150612074744.GA13238@troll08.it.local>
	<46288284.CtoxMCC968@simon-sx58> <557F0DF7.5030101@texla.cl>
Message-ID: <2410764.EqIleagsdg@simon-sx58>

On Monday, June 15, 2015 07:40:07 PM Sergio Ahumada wrote:
> On 15.06.2015 08:52, Simon Hausmann wrote:
> > Perhaps there is a misunderstanding here, so let me confirm also what
> > Joerg
> > said: At this point we're interested in discussion repository
> > dependencies. I understand that are somewhat parallel to the qt module
> > dependencies and I also understand that a full build system "evaluation"
> > is required to entirely reduce the duplication. However at this point
> > we're interested in taking one step into a more modular direction for the
> > repositories only.
> >
> > As it stands today, in order for a repository to be built by the current
> > CI
> > system, it has to be included in qt5.git. This is an unfortunate artifact
> > of the way the system builds but I'm not convinced that it is a
> > restriction we want to impose on contributed repositories. Therefore the
> > new CI system does not require this.
>
> maybe I misunderstood .. but are you saying that it is a hard
> requirement to be registered in qt5.git in order to able to be part of
> the current CI ?
>
> how did https://codereview.qt-project.org/96072 and
> https://codereview.qt-project.org/98297 get merged by the current CI then ?

Unfortunately I can't find any build logs for those two modules that support
my theory, but from a glance at qtmod_test.pl I have the impression that the
following is implemented:

1) Modules inside qt5.git are built using "make module-foo" and thus rely on
qt5.pro to have the correct dependency chain. Sync.profile is used to "git
reset" to the right "heads" of depending modules.

2) For modules outside qt5.git sync.profile is used to do "make module-bar"
and "make module-baz" in qt5.git before building the module itself. If no
sync.profile is present, qtbase is the automatic dependency. That means such
modules cannot depend on other modules unless they're part of qt5.git.

We are eliminating these restrictions - a module can depend on other modules
regardless of where they are. All the module needs to be able to do is to
build with "qmake" and "make" and support everything necessary with "make
install". As it turns out, this is what our existing modules support to a
surprising degree :)


Simon

From simon.hausmann at theqtcompany.com  Mon Jun 15 08:28:28 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Mon, 15 Jun 2015 08:28:28 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <20150612205235.GA3496@klara.mpi.htwm.de>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506120058.42979.marc.mutz@kdab.com>
	<20150612205235.GA3496@klara.mpi.htwm.de>
Message-ID: <5178423.dX4ShdY16o@simon-sx58>

On Friday, June 12, 2015 10:52:35 PM Andr? P?nitz wrote:
> On Fri, Jun 12, 2015 at 12:58:42AM +0200, Marc Mutz wrote:
> > On Thursday 11 June 2015 23:15:20 Andr? P?nitz wrote:
> > > That's exactly the kind of situation I was referring to in my previous
> > > mail: This is intentionally introducing API inconsistency. It does not
> > > really matter to me whether "poor-man's prefix name spacing" is
> > > unfashionable or "we" consider it bad. It is simply inconsistent with
> > > more than 200 of existing exported QQuick*, QSG* and QQml* classes.
> >
> > For me, QQuick*, QSG*, QQml* are as much inconsistent with QtCore, QtGui
> > and QtWidget (excepting QGraphics*) naming, where none of the types
> > starts with poor man's prefix namespacing, as Qt3D::QParameter and QQml*.
>
> Generally useful stuff goes to QtCore, less general stuff is found in "leaf"
> modules. Commonly used items get short names, leaf items longer ones. It's
> a kind of Huffman code at heart. Using poor man's prefix namespacing is one
> way out. Not the only one, not necessarily the best, but one seen in real
> life and one that's known to work.
>
> > And as Qt grows and grows, the chance of name clashes increases
> > (http://en.wikipedia.org/wiki/Birthday_problem),
>
> I had cherished some hope that Qt class names in leaf modules are not chosen
> according a discrete (almost) uniform distribution. Looks like I stand
> corrected. [1/2 ;-)]
>
> The good news is that even the most stupid version of prefix namespacing
> (QModuleXXX) solves this nicely, as it restricts the potential of conflicts
> to the module itself.
>
> > as witnessed by the
> > introduction of namespaces for disambiguating names from QtQuick1 and
> > QtDeclarative. QtMultimedia (which largely uses traditional names) has
> > several common names, too. Namespaces, if the whole module is wrapped,
> > and the namespace name is derived consistently from the module's soname,
> > provide a reliable partition of the name space.
>
> It is easy to predict that the use of proper C++ namespaces immediately
> opens the door to bikeshedding on the merits of using declatations and
> using directives. It is as easy to predict that the Modernizers will claim
> that the only true solution is to use fully qualified names, everywhere. We
> will end up with a random mess of old style identifiers and newfangled
> ones, with additional :: line noise on top of what we'd get by poor man's
> namespacing, without the bikeshedding effort.
> > If a new library cannot change the established ways, including to
> > experiment with it, then Qt will be forever locked in its 90s API,
> > because, let's face it, come Qt 6, no-one will have the time to implement
> > nor the incentive to break SC in such a broad way as to lift all of Qt to
> > a new API standard, on top of all the work that will go into
> > C++11/14-enabling the API, and the inevitable work on the containers. And
> > the pain will grow and grow.
> There's quite some room for experiments in playground projects. I don't
> consider "Qt proper" as the appropriate venue for experiments. I would
> likely see that less strict if there were less strict compatibility
> requirements allowing to correct failed experiments. But as it stands, we
> have them.
>
> I tend to agree that the transition from Qt 5 to 6 will ask for a painless
> upgrade path again. We had rather good experiences with the large degree of
> source compatibility from 4 to 5. Less so from 3 to 4. The main point here
> is that an upgrade path does not necessarily require full source
> compatibility, it "only" needs to either allow for code being compilable
> with both version, possibly after some massaging of the original code base,
> *or* a mostly automated migration. Since going from QFooBar to QtFoo::QBar
> is possible in both cases, using poor man's namespacing in Qt 5 does not
> add significant technical debt.
>
> > So, giving each module the leeway to modernize its API at its own pace
> > seems to me the only workable solution. Of course, APIs should still be
> > consistent, but whether a module uses namespaces or not doesn't really
> > influence the consistency.
>
> It does by itself as the namespace is part of the API. And it adds more
> opportunities for even less consistency, see the reference to the use
> of 'using' above.

I agree with Andr?.

The use of namespaces in the implementation of Qt modules is common by now,
the use of namespaces visible to the users of Qt through our public API is
_not_ common and it is inconsistent with the rest of Qt at this point - as
unfortunate as this is. In my opinion we should revisit this only by the time
we're discussing a big API break.


Simon

From oswald.buddenhagen at theqtcompany.com  Tue Jun 16 11:15:29 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Tue, 16 Jun 2015 11:15:29 +0200
Subject: [Development] Specifying module dependencies
In-Reply-To: <46288284.CtoxMCC968@simon-sx58>
References: <20150612074744.GA13238@troll08.it.local>
	<46288284.CtoxMCC968@simon-sx58>
Message-ID: <20150616091529.GA9468@troll08.it.local>

On Mon, Jun 15, 2015 at 08:52:52AM +0200, Simon Hausmann wrote:
> We also do have at this point a duplication of repository dependencies
> in qt.pro as well as in the repository sync.profile. I do believe that
> we can eliminate this dependency without any downside, based on your
> idea of placing a .pri file into the top-level directory of each
> repository.
>
that's actually your idea. ;)
my idea was parsing the qt.pro file as it exists today.

> 2) If you are not part of a Qt release yet but you would still like to
> use the continuous integration system, then your code has to build and
> work against the dev branch of the modules coming from depending
> repositories.
>
this is quite unreasonable.

in fact, our official recommendation is that people should develop
against the latest stable branch. at least according to thiago - see
also his insistence on making stable the default branch in git.

some addons try to stay compatible with older qt releases. for this to
really work, they should have two branch configs: the earliest release
they are supposed to support, and dev.

another thing that speaks for qt5.git as the integration point: up to
now, we actually build every module as part of a top-level build, even
if we do it only selectively. does the new CI change this approach?

so far, it seems that qt5.git is the right place, because it needs to be
authoritative for some branches *anyway*. the easiest approach seems to
be generalizing the concept and making branching qt5.git easy. up to the
point where people don't re-use old feature branches because setting up
CI for new ones is such a friggin' PITA, fwiw.

with that in mind, please give this another thought:

> On Friday, June 12, 2015 09:47:44 AM Oswald Buddenhagen wrote:
> > it all boils down to the fact that aggregation must happen top-down.
> > we could unify the implementation somewhat by adding more custom fields
> > to .gitmodules instead of duplicating some of the information in qt.pro.

From marc.mutz at kdab.com  Tue Jun 16 12:25:08 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Tue, 16 Jun 2015 12:25:08 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <D1A59568.32431%lars.knoll@theqtcompany.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <557FBEB6.8010600@familiesomers.nl>
	<D1A59568.32431%lars.knoll@theqtcompany.com>
Message-ID: <201506161225.09412.marc.mutz@kdab.com>

On Tuesday 16 June 2015 08:59:11 Knoll Lars wrote:
> >Marc Mutz schreef op 15-6-2015 om 22:26:
> >> On Monday 15 June 2015 21:01:54 Andr? P?nitz wrote:
> >>> if so:
> >>>      Please explain how that avoids name clashes.
> >>>
> >> You only need to add the prefix when the compiler tells you. E.g. if
> >>
> >>you use
> >>
> >> QtGui::QTransform in one file and Qt3D::QTransform in another, in the
> >>
> >>same
> >>
> >> project, you can write QTransform in both, without ambiguity. Only when
> >>
> >>you
> >>
> >> need both in the same TU and you using-direct _both_, you need to
> >>
> >>prefix
> >>
> >> QtGui:: or Qt3D::, but only for QTransform, not, say, QAspectThread.
> >
> >Would that help with being able to read and understand the code, or
> >would it hinder? If someone were to post a snippet of code using that
> >QTransform in it, how does one know if that is QtGui::QTransform or
> >Qt3D::QTransform? Or would that be sufficiently clear from the context.
> >Code is, after all, not only to be understood by compilers, but also by
> >humans reading it. How would it affect people trying to use a search
> >engine to find out what QTransform does? At QtCS, we saw that quite a
> >portion of people just google class names for the docs (and discussed
> >that one still ends up at 4.8 docs a bit too often when doing that).
>
> This is quite an important point to remember when designing our APIs. Code
> is written once, but read many times. We?ve always been striving for code
> that is self explaining and not confusing to anybody reading it. It?s one
> of Qt?s core strengths. And this is something that can become very hard if
> we have duplicated class names in different namespaces and they are used
> unprefixed.

Note that in a world of auto variables, class names are no longer _that_
important. Functions are important, they are still visible. But other than at
initial creation, class names fade to be background.

And now you tell me how using lots of auto is bad for readability, because you
never know what type the variable has, to which I will reply that in Python,
Perl, PHP, JavaScript and others, there's no way to spell the type of a
variable, and people write very large projects in these languages and never
look back.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From ulf.hermann at theqtcompany.com  Tue Jun 16 11:39:56 2015
From: ulf.hermann at theqtcompany.com (Ulf Hermann)
Date: Tue, 16 Jun 2015 11:39:56 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506161225.09412.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<557FBEB6.8010600@familiesomers.nl>	<D1A59568.32431%lars.knoll@theqtcompany.com>
	<201506161225.09412.marc.mutz@kdab.com>
Message-ID: <557FEEEC.7010403@theqtcompany.com>

> Note that in a world of auto variables, class names are no longer _that_
> important. Functions are important, they are still visible. But other than at
> initial creation, class names fade to be background.
>
> And now you tell me how using lots of auto is bad for readability,
> because you never know what type the variable has, to which I will
> reply that in Python, Perl, PHP, JavaScript and others, there's no
> way to spell the type of a variable, and people write very large
> projects in these languages and never look back.

Uh, no, you either don't write large projects in PHP (or Perl), or you do look back with *fond* memories. At least that's my experience. And the insane type system of PHP definitely has something to do with this. So, I do like to make it clear what types I'm using (except for specific situations like iterators in loops) and namespaces can definitely help here. I understand we're not exposing them in public API today, but that doesn't mean they're useless.

regards,
Ulf





From Marco.Bubke at theqtcompany.com  Tue Jun 16 11:53:10 2015
From: Marco.Bubke at theqtcompany.com (Bubke Marco)
Date: Tue, 16 Jun 2015 09:53:10 +0000
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <AM2PR02MB0673FD77E4DC15D6A66C2390E1A70@AM2PR02MB0673.eurprd02.prod.outlook.com>
References: <557A7773.3050903@familiesomers.nl> <3212263.lRkVWlcAu1@finn>
	<201506152130.26592.marc.mutz@kdab.com> <4930578.PG3rHCkGoY@finn>,
	<AM2PR02MB0673FD77E4DC15D6A66C2390E1A70@AM2PR02MB0673.eurprd02.prod.outlook.com>
Message-ID: <AM3PR02MB0550EA8AC9D064EE67C33B4689A70@AM3PR02MB0550.eurprd02.prod.outlook.com>

> -----Original Message-----
> From: development-bounces+kai.koehne=theqtcompany.com at qt-
> [..]
> Depends whether or not we make the choice to break the "no stl in abi" rule.

As I am looking at the advantages versus the the disadvantages in using the standard library I opting for using it. For example  converting the qt container to standard container and the other way around without a cost would quite good for interoperabilty. I hope not that Qt likes to be stay on their own island as the rest is moving on.

From paul.tvete at theqtcompany.com  Tue Jun 16 12:28:51 2015
From: paul.tvete at theqtcompany.com (Paul Olav Tvete)
Date: Tue, 16 Jun 2015 12:28:51 +0200
Subject: [Development] Fwd: (QTBUG-46655) qt5base: font license files
	missing
In-Reply-To: <11035771.b9HOrmF5uL@tjmaciei-mobl4>
References: <11035771.b9HOrmF5uL@tjmaciei-mobl4>
Message-ID: <9197441.g5mRXBqj82@dragaera>

On Sunday 14. June 2015 23.18.18 Thiago Macieira wrote:
> The file qtbase-opensource-src-5.4.2/lib/fonts/README
> states:
> 'Copyright statements and the source of the qpf fonts are located in
> ../../src/3rdparty/fonts'
>
> The directory src/3rdparty/fonts does not exist in qtbase-opensource-
> src-5.4.2.tar.xz archive.
>
> This directory exists in the 'old' qt-4.8.7 distribution and contains the
> various font license files.
>
> -----------------------------------------
>
> Does anyone know:
>
> a) where the font files come from?

I don't remember precisely, but most (if not all) were taken from whatever
Linux distribution we were using at the time when Qt/Embedded was made (around
1999/2000).

> b) what licences apply to them?

That should be the licenses contained in the Qt 4 repository.

> c) if those font files are still used in any version?

There is still code in Qt that reads and adds QPF files if they are installed,
but I do not believe this is commonly used. In any case,  if someone needs QPF
fonts they can get them from other sources than the Qt packages.  It sounds
like a good idea to remove the font files from qtbase.

TL;DR: Nuke it from orbit.

- Paul




From pattyn.kurt at gmail.com  Tue Jun 16 13:28:41 2015
From: pattyn.kurt at gmail.com (Kurt Pattyn)
Date: Tue, 16 Jun 2015 13:28:41 +0200
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <CALX7-s5iAf-sERD2SpfjR6NDDWQkpM4sodZ010B08cj-fj_L7A@mail.gmail.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<13279726.762LyY3m5A@tjmaciei-mobl4>
	<20150610151406.5693520.88469.26350@theqtcompany.com>
	<CALX7-s4=XfgUanzsXrZzDuMDGafvCYCrmBnnFY4PJ+RFkm73sw@mail.gmail.com>
	<AM3PR02MB094638010CFFC93FE5E02D6AF5BC0@AM3PR02MB0946.eurprd02.prod.outlook.com>
	<CALX7-s5iAf-sERD2SpfjR6NDDWQkpM4sodZ010B08cj-fj_L7A@mail.gmail.com>
Message-ID: <0D016EBD-699A-41D7-A06E-0BF654D281CA@gmail.com>

Well,

you can also think of ?on? + <event>, like in: onWindowClosed, onMouseClicked, onBytesReceived, ?
In the same analogy, you could have onErrorOccurred.

Seems very intuitive to me.

It depends if you want to react to a state or to the event causing that state.

Cheers,

Kurt

> On 11 Jun 2015, at 20:29, Alan Alpert <416365416c at gmail.com> wrote:
>
> On Thu, Jun 11, 2015 at 7:11 AM, Hausmann Simon
> <Simon.Hausmann at theqtcompany.com> wrote:
>> Hi,
>>
>> I agree about the inconsistency in tense, that is a good argument against error(),
>> although it is similarly unfortunate that the inconsistency in tense is more widespread than
>> assumed.
>>
>> I'm not sure onErred or onErrored is any better, to be honest. I think it's more likely
>> to result in a typo than the most basic form of the word - error - instead of some conjugation.
>>
>> In the light of that I think I'd prefer onFailed or onFailure - but I think it would perhaps be
>> a mistake to make our existing APIs more inconsistent than necessary. It seems like an
>> unfortunate choice, but I think it's better to stick to error() than to have some QML types
>> have onError and some have onFailure.
>
> I strongly advocate against replacing onError with onFailure. The
> issue as I see it is a conflict between classic (perhaps BASIC
> derived?) convention of handlers being "on" + <state noun> versus our
> convention of "on" + <past tense verb>. Failure, Error (and success,
> completion etc.) are all the old convention so it's not worth moving
> from Error just to another word in the same convention that we're
> trying to escape from. I also don't like to conceptually pin error to
> failure, because in rare cases you can still have a partial success
> despite an error condition.
>
> Since there is this other convention that uses "onError" a lot (at
> least in XMLHttpRequest), I can see how a similar (but past tense)
> word would be confusing to many developers. So now we're weighing the
> cost of confusing both new and old developers just to make the
> refactoring support work better. I'm no longer convinced it's
> worthwhile, so I'm with Simon on that it's better to stick to error()
> for now. At least for the QML exposed APIs.
>
>> If I break out the thesaurus, then we also have
>>
>>      errorBefell
>
> If we want to sound fancy, we can use an obscure language and then it
> can be shorter too: tokFeil . Also solves the problem of looking like
> other APIs, as they limited themselves to English.
>
> --
> Alan Alpert
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development


From szehowe.koh at gmail.com  Tue Jun 16 13:50:27 2015
From: szehowe.koh at gmail.com (Sze Howe Koh)
Date: Tue, 16 Jun 2015 19:50:27 +0800
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <0D016EBD-699A-41D7-A06E-0BF654D281CA@gmail.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<13279726.762LyY3m5A@tjmaciei-mobl4>
	<20150610151406.5693520.88469.26350@theqtcompany.com>
	<CALX7-s4=XfgUanzsXrZzDuMDGafvCYCrmBnnFY4PJ+RFkm73sw@mail.gmail.com>
	<AM3PR02MB094638010CFFC93FE5E02D6AF5BC0@AM3PR02MB0946.eurprd02.prod.outlook.com>
	<CALX7-s5iAf-sERD2SpfjR6NDDWQkpM4sodZ010B08cj-fj_L7A@mail.gmail.com>
	<0D016EBD-699A-41D7-A06E-0BF654D281CA@gmail.com>
Message-ID: <CALW8pfUpoEnS19xF4gbfp7zbq2zum=vPxo54nqKXfqmg1pwf9g@mail.gmail.com>

On 16 June 2015 at 19:28, Kurt Pattyn <pattyn.kurt at gmail.com> wrote:
> Well,
>
> you can also think of ?on? + <event>, like in: onWindowClosed, onMouseClicked, onBytesReceived, ?
> In the same analogy, you could have onErrorOccurred.
>
> Seems very intuitive to me.
>
> It depends if you want to react to a state or to the event causing that state.

The QML spec says "on" + <signal>, not <state>:
http://doc.qt.io/qt-5/qtqml-syntax-signals.html#receiving-signals-with-signal-handlers

You can call connect() on the thing after "on":
http://doc.qt.io/qt-5/qtqml-syntax-signals.html#connecting-signals-to-methods-and-signals

The thing after "on" is also exposed to C++ as a signal; it can be
passed to QObject::connect() in the SIGNAL() macro.

So, we need to use signal names (which are past tense verbs).


Regards,
Sze-Howe

From marc.mutz at kdab.com  Tue Jun 16 15:41:22 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Tue, 16 Jun 2015 15:41:22 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <557FEEEC.7010403@theqtcompany.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506161225.09412.marc.mutz@kdab.com>
	<557FEEEC.7010403@theqtcompany.com>
Message-ID: <201506161541.23510.marc.mutz@kdab.com>

On Tuesday 16 June 2015 11:39:56 Ulf Hermann wrote:
> > Note that in a world of auto variables, class names are no longer _that_
> > important. Functions are important, they are still visible. But other
> > than at initial creation, class names fade to be background.
> >
> > And now you tell me how using lots of auto is bad for readability,
> > because you never know what type the variable has, to which I will
> > reply that in Python, Perl, PHP, JavaScript and others, there's no
> > way to spell the type of a variable, and people write very large
> > projects in these languages and never look back.
>
> Uh, no, you either don't write large projects in PHP (or Perl), or you do
> look back with *fond* memories. At least that's my experience. And the
> insane type system of PHP definitely has something to do with this. So, I
> do like to make it clear what types I'm using (except for specific
> situations like iterators in loops) and namespaces can definitely help
> here. I understand we're not exposing them in public API today, but that
> doesn't mean they're useless.

Don't confuse the problems of dynamic type systems with not mentioning the
variable type.

This is the style advocated by the likes of Scott Meyers:

    auto widget = new QWidget(this);
    auto layout = new QVBoxLayout(widget);
    auto le = new QLineEdit(widget);

For type conversions, you're supposed to use static_cast on the rhs:

    auto integer = static_cast<int>(someLongLong);

All this is still statically typed, and at some point QtC will show you the
type of the variable when you hover, if it doesn't already.

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From Maurice.Kalinowski at theqtcompany.com  Tue Jun 16 14:42:21 2015
From: Maurice.Kalinowski at theqtcompany.com (Kalinowski Maurice)
Date: Tue, 16 Jun 2015 12:42:21 +0000
Subject: [Development] Bluetooth support for Windows (RT/10) in Qt 5.6
Message-ID: <VI1PR02MB110492B7B1D315BE4B6878E0ECA70@VI1PR02MB1104.eurprd02.prod.outlook.com>

Hi everyone,

It might sound weird that while we're trying to get 5.5.0 out I am starting a discussion about Qt 5.6, but if you look at the release schedule there is not much time for the feature freeze

https://wiki.qt.io/Qt-5.6-release

One of the items the Windows / WinRT team would really like to see included to that release is support for Bluetooth and BTLE.

The current idea is to use the WinRT API for that backend, as it provides the advantage that it can also be used on Windows Desktop starting Windows 8(.1). WinRT covers Windows 10 support (both classic and Unified Windows Platform) as well.

This leaves out support for Windows Desktop older than Windows 8. But as we are aiming to implement new features, we should draw the line somewhere and the WinRT backend clearly has the biggest potential to be supported in many years' time, while the (or multiple) pure desktop solution would be deprecated sooner or later again. Also given the fact that we can target quite many platforms with one backend gives us a better coverage for maintenance and resourcing.

The reason that I am mentioning this on the mailing list is that after talking to some folks here in The Qt Company, multiple people inside and outside already started or wanted to start efforts on this topic. Hence the aim of this email is to get everyone connected and work on it together to make it happen within the 5.6 feature freeze.

So, if you have worked on Bluetooth (LE) on Windows or want to, please get in touch with me to align.


BR,
Maurice


--------
Maurice Kalinowski - Senior Manager, Qt Tools

The Qt Company GmbH, Rudower Chaussee 13, D-12489 Berlin
Gesch?ftsf?hrer: Mika P?lsi, Juha Varelius, Tuula Haataja Sitz der Gesellschaft:
Berlin, Registergericht: Amtsgericht Charlottenburg, HRB 144331 B

Email: maurice.kalinowski at theqtcompany.com | Mobile: + 49 175 187 19 52 | Phone:
+49 30 63 92 3255 www.qt.io |Qt Blog: http://blog.qt.digia.com/ | Twitter:
@QtbyDigia, @Qtproject | Facebook: www.facebook.com/qt



From andre at familiesomers.nl  Tue Jun 16 15:33:00 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Tue, 16 Jun 2015 15:33:00 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506161541.23510.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>	<201506161225.09412.marc.mutz@kdab.com>	<557FEEEC.7010403@theqtcompany.com>
	<201506161541.23510.marc.mutz@kdab.com>
Message-ID: <5580258C.50106@familiesomers.nl>

Marc Mutz schreef op 16-6-2015 om 15:41:
> On Tuesday 16 June 2015 11:39:56 Ulf Hermann wrote:
>>> Note that in a world of auto variables, class names are no longer _that_
>>> important. Functions are important, they are still visible. But other
>>> than at initial creation, class names fade to be background.
>>>
>>> And now you tell me how using lots of auto is bad for readability,
>>> because you never know what type the variable has, to which I will
>>> reply that in Python, Perl, PHP, JavaScript and others, there's no
>>> way to spell the type of a variable, and people write very large
>>> projects in these languages and never look back.
>> Uh, no, you either don't write large projects in PHP (or Perl), or you do
>> look back with *fond* memories. At least that's my experience. And the
>> insane type system of PHP definitely has something to do with this. So, I
>> do like to make it clear what types I'm using (except for specific
>> situations like iterators in loops) and namespaces can definitely help
>> here. I understand we're not exposing them in public API today, but that
>> doesn't mean they're useless.
> Don't confuse the problems of dynamic type systems with not mentioning the
> variable type.
>
> This is the style advocated by the likes of Scott Meyers:
>
>      auto widget = new QWidget(this);
>      auto layout = new QVBoxLayout(widget);
>      auto le = new QLineEdit(widget);
If we go use arguments-by-authority: according to Alexander Stepanov
Scott Meyers is not to be taken seriously :-) Seeing you refered to his
lectures before, I will assume you are familiar with his critisms...
> For type conversions, you're supposed to use static_cast on the rhs:
>
>      auto integer = static_cast<int>(someLongLong);
Sorry, but that just looks silly to me. Why obfusticate the type of the
variable - making it harder to reason about the code - when it yields
you nothing at all? If we're talking about something like an iterator,
by all means use auto, but for the case above, I don't find a good
reason to do this.
> All this is still statically typed, and at some point QtC will show you the
> type of the variable when you hover, if it doesn't already.
It is great that creator can/will be able to do this and it certainly
helps, but that doesn't mean it is good practice to rely on it if not
needed. It is nice to be able reason about a piece of code from any
editor, or when printed on a sheet of paper too...


Anyway, the issue I was refering to is not too related to the use of
auto IMHO. I was wondering what the impact was of this (from your
earlier example):

auto transform = new QTransform();

Which transform would that be? Is this code about QtGui::QTransform or
Qt3D::QTransform? You will need more context to tell, possibly up to the
top of the file somewhere to find a using clause. The question I posted
was if this would be a problem in practice or not, especially when
posting a snippet using these classes somewhere or trying to find
documentation on the class. Perhaps the answer is "No, no problem", but
it is still as aspect to think about.

Andr?


From qt at csipa.in.rs  Tue Jun 16 15:35:24 2015
From: qt at csipa.in.rs (Attila Csipa)
Date: Tue, 16 Jun 2015 14:35:24 +0100
Subject: [Development] Bluetooth support for Windows (RT/10) in Qt 5.6
In-Reply-To: <VI1PR02MB110492B7B1D315BE4B6878E0ECA70@VI1PR02MB1104.eurprd02.prod.outlook.com>
References: <VI1PR02MB110492B7B1D315BE4B6878E0ECA70@VI1PR02MB1104.eurprd02.prod.outlook.com>
Message-ID: <5580261C.3040406@csipa.in.rs>

Hi,

A huge +1 on this, BT support on Windows is long overdue.

While there is certainly more inertia in the windows desktop version
than probably any other Qt supported platform, Microsoft itself is
trying to nudge people into quicker upgrade cycles, and while Win8 has
certainly gotten a pushback, with Win10 around the corner I would also
try not to get bogged down with pre-WinRT solutions, as painful as that
might sound in some cases.

Best regards,
Attila

On 6/16/2015 1:42 PM, Kalinowski Maurice wrote:
> Hi everyone,
>
> It might sound weird that while we're trying to get 5.5.0 out I am starting a discussion about Qt 5.6, but if you look at the release schedule there is not much time for the feature freeze
>
> https://wiki.qt.io/Qt-5.6-release
>
> One of the items the Windows / WinRT team would really like to see included to that release is support for Bluetooth and BTLE.
>
> The current idea is to use the WinRT API for that backend, as it provides the advantage that it can also be used on Windows Desktop starting Windows 8(.1). WinRT covers Windows 10 support (both classic and Unified Windows Platform) as well.
>
> This leaves out support for Windows Desktop older than Windows 8. But as we are aiming to implement new features, we should draw the line somewhere and the WinRT backend clearly has the biggest potential to be supported in many years' time, while the (or multiple) pure desktop solution would be deprecated sooner or later again. Also given the fact that we can target quite many platforms with one backend gives us a better coverage for maintenance and resourcing.
>
> The reason that I am mentioning this on the mailing list is that after talking to some folks here in The Qt Company, multiple people inside and outside already started or wanted to start efforts on this topic. Hence the aim of this email is to get everyone connected and work on it together to make it happen within the 5.6 feature freeze.
>
> So, if you have worked on Bluetooth (LE) on Windows or want to, please get in touch with me to align.
>
>
> BR,
> Maurice
>
>
> --------
> Maurice Kalinowski - Senior Manager, Qt Tools
>
> The Qt Company GmbH, Rudower Chaussee 13, D-12489 Berlin
> Gesch?ftsf?hrer: Mika P?lsi, Juha Varelius, Tuula Haataja Sitz der Gesellschaft:
> Berlin, Registergericht: Amtsgericht Charlottenburg, HRB 144331 B
>
> Email: maurice.kalinowski at theqtcompany.com | Mobile: + 49 175 187 19 52 | Phone:
> +49 30 63 92 3255 www.qt.io |Qt Blog: http://blog.qt.digia.com/ | Twitter:
> @QtbyDigia, @Qtproject | Facebook: www.facebook.com/qt
>
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development


From sean.harmer at kdab.com  Tue Jun 16 15:58:21 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Tue, 16 Jun 2015 14:58:21 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <5580258C.50106@familiesomers.nl>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506161541.23510.marc.mutz@kdab.com>
	<5580258C.50106@familiesomers.nl>
Message-ID: <2338208.zvlGssLy46@cartman>

On Tuesday 16 Jun 2015 15:33:00 Andr? Somers wrote:
> Marc Mutz schreef op 16-6-2015 om 15:41:
> > On Tuesday 16 June 2015 11:39:56 Ulf Hermann wrote:
> >>> Note that in a world of auto variables, class names are no longer _that_
> >>> important. Functions are important, they are still visible. But other
> >>> than at initial creation, class names fade to be background.
> >>>
> >>> And now you tell me how using lots of auto is bad for readability,
> >>> because you never know what type the variable has, to which I will
> >>> reply that in Python, Perl, PHP, JavaScript and others, there's no
> >>> way to spell the type of a variable, and people write very large
> >>> projects in these languages and never look back.
> >>
> >> Uh, no, you either don't write large projects in PHP (or Perl), or you do
> >> look back with *fond* memories. At least that's my experience. And the
> >> insane type system of PHP definitely has something to do with this. So, I
> >> do like to make it clear what types I'm using (except for specific
> >> situations like iterators in loops) and namespaces can definitely help
> >> here. I understand we're not exposing them in public API today, but that
> >> doesn't mean they're useless.
> >
> > Don't confuse the problems of dynamic type systems with not mentioning the
> > variable type.
> >
> > This is the style advocated by the likes of Scott Meyers:
> >      auto widget = new QWidget(this);
> >      auto layout = new QVBoxLayout(widget);
> >      auto le = new QLineEdit(widget);
>
> If we go use arguments-by-authority: according to Alexander Stepanov
> Scott Meyers is not to be taken seriously :-) Seeing you refered to his
> lectures before, I will assume you are familiar with his critisms...
>
> > For type conversions, you're supposed to use static_cast on the rhs:
> >      auto integer = static_cast<int>(someLongLong);
>
> Sorry, but that just looks silly to me. Why obfusticate the type of the
> variable - making it harder to reason about the code - when it yields
> you nothing at all? If we're talking about something like an iterator,
> by all means use auto, but for the case above, I don't find a good
> reason to do this.
>
> > All this is still statically typed, and at some point QtC will show you
> > the
> > type of the variable when you hover, if it doesn't already.
>
> It is great that creator can/will be able to do this and it certainly
> helps, but that doesn't mean it is good practice to rely on it if not
> needed. It is nice to be able reason about a piece of code from any
> editor, or when printed on a sheet of paper too...
>
>
> Anyway, the issue I was refering to is not too related to the use of
> auto IMHO. I was wondering what the impact was of this (from your
> earlier example):
>
> auto transform = new QTransform();
>
> Which transform would that be? Is this code about QtGui::QTransform or
> Qt3D::QTransform? You will need more context to tell, possibly up to the
> top of the file somewhere to find a using clause. The question I posted
> was if this would be a problem in practice or not, especially when
> posting a snippet using these classes somewhere or trying to find
> documentation on the class. Perhaps the answer is "No, no problem", but
> it is still as aspect to think about.

That would be clear from the context imho. Reasoning about code does not
usually happen in isolation to the extent of single line snippets.

There is a good probability that in a TU using Qt3D::QTransform that you will
be dealing with 3D content and aggregating the transform into a QEntity. If
you are using QTransform you are almost certainly concerned with purely 2D
painting operations we're all familiar with

Therefore the context would give a very strong indication to the reader about
disambiguation and if you do happen to have a corner case where you're using
both QTransform and Qt3D::QTransform in the same TU either provide more
context to the snippet or don't use a using namespace directive and be
explicit.

Cheers,

Sean
--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
KDAB (UK) Ltd, a KDAB Group company
Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
Mobile: +44 (0)7545 140604
KDAB - Qt Experts

From mw_triad at users.sourceforge.net  Tue Jun 16 16:21:11 2015
From: mw_triad at users.sourceforge.net (Matthew Woehlke)
Date: Tue, 16 Jun 2015 10:21:11 -0400
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506151018.39451.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>	<201506111149.23890.marc.mutz@kdab.com>	<2401532.Dad0NEj85K@simon-sx58>
	<201506151018.39451.marc.mutz@kdab.com>
Message-ID: <mlpbcn$c9c$1@ger.gmane.org>

On 2015-06-15 04:18, Marc Mutz wrote:
> On Monday 15 June 2015 08:24:22 Simon Hausmann wrote:
>> A namespace for functions only, no public classes within.
>
> _That_ argument again... :)
>
> Could you explain to me why you think that classes are different from
> functions, pleaae?

With a small number of exceptions, generally (always?) starting with 'q'
(lower case), there aren't global functions in Qt. There are "static
member" functions (including actual static member functions in
particular, but also namespaced functions), instance member functions,
and global class names.

For naming convention purposes, a namespace is in effect equivalent to a
non-constructible class with only static members.

IOW, there is naming symmetry between e.g.:

  QString::fromUtf8

- and -

  QtConcurrent::run

(Well... except for the 'Qt' vs. just 'Q', but...)

However, there is no e.g. 'QtCore::QThread' which would lead to e.g.
'QtCore::QThread::msleep'.

> There's simply no difference between a class in a namespace and a free
> function in a namespace

The difference is explained above: with a few exceptions, functions in
Qt public API are (were) qualified by exactly one scope (...until
classes in namespaces started appearing).

--
Matthew


From mw_triad at users.sourceforge.net  Tue Jun 16 16:27:15 2015
From: mw_triad at users.sourceforge.net (Matthew Woehlke)
Date: Tue, 16 Jun 2015 10:27:15 -0400
Subject: [Development] Some Qt3D feedback
In-Reply-To: <5580258C.50106@familiesomers.nl>
References: <ml2j2r$eg3$1@ger.gmane.org>	<201506161225.09412.marc.mutz@kdab.com>	<557FEEEC.7010403@theqtcompany.com>	<201506161541.23510.marc.mutz@kdab.com>
	<5580258C.50106@familiesomers.nl>
Message-ID: <mlpbo4$muf$1@ger.gmane.org>

On 2015-06-16 09:33, Andr? Somers wrote:
> Marc Mutz schreef op 16-6-2015 om 15:41:
>> For type conversions, you're supposed to use static_cast on the rhs:
>>
>>      auto integer = static_cast<int>(someLongLong);
>
> Sorry, but that just looks silly to me. Why obfusticate the type of the
> variable - making it harder to reason about the code - when it yields
> you nothing at all?

Ignoring whether or not to use 'auto', there actually *is* a reason to
use the static_cast... it communicates that, yes, you really want back
an 'int', even if that means a conversion loss e.g. because your input
is a 'double'. (See e.g. '-Wconversion'.)

--
Matthew


From mitya57.ml at gmail.com  Tue Jun 16 16:32:54 2015
From: mitya57.ml at gmail.com (Dmitry Shachnev)
Date: Tue, 16 Jun 2015 17:32:54 +0300
Subject: [Development] Question about GTK+ support status
Message-ID: <20150616143254.20995.57633@mitya57.me>

Hi all,

In Debian, we have recently removed the gtk2 platform theme from default
Qt 5 installation [1], and now I start getting reports about missing icons
in my Qt 5 application on Debian (currently Qt 5 supports themed icons
only on KDE and when using the gtk2 platform theme).

>From the discussion it seemed that we can keep the platform theme around,
but only if it is ported from GTK+ 2 to GTK+ 3. That task itself is not
hard, but then this theme will become incompatible with QGtkStyle, which
is using theming engine specific to GTK+ 2, and GTK+ 3 port does not seem
possible.

Looking at QGtkStyle, it not only relies on a deprecated library, but
doesn't play well with default GNOME theme (Adwaita). Also, the theme
authors usually do not care about GTK+ 2 anymore, and focus their efforts
on a CSS theme for GTK+ 3. Also, Adwaita theme is now available in a native
Qt 5 variant [2], i.e. Fedora ships it.

So my question is: can we drop the QGtkStyle completely and port the gtk
platform theme to GTK+ 3? I will contribute to that effort if it gets the
consensus.

[1]: https://bugs.debian.org/781148
[2]: https://github.com/MartinBriza/adwaita-qt

--
Dmitry Shachnev
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
Url : http://lists.qt-project.org/pipermail/development/attachments/20150616/9437485d/attachment.bin

From mw_triad at users.sourceforge.net  Tue Jun 16 16:52:16 2015
From: mw_triad at users.sourceforge.net (Matthew Woehlke)
Date: Tue, 16 Jun 2015 10:52:16 -0400
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <2996357.aFxrkyR603@tjmaciei-mobl4>
References: <557A7773.3050903@familiesomers.nl>	<201506121017.21905.marc.mutz@kdab.com>	<mleri3$rlt$1@ger.gmane.org>
	<2996357.aFxrkyR603@tjmaciei-mobl4>
Message-ID: <mlpd70$cti$1@ger.gmane.org>

On 2015-06-12 17:45, Thiago Macieira wrote:
> On Friday 12 June 2015 10:49:38 Matthew Woehlke wrote:
>>> On Friday 12 June 2015 08:08:51 Andr? Somers wrote:
>>>> Not available for use are:
>>>> * = default,
>>>> * = deleted,
>>
>> Where are these not supported? I have code that (AFAIK) has been using
>> these already, and IIRC our compiler requirements are lower.
>
> GCC requires 4.7 for this. I think we were discussing whether our minimum is
> 4.6 or 4.7.

Again... really? I have code using '= default' that sometimes? is built
on GCC *4.4*. '= delete' seems to be accepted also. (Now... it may be
that '= default' is actually broken, i.e. generates bad code, but based
on a very simple test I just whipped up, '= delete' at least seems to
work. This is with gcc44-c++-4.4.7-1.el5.)

(? Well... it's 'intended to work on GCC 4.4' and does occasionally get
tested, but maybe not often or - as far as verifying that it actually
runs correctly - well.)

Did it get broken by 4.6 or something like that?

>> Besides being inline (template, dontcha know), isn't there an option to
>> disable those? (Maybe not std::exception one, but at least the Qt <->
>> STL container conversions?)
>
> QT_NO_STL isn't supported since 5.0.

Ah... don't use it, hadn't paid attention or noticed :-).

--
Matthew


From jpnurmi at theqtcompany.com  Tue Jun 16 19:44:06 2015
From: jpnurmi at theqtcompany.com (Nurmi J-P)
Date: Tue, 16 Jun 2015 17:44:06 +0000
Subject: [Development] Question about GTK+ support status
In-Reply-To: <20150616143254.20995.57633@mitya57.me>
References: <20150616143254.20995.57633@mitya57.me>
Message-ID: <E9B9CC1F-AE95-4A5C-9146-84A222140C94@theqtcompany.com>


> On 16 Jun 2015, at 16:32, Dmitry Shachnev <mitya57.ml at gmail.com> wrote:
>
> Hi all,
>
> In Debian, we have recently removed the gtk2 platform theme from default
> Qt 5 installation [1], and now I start getting reports about missing icons
> in my Qt 5 application on Debian (currently Qt 5 supports themed icons
> only on KDE and when using the gtk2 platform theme).
>
>> From the discussion it seemed that we can keep the platform theme around,
> but only if it is ported from GTK+ 2 to GTK+ 3. That task itself is not
> hard, but then this theme will become incompatible with QGtkStyle, which
> is using theming engine specific to GTK+ 2, and GTK+ 3 port does not seem
> possible.
>
> Looking at QGtkStyle, it not only relies on a deprecated library, but
> doesn't play well with default GNOME theme (Adwaita). Also, the theme
> authors usually do not care about GTK+ 2 anymore, and focus their efforts
> on a CSS theme for GTK+ 3. Also, Adwaita theme is now available in a native
> Qt 5 variant [2], i.e. Fedora ships it.
>
> So my question is: can we drop the QGtkStyle completely and port the gtk
> platform theme to GTK+ 3? I will contribute to that effort if it gets the
> consensus.
>
> [1]: https://bugs.debian.org/781148
> [2]: https://github.com/MartinBriza/adwaita-qt

Hi,

Given that QGtkStyle is no longer part of the public API in Qt 5, how about making it a QStylePlugin and moving it out of QtWidgets? If someone implements a style plugin for GTK+ 3, then it also becomes feasible to have platform theme plugins for both GTK+ 2 and 3. As you mentioned, a platform theme is the easy part. Implementing a QStyle for GTK+ 3.x is a lot more work.

configure: add support for GTK+ 3.x - https://codereview.qt-project.org/#/c/75599/
QGtk3ThemePlugin - https://codereview.qt-project.org/#/c/75757/

--
J-P Nurmi


From 416365416c at gmail.com  Tue Jun 16 20:23:21 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Tue, 16 Jun 2015 11:23:21 -0700
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <CALW8pfUpoEnS19xF4gbfp7zbq2zum=vPxo54nqKXfqmg1pwf9g@mail.gmail.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<13279726.762LyY3m5A@tjmaciei-mobl4>
	<20150610151406.5693520.88469.26350@theqtcompany.com>
	<CALX7-s4=XfgUanzsXrZzDuMDGafvCYCrmBnnFY4PJ+RFkm73sw@mail.gmail.com>
	<AM3PR02MB094638010CFFC93FE5E02D6AF5BC0@AM3PR02MB0946.eurprd02.prod.outlook.com>
	<CALX7-s5iAf-sERD2SpfjR6NDDWQkpM4sodZ010B08cj-fj_L7A@mail.gmail.com>
	<0D016EBD-699A-41D7-A06E-0BF654D281CA@gmail.com>
	<CALW8pfUpoEnS19xF4gbfp7zbq2zum=vPxo54nqKXfqmg1pwf9g@mail.gmail.com>
Message-ID: <CALX7-s7aP_K9MyRoOLqKpbe4yxfPWnoZF=BFg0TSTga-XV7TGQ@mail.gmail.com>

On Tue, Jun 16, 2015 at 4:50 AM, Sze Howe Koh <szehowe.koh at gmail.com> wrote:
>
> On 16 June 2015 at 19:28, Kurt Pattyn <pattyn.kurt at gmail.com> wrote:
> > Well,
> >
> > you can also think of ?on? + <event>, like in: onWindowClosed, onMouseClicked, onBytesReceived, ?
> > In the same analogy, you could have onErrorOccurred.
> >
> > Seems very intuitive to me.
> >
> > It depends if you want to react to a state or to the event causing that state.
>
> The QML spec says "on" + <signal>, not <state>:
> http://doc.qt.io/qt-5/qtqml-syntax-signals.html#receiving-signals-with-signal-handlers
>
> You can call connect() on the thing after "on":
> http://doc.qt.io/qt-5/qtqml-syntax-signals.html#connecting-signals-to-methods-and-signals
>
> The thing after "on" is also exposed to C++ as a signal; it can be
> passed to QObject::connect() in the SIGNAL() macro.
>
> So, we need to use signal names (which are past tense verbs).

Yes, these are the same things as the signal names. We don't want to
implement some magical difference for QML which doesn't yet exist.

So if we're migrating (slowly) to errorOccurred() as the standard
signal name (which I still think is more trouble than it's worth) then
classes exposed to QML will migrate (slowly) to onErrorOccurred, and
that's fine. It would be an additional layer of confusion and
implementation to make QML diverge in order to still have onError in
Qt 6.

--
Alan Alpert

From robin+qt at viroteck.net  Tue Jun 16 21:50:29 2015
From: robin+qt at viroteck.net (Robin Burchell)
Date: Tue, 16 Jun 2015 21:50:29 +0200
Subject: [Development] QtCS: Discussion about deprecating things
Message-ID: <1434484229.1963396.297303593.713E9883@webmail.messagingengine.com>

Notes I took on the deprecation session follow. If I missed anything, or
misrepresented it in the notes, please chime in -- I was pretty tired
when I was writing this :)

(P.S. Did someone take notes on the QtQuick Performance discussion?)

======

Introduction
* Qt 5 is now a few years old, a lot of things have happened
* There?s always a limitation of resources, makes sense to focus on the
important, future-looking things

Compilers
* C++ standard evolving is one additional motivation for change, meaning
old compilers need to go (VS 2008, GCC 4.4)

Platforms
* Additionally, natural evolution of operating systems means that
supporting older operating systems becomes an increasing burden (OS X,
for instance, WEC 7, QNX 6.5)
* Deprecation is hard: lots of use of ?old"RHEL 6 still going on. At the
same time, why is there a desire to use the newest Qt on these ?old?
platforms?
* Qt 5.6 will deprecate: QNX 6.5 (QNX 6.6 OK)
* Qt 5.6 will deprecate WEC 7, 2013 only.
* Qt 5.6: Vista is on life support - patches welcome, it won?t be tested
* Qt 5.6: OS X 10.8+ (previous 4 releases)
* Qt 5.6: RHEL 6.6 with devpack
* Android 2.3 support for 5.6 / ?Qt LTS"
    * Developer devices are dying
    * Market share is dropping
    * Maybe not, discuss it more?

Modules
* Modules that are now undermaintained needs to have something done to
them (QtWebKit, QtScript, QtQuick)
    * Printing support lacking from QQ2
    * Non-OpenGL hardware needing QQ1
* For modules that are no longer to be developed (?deprecated?):
    * Remove them from the binary packages
    * Keep individuals source tarballs, but not qt-everywhere tarball
    * No guarentees given; patches welcome, bug reports may or may not
    be handled.
* QtScript may be kept a bit longer, QtWebkit and QtQuick1 may be
deprecated sooner.

From dangelog at gmail.com  Tue Jun 16 21:57:53 2015
From: dangelog at gmail.com (Giuseppe D'Angelo)
Date: Tue, 16 Jun 2015 21:57:53 +0200
Subject: [Development] QtCS: Discussion about deprecating things
In-Reply-To: <1434484229.1963396.297303593.713E9883@webmail.messagingengine.com>
References: <1434484229.1963396.297303593.713E9883@webmail.messagingengine.com>
Message-ID: <CAPm+cvjwPSq9i7hN_Wyw4YRbxh4=RXKXv7ZD_abzkeb1PkNnVA@mail.gmail.com>

On Tue, Jun 16, 2015 at 9:50 PM, Robin Burchell <robin+qt at viroteck.net> wrote:
> * Deprecation is hard: lots of use of ?old"RHEL 6 still going on. At the
> same time, why is there a desire to use the newest Qt on these ?old?
> platforms?

Because these platforms constitute big "standards" for development of
a complex system, in which a Qt GUI is just a piece in the puzzle. At
the same time, people would like to get all the latest benefits and
features of a product which is still evolving at a rapid pace (2
releases per year).

> * Qt 5.6 will deprecate: QNX 6.5 (QNX 6.6 OK)
> * Qt 5.6 will deprecate WEC 7, 2013 only.

Deprecate or drop them? From the C++11 thread I understood they will
be completely dropped due to lack of compilers.

> * Android 2.3 support for 5.6 / ?Qt LTS"

What's "LTS" here?

Thanks,
--
Giuseppe D'Angelo

From thiago.macieira at intel.com  Tue Jun 16 22:31:51 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 13:31:51 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <557A7773.3050903@familiesomers.nl>
References: <557A7773.3050903@familiesomers.nl>
Message-ID: <1610485.DRlUVlzX5v@tjmaciei-mobl4>

On Friday 12 June 2015 08:08:51 Andr? Somers wrote:
> Available for use then:
> * Auto
> * decltype
> * nullptr
> * r-value ref
> * lambda
> * class enum
> * explicit overrides
>
> Not available for use are:
> * uniform initialization and constexpr (is broken in VS2013.)
> * Explicit conversions,
> * = default,
> * = deleted,
> * inheriting constructors,
> * noexcept

Update:

range fors are available for use, but never in public headers and only if it
compiles. MSVC 2012 and 2013 have a parsing bug with them, so you need to
compile your code with one of those two versions if you're introducing new
range fors.

Please don't use the CI for the test. Compile with MSVC first and only submit
your code if it compiled.

If you don't have access to MSVC, either get someone to test for you or don't
submit.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Tue Jun 16 22:35:55 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 13:35:55 -0700
Subject: [Development] Some Qt3D feedback
In-Reply-To: <mlpbo4$muf$1@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org> <5580258C.50106@familiesomers.nl>
	<mlpbo4$muf$1@ger.gmane.org>
Message-ID: <2334816.P8danJ8VDL@tjmaciei-mobl4>

On Tuesday 16 June 2015 10:27:15 Matthew Woehlke wrote:
> Ignoring whether or not to use 'auto', there actually *is* a reason to
> use the static_cast... it communicates that, yes, you really want back
> an 'int', even if that means a conversion loss e.g. because your input
> is a 'double'. (See e.g. '-Wconversion'.)

For PODs, please use function-style casts.

	auto i = int(longValue);

Of course, you had to type an extra keystroke compared to

	int i = int(longValue);

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Tue Jun 16 22:39:36 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 13:39:36 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <mlpd70$cti$1@ger.gmane.org>
References: <557A7773.3050903@familiesomers.nl>
	<2996357.aFxrkyR603@tjmaciei-mobl4> <mlpd70$cti$1@ger.gmane.org>
Message-ID: <2229781.dtSo8pvZ1k@tjmaciei-mobl4>

On Tuesday 16 June 2015 10:52:16 Matthew Woehlke wrote:
> On 2015-06-12 17:45, Thiago Macieira wrote:
> > On Friday 12 June 2015 10:49:38 Matthew Woehlke wrote:
> >>> On Friday 12 June 2015 08:08:51 Andr? Somers wrote:
> >>>> Not available for use are:
> >>>> * = default,
> >>>> * = deleted,
> >>
> >> Where are these not supported? I have code that (AFAIK) has been using
> >> these already, and IIRC our compiler requirements are lower.
> >
> > GCC requires 4.7 for this. I think we were discussing whether our minimum
> > is 4.6 or 4.7.
>
> Again... really? I have code using '= default' that sometimes? is built
> on GCC *4.4*. '= delete' seems to be accepted also. (Now... it may be
> that '= default' is actually broken, i.e. generates bad code, but based
> on a very simple test I just whipped up, '= delete' at least seems to
> work. This is with gcc44-c++-4.4.7-1.el5.)

Yes, really.

People, please read qcompilerdetection.h and its Git history for the
rationale.

#    if Q_CC_GNU >= 406
       /* Pre-4.6 compilers implement a non-final snapshot of N2346, hence
default and delete
        * functions are supported only if they are public. Starting from 4.6,
GCC handles
        * final version - the access modifier is not relevant. */
#      define Q_COMPILER_DEFAULT_MEMBERS
#      define Q_COMPILER_DELETE_MEMBERS

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Tue Jun 16 22:40:32 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 13:40:32 -0700
Subject: [Development] Fwd: (QTBUG-46655) qt5base: font license files
	missing
In-Reply-To: <9197441.g5mRXBqj82@dragaera>
References: <11035771.b9HOrmF5uL@tjmaciei-mobl4> <9197441.g5mRXBqj82@dragaera>
Message-ID: <15765912.XTkCj5kvKz@tjmaciei-mobl4>

On Tuesday 16 June 2015 12:28:51 Paul Olav Tvete wrote:
> There is still code in Qt that reads and adds QPF files if they are
> installed,  but I do not believe this is commonly used. In any case,  if
> someone needs QPF fonts they can get them from other sources than the Qt
> packages.  It sounds like a good idea to remove the font files from qtbase.

One vote for removing then. The files will get removed by EOW unless someone
has a very good reason not to.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Tue Jun 16 22:43:16 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 13:43:16 -0700
Subject: [Development] Question about GTK+ support status
In-Reply-To: <E9B9CC1F-AE95-4A5C-9146-84A222140C94@theqtcompany.com>
References: <20150616143254.20995.57633@mitya57.me>
	<E9B9CC1F-AE95-4A5C-9146-84A222140C94@theqtcompany.com>
Message-ID: <1538170.igoqjdHCxu@tjmaciei-mobl4>

On Tuesday 16 June 2015 17:44:06 Nurmi J-P wrote:
> Given that QGtkStyle is no longer part of the public API in Qt 5, how about
> making it a QStylePlugin and moving it out of QtWidgets?

Sounds like a good idea.

Meanwhile, Debian and the other distros can compile with -no-gtkstyle.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Tue Jun 16 22:46:08 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 13:46:08 -0700
Subject: [Development] QtCS: Discussion about deprecating things
In-Reply-To: <1434484229.1963396.297303593.713E9883@webmail.messagingengine.com>
References: <1434484229.1963396.297303593.713E9883@webmail.messagingengine.com>
Message-ID: <8061235.qduEV6bpZH@tjmaciei-mobl4>

On Tuesday 16 June 2015 21:50:29 Robin Burchell wrote:
> * Qt 5.6 will deprecate: QNX 6.5 (QNX 6.6 OK)
> * Qt 5.6 will deprecate WEC 7, 2013 only.
> * Qt 5.6: Vista is on life support - patches welcome, it won?t be tested
> * Qt 5.6: OS X 10.8+ (previous 4 releases)
> * Qt 5.6: RHEL 6.6 with devpack

Please see the 5.5 changelog for accuracy:

http://code.qt.io/cgit/qt/qtbase.git/tree/dist/changes-5.5.0?h=5.5.0#n18

Since 5.5.0-rc1 will be out this week, please review ASAP.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Tue Jun 16 22:48:07 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 13:48:07 -0700
Subject: [Development] QtCS: Discussion about deprecating things
In-Reply-To: <CAPm+cvjwPSq9i7hN_Wyw4YRbxh4=RXKXv7ZD_abzkeb1PkNnVA@mail.gmail.com>
References: <1434484229.1963396.297303593.713E9883@webmail.messagingengine.com>
	<CAPm+cvjwPSq9i7hN_Wyw4YRbxh4=RXKXv7ZD_abzkeb1PkNnVA@mail.gmail.com>
Message-ID: <27068122.UQIZkC17Ns@tjmaciei-mobl4>

On Tuesday 16 June 2015 21:57:53 Giuseppe D'Angelo wrote:
> > * Qt 5.6 will deprecate: QNX 6.5 (QNX 6.6 OK)
> > * Qt 5.6 will deprecate WEC 7, 2013 only.
>
> Deprecate or drop them? From the C++11 thread I understood they will
> be completely dropped due to lack of compilers.

The changelog says "may be removed or stop compiling". I think that we'll
simply stop maintaining them and let them bitrot.

> > * Android 2.3 support for 5.6 / ?Qt LTS"
>
> What's "LTS" here?

Long Term Support, subject of another session, whose note taker has not sent
the details to the list. Oh wait, that would be me!
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From Eike.Ziller at theqtcompany.com  Tue Jun 16 22:49:46 2015
From: Eike.Ziller at theqtcompany.com (Ziller Eike)
Date: Tue, 16 Jun 2015 20:49:46 +0000
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <mlpd70$cti$1@ger.gmane.org>
References: <557A7773.3050903@familiesomers.nl>
	<201506121017.21905.marc.mutz@kdab.com> <mleri3$rlt$1@ger.gmane.org>
	<2996357.aFxrkyR603@tjmaciei-mobl4> <mlpd70$cti$1@ger.gmane.org>
Message-ID: <22A9AF57-ED3C-4AE9-A8CE-6A7378F659F0@digia.com>


> On Jun 16, 2015, at 16:52, Matthew Woehlke <mw_triad at users.sourceforge.net> wrote:
>
> On 2015-06-12 17:45, Thiago Macieira wrote:
>> On Friday 12 June 2015 10:49:38 Matthew Woehlke wrote:
>>>> On Friday 12 June 2015 08:08:51 Andr? Somers wrote:
>>>>> Not available for use are:
>>>>> * = default,
>>>>> * = deleted,
>>>
>>> Where are these not supported? I have code that (AFAIK) has been using
>>> these already, and IIRC our compiler requirements are lower.
>>
>> GCC requires 4.7 for this. I think we were discussing whether our minimum is
>> 4.6 or 4.7.
>
> Again... really? I have code using '= default' that sometimes? is built
> on GCC *4.4*. '= delete' seems to be accepted also. (Now... it may be
> that '= default' is actually broken, i.e. generates bad code, but based
> on a very simple test I just whipped up, '= delete' at least seems to
> work. This is with gcc44-c++-4.4.7-1.el5.)
>
> (? Well... it's 'intended to work on GCC 4.4' and does occasionally get
> tested, but maybe not often or - as far as verifying that it actually
> runs correctly - well.)
>
> Did it get broken by 4.6 or something like that?

Actually this is not supported in VS2012
https://msdn.microsoft.com/en-us/library/hh567368.aspx

And Thiago?s link actually lists it under VS2013 as well :)

http://code.woboq.org/qt5/qtbase/src/corelib/global/qcompilerdetection.h.html#851

>>> Besides being inline (template, dontcha know), isn't there an option to
>>> disable those? (Maybe not std::exception one, but at least the Qt <->
>>> STL container conversions?)
>>
>> QT_NO_STL isn't supported since 5.0.
>
> Ah... don't use it, hadn't paid attention or noticed :-).
>
> --
> Matthew
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

--
Eike Ziller, Senior Software Engineer | The Qt Company
Digia Germany GmbH, Rudower Chaussee 13, D-12489 Berlin
Gesch?ftsf?hrer: Mika P?lsi, Juha Varelius, Tuula Haataja
Sitz der Gesellschaft: Berlin, Registergericht: Amtsgericht Charlottenburg, HRB 144331 B


From thiago.macieira at intel.com  Tue Jun 16 22:49:54 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 13:49:54 -0700
Subject: [Development] QtCS: Long Term Release discussion
Message-ID: <2505786.e0shnu4VyY@tjmaciei-mobl4>

Last year's notes[1]

Qt 5.5 will be the last release to support:
     *  GCC 4.6
     *  OS X 10.7
     *  Windows Vista
     *  WIndows Embedded Compact 7
     *  QNX 6.5
     *  Qt WebKit, Qt Script, Qt Quick 1

Therefore, we'd like to have a long-term support release that allows people
who cannot upgrade to remain for some longer time in an official release.
Additionally, we'd like to sync up with Ubuntu's LTS releases (next is 16.04)
- other distros are mostly focused on servers (RHEL, SLES) or don't actively
depend on Qt anyway.

Qt 5.5 would be ideal - but we'd need to support the old Qt CI system for
longer. So we're targetting that *Qt 5.6* will be the first LTS release.

Other notes:
     *  We will keep a Linux builder building 32-bit to make sure everything
works - *no binary packages for Linux 32-bit*
     *  We do not build for OS X 32-bit, but we'll accept packages
     *  We do need to introduce a static builder to ensure things work. We
need to document that static requires more complexity to make a working
application and it's only tested with qmake.

--------
[1] https://wiki.qt.io/Qt-contributors-summit-2014-Long_term_releases
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4447 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150616/937fb10f/attachment.bin

From thiago.macieira at intel.com  Tue Jun 16 23:06:10 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 14:06:10 -0700
Subject: [Development] Some Qt3D feedback
In-Reply-To: <2334816.P8danJ8VDL@tjmaciei-mobl4>
References: <ml2j2r$eg3$1@ger.gmane.org> <mlpbo4$muf$1@ger.gmane.org>
	<2334816.P8danJ8VDL@tjmaciei-mobl4>
Message-ID: <1653052.WWfq0aZYWf@tjmaciei-mobl4>

On Tuesday 16 June 2015 13:35:55 Thiago Macieira wrote:
> On Tuesday 16 June 2015 10:27:15 Matthew Woehlke wrote:
> > Ignoring whether or not to use 'auto', there actually *is* a reason to
> > use the static_cast... it communicates that, yes, you really want back
> > an 'int', even if that means a conversion loss e.g. because your input
> > is a 'double'. (See e.g. '-Wconversion'.)
>
> For PODs, please use function-style casts.
>
> 	auto i = int(longValue);
>
> Of course, you had to type an extra keystroke compared to
>
> 	int i = int(longValue);

Actually, not for all PODs. Just the integrals and bool. You obviously cannot
convert a pointer via function-style casting.

And for bool, if you want to save on keystrokes, you can use the double-bang
operator:

	auto x = !!longValue;

which is two keystrokes and considerably more obfuscated than

	bool x = longValue;
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From steveire at gmail.com  Tue Jun 16 23:19:18 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Tue, 16 Jun 2015 23:19:18 +0200
Subject: [Development] Some Qt3D feedback
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111446.20906.marc.mutz@kdab.com>
	<mlchav$7eg$1@ger.gmane.org> <1637657.fa75jvLXrZ@titan>
	<mlchoc$it1$1@ger.gmane.org>
Message-ID: <mlq3sn$ci9$1@ger.gmane.org>

Stephen Kelly wrote:

>> I said I'm happy to discuss. I'm just waiting for some more opinions,
>> please don't take that as me trying to shut the discussion down. :)
>
> Cool. Let's wait and see.

This thread has gone way off-topic now, but we gathered a week of opinions
and reasons, and I think it's time to put the thread to rest.

Lars, what's your take on these two questions:

1) What should be done for new modules with Qt 5.6+ ?

2) What should be done with Qt3D?

Thanks,

Steve.



From olivier at woboq.com  Tue Jun 16 23:32:28 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Tue, 16 Jun 2015 23:32:28 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <1610485.DRlUVlzX5v@tjmaciei-mobl4>
References: <557A7773.3050903@familiesomers.nl>
	<1610485.DRlUVlzX5v@tjmaciei-mobl4>
Message-ID: <14943938.4ZqCqGsaKF@finn>

On Tuesday 16. June 2015 13:31:51 Thiago Macieira wrote:
> Please don't use the CI for the test. Compile with MSVC first and only
> submit your code if it compiled.
>
> If you don't have access to MSVC, either get someone to test for you or
> don't submit.

Isn't the new CI allowing to easily test changes on many platform?
That would help those with no access to some of the more esoteric platforms.

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org

From thiago.macieira at intel.com  Tue Jun 16 23:43:16 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 14:43:16 -0700
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <14943938.4ZqCqGsaKF@finn>
References: <557A7773.3050903@familiesomers.nl>
	<1610485.DRlUVlzX5v@tjmaciei-mobl4> <14943938.4ZqCqGsaKF@finn>
Message-ID: <1501262.5hKu7usNBk@tjmaciei-mobl4>

On Tuesday 16 June 2015 23:32:28 Olivier Goffart wrote:
> On Tuesday 16. June 2015 13:31:51 Thiago Macieira wrote:
> > Please don't use the CI for the test. Compile with MSVC first and only
> > submit your code if it compiled.
> >
> > If you don't have access to MSVC, either get someone to test for you or
> > don't submit.
>
> Isn't the new CI allowing to easily test changes on many platform?
> That would help those with no access to some of the more esoteric platforms.

I'd qualify that as "get someone to test for you". Just please don't use the
main integration cycle as your check to see if it compiles.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From lorn.potter at gmail.com  Wed Jun 17 03:36:04 2015
From: lorn.potter at gmail.com (Lorn Potter)
Date: Wed, 17 Jun 2015 11:36:04 +1000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <AM2PR02MB0673F9D3D481508156AB9DFAE1A70@AM2PR02MB0673.eurprd02.prod.outlook.com>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>	<2859490.OQFXhj0xX3@tjmaciei-mobl4>	<AM2PR02MB03562FC38F65F91C4A6BE9AEE6B90@AM2PR02MB0356.eurprd02.prod.outlook.com>	<3669476.3pf2O7shbg@finn>
	<AM2PR02MB0673F9D3D481508156AB9DFAE1A70@AM2PR02MB0673.eurprd02.prod.outlook.com>
Message-ID: <5580CF04.1030703@gmail.com>

On 16/06/2015 6:49 pm, Koehne Kai wrote:
>
>
>> -----Original Message-----
>> From: development-bounces+kai.koehne=theqtcompany.com at qt-
>> [...]
>> If you ask my opinion, 'errorOccurred' sounds like a sensible name.
>
> I concur that errorOccurred() is the most sensible choice.
+1




--
Lorn 'ljp' Potter
Software Engineer, llornkcor technologies / Jolla
Qt Sensors / connectivity


From Simon.Hausmann at theqtcompany.com  Wed Jun 17 06:35:03 2015
From: Simon.Hausmann at theqtcompany.com (Hausmann Simon)
Date: Wed, 17 Jun 2015 04:35:03 +0000
Subject: [Development] Fwd: (QTBUG-46655) qt5base: font license
	files	missing
In-Reply-To: <15765912.XTkCj5kvKz@tjmaciei-mobl4>
References: <11035771.b9HOrmF5uL@tjmaciei-mobl4>
	<9197441.g5mRXBqj82@dragaera>,<15765912.XTkCj5kvKz@tjmaciei-mobl4>
Message-ID: <20150617043502.5693520.63249.27108@theqtcompany.com>

Make that two votes :)


Simon

  Original Message
From: Thiago Macieira
Sent: Tuesday, June 16, 2015 22:40
To: development at qt-project.org
Subject: Re: [Development] Fwd: (QTBUG-46655) qt5base: font license files       missing


On Tuesday 16 June 2015 12:28:51 Paul Olav Tvete wrote:
> There is still code in Qt that reads and adds QPF files if they are
> installed,  but I do not believe this is commonly used. In any case,  if
> someone needs QPF fonts they can get them from other sources than the Qt
> packages.  It sounds like a good idea to remove the font files from qtbase.

One vote for removing then. The files will get removed by EOW unless someone
has a very good reason not to.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center

_______________________________________________
Development mailing list
Development at qt-project.org
http://lists.qt-project.org/mailman/listinfo/development

From Lars.Knoll at theqtcompany.com  Wed Jun 17 07:33:34 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Wed, 17 Jun 2015 05:33:34 +0000
Subject: [Development] Fwd: (QTBUG-46655) qt5base: font license files
 missing
In-Reply-To: <20150617043502.5693520.63249.27108@theqtcompany.com>
References: <11035771.b9HOrmF5uL@tjmaciei-mobl4> <9197441.g5mRXBqj82@dragaera>
	<15765912.XTkCj5kvKz@tjmaciei-mobl4>
	<20150617043502.5693520.63249.27108@theqtcompany.com>
Message-ID: <CE02EBCF-095C-42D2-BED6-F53071AFD7C4@theqtcompany.com>

Yes, let's remove them. The font files shouldn't be part of qtbase for sure. We might still decide to package up certain fonts in the Qt for device creation product, but that's totally separate and has nothing to do with our repositories.

Cheers,
Lars





On 17/06/15 06:35, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Hausmann Simon" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Simon.Hausmann at theqtcompany.com> wrote:

>Make that two votes :)
>
>
>Simon
>
>  Original Message
>From: Thiago Macieira
>Sent: Tuesday, June 16, 2015 22:40
>To: development at qt-project.org
>Subject: Re: [Development] Fwd: (QTBUG-46655) qt5base: font license files       missing
>
>
>On Tuesday 16 June 2015 12:28:51 Paul Olav Tvete wrote:
>> There is still code in Qt that reads and adds QPF files if they are
>> installed,  but I do not believe this is commonly used. In any case,  if
>> someone needs QPF fonts they can get them from other sources than the Qt
>> packages.  It sounds like a good idea to remove the font files from qtbase.
>
>One vote for removing then. The files will get removed by EOW unless someone
>has a very good reason not to.
>
>--
>Thiago Macieira - thiago.macieira (AT) intel.com
>  Software Architect - Intel Open Source Technology Center
>
>_______________________________________________
>Development mailing list
>Development at qt-project.org
>http://lists.qt-project.org/mailman/listinfo/development
>_______________________________________________
>Development mailing list
>Development at qt-project.org
>http://lists.qt-project.org/mailman/listinfo/development

From dangelog at gmail.com  Wed Jun 17 08:33:50 2015
From: dangelog at gmail.com (Giuseppe D'Angelo)
Date: Wed, 17 Jun 2015 08:33:50 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <2505786.e0shnu4VyY@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
Message-ID: <CAPm+cvh8NLutS=fOpHnLt7xPXrBHxxWc8SBJ2cVvHr2B4Xjj1A@mail.gmail.com>

On Tue, Jun 16, 2015 at 10:49 PM, Thiago Macieira
<thiago.macieira at intel.com> wrote:
>
> Qt 5.5 would be ideal - but we'd need to support the old Qt CI system for
> longer. So we're targetting that *Qt 5.6* will be the first LTS release.

Mind to elaborate? Why is the "old Qt CI" a requirement or a blocker
for a LTS release?

In general: I don't feel comfortable with the idea of introducing
C++11 in our API, dropping support for a bunch of platforms, and make
/that/ a LTS release...

--
Giuseppe D'Angelo

From andre at familiesomers.nl  Wed Jun 17 08:35:58 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Wed, 17 Jun 2015 08:35:58 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <2505786.e0shnu4VyY@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
Message-ID: <5581154E.2050305@familiesomers.nl>

Thiago Macieira schreef op 16-6-2015 om 22:49:
> Last year's notes[1]
>
> Qt 5.5 will be the last release to support:
>       *  GCC 4.6
>       *  OS X 10.7
>       *  Windows Vista
>       *  WIndows Embedded Compact 7
>       *  QNX 6.5
>       *  Qt WebKit, Qt Script, Qt Quick 1
Ok, I understand that support for these has to go at one point, though
I'm not feeling too happy that that happens to be in a point release.
 From my point of view, it breaks the compatibility promise of Qt. But I
guess that's all water under the bridge, and there is nothing that can
be done about it. We just can't maintain it any more I understand
(especialy WebKit).
> Therefore, we'd like to have a long-term support release that allows people
> who cannot upgrade to remain for some longer time in an official release.
Ok, that's a great goal.
> Additionally, we'd like to sync up with Ubuntu's LTS releases (next is 16.04)
> - other distros are mostly focused on servers (RHEL, SLES) or don't actively
> depend on Qt anyway.
>
> Qt 5.5 would be ideal - but we'd need to support the old Qt CI system for
> longer. So we're targetting that *Qt 5.6* will be the first LTS release.
And that I don't understand, as it is exactly 5.6 that is no longer
supporting a list of platforms, compilers and tecnologies that people
actually rely on, right? So it seems to me, that making 5.6 LTS is one
release too late. For instance, if one is relying on Quick 1 like we
are, how are we supposed to stay on a supported platform? And no,
porting to Quick 2 isn't an option. Not as long as we can't print the
contents of our scene like we can with our Quick 1 based reporting
engine by simply rendering pages (sections of the scene) to a QPrinter.

It seems obvious for me that any LTS release requires keeping the
testing infrastructure for it up, including the old platforms and
compilers you want to support with it. But isn't keeping support for
these the whole _point_ of the LTS release?

Andr?



From thiago.macieira at intel.com  Wed Jun 17 08:55:35 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 23:55:35 -0700
Subject: [Development] Fwd: (QTBUG-46655) qt5base: font license files
	missing
In-Reply-To: <CE02EBCF-095C-42D2-BED6-F53071AFD7C4@theqtcompany.com>
References: <11035771.b9HOrmF5uL@tjmaciei-mobl4>
	<20150617043502.5693520.63249.27108@theqtcompany.com>
	<CE02EBCF-095C-42D2-BED6-F53071AFD7C4@theqtcompany.com>
Message-ID: <11037268.JaZzITI69c@tjmaciei-mobl4>

Ok, given these extra votes, I've just submitted the removal right now and for
5.5.0:

https://codereview.qt-project.org/114503

On Wednesday 17 June 2015 05:33:34 Knoll Lars wrote:
> Yes, let's remove them. The font files shouldn't be part of qtbase for sure.
> We might still decide to package up certain fonts in the Qt for device
> creation product, but that's totally separate and has nothing to do with
> our repositories.
>
> Cheers,
> Lars
>
> On 17/06/15 06:35, "development-bounces+lars.knoll=theqtcompany.com at qt-
project.org on behalf of Hausmann Simon" <development-
bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of
Simon.Hausmann at theqtcompany.com> wrote:
> >Make that two votes :)
> >
> >
> >Simon
> >
> >  Original Message
> >
> >From: Thiago Macieira
> >Sent: Tuesday, June 16, 2015 22:40
> >To: development at qt-project.org
> >Subject: Re: [Development] Fwd: (QTBUG-46655) qt5base: font license files
> >    missing>
> >On Tuesday 16 June 2015 12:28:51 Paul Olav Tvete wrote:
> >> There is still code in Qt that reads and adds QPF files if they are
> >> installed,  but I do not believe this is commonly used. In any case,  if
> >> someone needs QPF fonts they can get them from other sources than the Qt
> >> packages.  It sounds like a good idea to remove the font files from
> >> qtbase.
> >
> >One vote for removing then. The files will get removed by EOW unless
> >someone has a very good reason not to.
> >
> >--
> >Thiago Macieira - thiago.macieira (AT) intel.com
> >
> >  Software Architect - Intel Open Source Technology Center
> >
> >_______________________________________________
> >Development mailing list
> >Development at qt-project.org
> >http://lists.qt-project.org/mailman/listinfo/development
> >_______________________________________________
> >Development mailing list
> >Development at qt-project.org
> >http://lists.qt-project.org/mailman/listinfo/development
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Wed Jun 17 08:57:57 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 16 Jun 2015 23:57:57 -0700
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <CAPm+cvh8NLutS=fOpHnLt7xPXrBHxxWc8SBJ2cVvHr2B4Xjj1A@mail.gmail.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<CAPm+cvh8NLutS=fOpHnLt7xPXrBHxxWc8SBJ2cVvHr2B4Xjj1A@mail.gmail.com>
Message-ID: <1570253.cED6mJgAKG@tjmaciei-mobl4>

On Wednesday 17 June 2015 08:33:50 Giuseppe D'Angelo wrote:
> On Tue, Jun 16, 2015 at 10:49 PM, Thiago Macieira
>
> <thiago.macieira at intel.com> wrote:
> > Qt 5.5 would be ideal - but we'd need to support the old Qt CI system for
> > longer. So we're targetting that *Qt 5.6* will be the first LTS release.
>
> Mind to elaborate? Why is the "old Qt CI" a requirement or a blocker
> for a LTS release?

Because that would imply keeping it running for a "long term" and the team
maintaining it would really like to turn it off ASAP, in favour of the new
solution that is more manageable and should have fewer flaky tests.

> In general: I don't feel comfortable with the idea of introducing
> C++11 in our API, dropping support for a bunch of platforms, and make
> /that/ a LTS release...

Nor I, but the conditions don't allow us to do an LTS before that. There's
simply not enough manpower available.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From andre at familiesomers.nl  Wed Jun 17 09:01:19 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Wed, 17 Jun 2015 09:01:19 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <1570253.cED6mJgAKG@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>	<CAPm+cvh8NLutS=fOpHnLt7xPXrBHxxWc8SBJ2cVvHr2B4Xjj1A@mail.gmail.com>
	<1570253.cED6mJgAKG@tjmaciei-mobl4>
Message-ID: <55811B3F.50000@familiesomers.nl>

Thiago Macieira schreef op 17-6-2015 om 08:57:
> On Wednesday 17 June 2015 08:33:50 Giuseppe D'Angelo wrote:
>> On Tue, Jun 16, 2015 at 10:49 PM, Thiago Macieira
>>
>> <thiago.macieira at intel.com> wrote:
>>> Qt 5.5 would be ideal - but we'd need to support the old Qt CI system for
>>> longer. So we're targetting that *Qt 5.6* will be the first LTS release.
>> Mind to elaborate? Why is the "old Qt CI" a requirement or a blocker
>> for a LTS release?
> Because that would imply keeping it running for a "long term" and the team
> maintaining it would really like to turn it off ASAP, in favour of the new
> solution that is more manageable and should have fewer flaky tests.
>
Does the CI infrastructure depend on the Qt version then? What is it
about 5.5 that prevents the CI from being upgraded?

Andr?


From thiago.macieira at intel.com  Wed Jun 17 09:02:07 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 17 Jun 2015 00:02:07 -0700
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <5581154E.2050305@familiesomers.nl>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<5581154E.2050305@familiesomers.nl>
Message-ID: <1782274.RqaBHKlnjV@tjmaciei-mobl4>

On Wednesday 17 June 2015 08:35:58 Andr? Somers wrote:
> Thiago Macieira schreef op 16-6-2015 om 22:49:
> > Last year's notes[1]
> >
> > Qt 5.5 will be the last release to support:
> >       *  GCC 4.6
> >       *  OS X 10.7
> >       *  Windows Vista
> >       *  WIndows Embedded Compact 7
> >       *  QNX 6.5
> >       *  Qt WebKit, Qt Script, Qt Quick 1
>
> Ok, I understand that support for these has to go at one point, though
> I'm not feeling too happy that that happens to be in a point release.
>  From my point of view, it breaks the compatibility promise of Qt. But I
> guess that's all water under the bridge, and there is nothing that can
> be done about it. We just can't maintain it any more I understand
> (especialy WebKit).

We've been through this time and time again. Let me repeat once more and never
again:

There's no breakage of the compatibility promise. The code for those modules
is not getting deleted from the Internet. You can still build the existing
versions with newer versions of Qt and that should continue working. The
number of changes required to keep Qt Quick 1 and QtScript running in the past
4 minor releases supports this statement; QtWebKit never depended on Qt
private API in the first place.

What's more, this is our BKM for deprecating modules. We've done that twice
already: once for Qt Script Classic and once for QtAssistant ADP.

> > Qt 5.5 would be ideal - but we'd need to support the old Qt CI system for
> > longer. So we're targetting that *Qt 5.6* will be the first LTS release.
>
> And that I don't understand, as it is exactly 5.6 that is no longer
> supporting a list of platforms, compilers and tecnologies that people
> actually rely on, right? So it seems to me, that making 5.6 LTS is one
> release too late. For instance, if one is relying on Quick 1 like we
> are, how are we supposed to stay on a supported platform? And no,
> porting to Quick 2 isn't an option. Not as long as we can't print the
> contents of our scene like we can with our Quick 1 based reporting
> engine by simply rendering pages (sections of the scene) to a QPrinter.

You're right. The problem is manpower.

So our hands are tied and we're making a less-than-ideal decision considering
the technical aspects.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From simon.hausmann at theqtcompany.com  Wed Jun 17 09:09:47 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Wed, 17 Jun 2015 09:09:47 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <2505786.e0shnu4VyY@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
Message-ID: <3412418.qT8QrcSHGD@simon-sx58>

On Tuesday, June 16, 2015 01:49:54 PM Thiago Macieira wrote:
[...]
> Other notes:
>      *  We will keep a Linux builder building 32-bit to make sure everything
> works - *no binary packages for Linux 32-bit*

We do have at least one Linux builder today that targets armv7, but AFAICS
that is the only Linux build that compiles to a 32-bit architecture.

We do have builds on Windows that target x86.

>      *  We do need to introduce a static builder to ensure things work. We
> need to document that static requires more complexity to make a working
> application and it's only tested with qmake.

We do have two static builds in the CI system and we've had them for a longer
time:

* The build targetting iOS is - by design - creating static binaries.
* The qt5 build has a three static builds - one for Linux, one for OS X and
one for Windows.


Simon

P.S.: I'm basing this solely on the information at

    http://testresults.qt.io/ci/Qt5_dev_Integration/latest-success/


From rafael.roquetto at kdab.com  Wed Jun 17 09:17:26 2015
From: rafael.roquetto at kdab.com (Rafael Roquetto)
Date: Wed, 17 Jun 2015 04:17:26 -0300
Subject: [Development] QtCS: Discussion about deprecating things
In-Reply-To: <27068122.UQIZkC17Ns@tjmaciei-mobl4>
References: <1434484229.1963396.297303593.713E9883@webmail.messagingengine.com>
	<CAPm+cvjwPSq9i7hN_Wyw4YRbxh4=RXKXv7ZD_abzkeb1PkNnVA@mail.gmail.com>
	<27068122.UQIZkC17Ns@tjmaciei-mobl4>
Message-ID: <20150617071725.GA1257@polaris>

On Tue, Jun 16, 2015 at 01:48:07PM -0700, Thiago Macieira wrote:
> On Tuesday 16 June 2015 21:57:53 Giuseppe D'Angelo wrote:
> > > * Qt 5.6 will deprecate: QNX 6.5 (QNX 6.6 OK)
> > > * Qt 5.6 will deprecate WEC 7, 2013 only.
> >
> > Deprecate or drop them? From the C++11 thread I understood they will
> > be completely dropped due to lack of compilers.
>
> The changelog says "may be removed or stop compiling". I think that we'll
> simply stop maintaining them and let them bitrot.

Which means, for QNX 6.5, that it will be officially dropped - except that in
practice all this means is that we can add C++11 code to the code, and it
won't build with 6.5, only 6.6.

6.5 is deprecated as of Qt 5.5 already.

>
> > > * Android 2.3 support for 5.6 / ?Qt LTS"
> >
> > What's "LTS" here?
>
> Long Term Support, subject of another session, whose note taker has not sent
> the details to the list. Oh wait, that would be me!
> --
> Thiago Macieira - thiago.macieira (AT) intel.com
>   Software Architect - Intel Open Source Technology Center
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

--
Rafael Roquetto | rafael.roquetto at kdab.com | Software Engineer
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel. Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - Qt Experts
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/x-pkcs7-signature
Size: 4861 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150617/d51e2558/attachment.bin

From thiago.macieira at intel.com  Wed Jun 17 09:15:48 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 17 Jun 2015 00:15:48 -0700
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <55811B3F.50000@familiesomers.nl>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<1570253.cED6mJgAKG@tjmaciei-mobl4>
	<55811B3F.50000@familiesomers.nl>
Message-ID: <3518460.WoxmWBSvAZ@tjmaciei-mobl4>

On Wednesday 17 June 2015 09:01:19 Andr? Somers wrote:
> Thiago Macieira schreef op 17-6-2015 om 08:57:
> > On Wednesday 17 June 2015 08:33:50 Giuseppe D'Angelo wrote:
> >> On Tue, Jun 16, 2015 at 10:49 PM, Thiago Macieira
> >>
> >> <thiago.macieira at intel.com> wrote:
> >>> Qt 5.5 would be ideal - but we'd need to support the old Qt CI system
> >>> for
> >>> longer. So we're targetting that *Qt 5.6* will be the first LTS release.
> >>
> >> Mind to elaborate? Why is the "old Qt CI" a requirement or a blocker
> >> for a LTS release?
> >
> > Because that would imply keeping it running for a "long term" and the team
> > maintaining it would really like to turn it off ASAP, in favour of the new
> > solution that is more manageable and should have fewer flaky tests.
>
> Does the CI infrastructure depend on the Qt version then? What is it
> about 5.5 that prevents the CI from being upgraded?

Two different CI implementations. The "new CI" is being developed in lockstep
with Qt 5.6, including QtTest features. That means the "new CI" system cannot
be backported to 5.5.

In turn, to keep 5.5 long-term implies keeping the current infrastructure
long-term. The same infrastructure that we're having tons of problems with,
for flaky tests, inability to populate the test infra for Qt version, virtual
machine configurations, etc.

Since 5.5 LTS is an impossibility, the only alternative to minimising the
issues is to push the deprecations to 5.7 and do one more "official" release of
the to-be-deprecated code in 5.6.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From mitya57.ml at gmail.com  Wed Jun 17 09:21:55 2015
From: mitya57.ml at gmail.com (Dmitry Shachnev)
Date: Wed, 17 Jun 2015 10:21:55 +0300
Subject: [Development] Question about GTK+ support status
In-Reply-To: <E9B9CC1F-AE95-4A5C-9146-84A222140C94@theqtcompany.com>
References: <20150616143254.20995.57633@mitya57.me>
	<E9B9CC1F-AE95-4A5C-9146-84A222140C94@theqtcompany.com>
Message-ID: <20150617072155.2719.15627@mitya57.me>

Hi J-P,

On Tue, 16 Jun 2015 17:44:06 +0000, Nurmi J-P wrote:
> Given that QGtkStyle is no longer part of the public API in Qt 5, how about
> making it a QStylePlugin and moving it out of QtWidgets? If someone
> implements a style plugin for GTK+ 3, then it also becomes feasible to have
> platform theme plugins for both GTK+ 2 and 3. As you mentioned, a platform
> theme is the easy part. Implementing a QStyle for GTK+ 3.x is a lot more
> work.

I proposed removing QGtkStyle altogether, but moving it to qtstyleplugins is
also a good idea. We just need to make sure we don't load it when the platform
theme is gtk3 (as one can't load gtk2 and gtk3 libraries at the same time).

> configure: add support for GTK+ 3.x - https://codereview.qt-project.org/#/c/75599/
> QGtk3ThemePlugin - https://codereview.qt-project.org/#/c/75757/

Do we really need to keep gtk2 support in qtbase? I.e., do we really need to
keep gtk2 theme if we have gtk3 theme?

Also the latter patch will need some rebasing for new version and new
copyrights.

--
Dmitry Shachnev
-------------- next part --------------
A non-text attachment was scrubbed...
Name: not available
Type: application/pgp-signature
Size: 819 bytes
Desc: OpenPGP digital signature
Url : http://lists.qt-project.org/pipermail/development/attachments/20150617/3e5d6c40/attachment-0001.bin

From Lars.Knoll at theqtcompany.com  Wed Jun 17 09:32:15 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Wed, 17 Jun 2015 07:32:15 +0000
Subject: [Development] Question about GTK+ support status
In-Reply-To: <20150617072155.2719.15627@mitya57.me>
References: <20150616143254.20995.57633@mitya57.me>
	<E9B9CC1F-AE95-4A5C-9146-84A222140C94@theqtcompany.com>
	<20150617072155.2719.15627@mitya57.me>
Message-ID: <D1A6EEC3.32922%lars.knoll@theqtcompany.com>

On 17/06/15 09:21, "Dmitry Shachnev" <mitya57.ml at gmail.com> wrote:

>Hi J-P,
>
>On Tue, 16 Jun 2015 17:44:06 +0000, Nurmi J-P wrote:
>> Given that QGtkStyle is no longer part of the public API in Qt 5, how
>>about
>> making it a QStylePlugin and moving it out of QtWidgets? If someone
>> implements a style plugin for GTK+ 3, then it also becomes feasible to
>>have
>> platform theme plugins for both GTK+ 2 and 3. As you mentioned, a
>>platform
>> theme is the easy part. Implementing a QStyle for GTK+ 3.x is a lot more
>> work.
>
>I proposed removing QGtkStyle altogether, but moving it to qtstyleplugins
>is
>also a good idea. We just need to make sure we don't load it when the
>platform
>theme is gtk3 (as one can't load gtk2 and gtk3 libraries at the same
>time).
>
>> configure: add support for GTK+ 3.x -
>>https://codereview.qt-project.org/#/c/75599/
>> QGtk3ThemePlugin - https://codereview.qt-project.org/#/c/75757/
>
>Do we really need to keep gtk2 support in qtbase? I.e., do we really need
>to
>keep gtk2 theme if we have gtk3 theme?

IMO, we don?t. I?d be ok with removing gtk2 theming support once we have
gtk3 support in. I?d say let?s go that route unless someone has some good
and convincing arguments as to why we should keep gtk2 style support
around.

Cheers,
Lars

>
>Also the latter patch will need some rebasing for new version and new
>copyrights.
>
>--
>Dmitry Shachnev


From andre at familiesomers.nl  Wed Jun 17 10:08:00 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Wed, 17 Jun 2015 10:08:00 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <3518460.WoxmWBSvAZ@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>	<1570253.cED6mJgAKG@tjmaciei-mobl4>	<55811B3F.50000@familiesomers.nl>
	<3518460.WoxmWBSvAZ@tjmaciei-mobl4>
Message-ID: <55812AE0.7010203@familiesomers.nl>

Thiago Macieira schreef op 17-6-2015 om 09:15:
> On Wednesday 17 June 2015 09:01:19 Andr? Somers wrote:
>> Does the CI infrastructure depend on the Qt version then? What is it
>> about 5.5 that prevents the CI from being upgraded?
> Two different CI implementations. The "new CI" is being developed in lockstep
> with Qt 5.6, including QtTest features. That means the "new CI" system cannot
> be backported to 5.5.
>
> In turn, to keep 5.5 long-term implies keeping the current infrastructure
> long-term. The same infrastructure that we're having tons of problems with,
> for flaky tests, inability to populate the test infra for Qt version, virtual
> machine configurations, etc.
Ok, so they really are tightly linked. Too bad, but that can't be
helped. Thank you for your explanation (once again).
> Since 5.5 LTS is an impossibility, the only alternative to minimising the
> issues is to push the deprecations to 5.7 and do one more "official" release of
> the to-be-deprecated code in 5.6.
What would be the impact of doing that? Is doing that feasible at all?
And are you then thinking of all planned deprecations (compilers,
platforms, modules) or "just" a part of these?

Andr?




From eric.lemanissier at gmail.com  Wed Jun 17 10:33:19 2015
From: eric.lemanissier at gmail.com (Eric Lemanisser)
Date: Wed, 17 Jun 2015 08:33:19 +0000
Subject: [Development] Bluetooth support for Windows (RT/10) in Qt 5.6
In-Reply-To: <5580261C.3040406@csipa.in.rs>
References: <VI1PR02MB110492B7B1D315BE4B6878E0ECA70@VI1PR02MB1104.eurprd02.prod.outlook.com>
	<5580261C.3040406@csipa.in.rs>
Message-ID: <CAG5jb=QYtfbjvNmzHigZe6KYHCc2sb1H4-tEuKWgW9RUpaSOWQ@mail.gmail.com>

Hello,

I totally +1 this feature !
However if I'm not mistaking, focusing on WinRT api discards MinGW
compiler, that's bad news for open source tools.

Best regards,

Eric

Le mar. 16 juin 2015 ? 15:35, Attila Csipa <qt at csipa.in.rs> a ?crit :

> Hi,
>
> A huge +1 on this, BT support on Windows is long overdue.
>
> While there is certainly more inertia in the windows desktop version
> than probably any other Qt supported platform, Microsoft itself is
> trying to nudge people into quicker upgrade cycles, and while Win8 has
> certainly gotten a pushback, with Win10 around the corner I would also
> try not to get bogged down with pre-WinRT solutions, as painful as that
> might sound in some cases.
>
> Best regards,
> Attila
>
> On 6/16/2015 1:42 PM, Kalinowski Maurice wrote:
> > Hi everyone,
> >
> > It might sound weird that while we're trying to get 5.5.0 out I am
> starting a discussion about Qt 5.6, but if you look at the release schedule
> there is not much time for the feature freeze
> >
> > https://wiki.qt.io/Qt-5.6-release
> >
> > One of the items the Windows / WinRT team would really like to see
> included to that release is support for Bluetooth and BTLE.
> >
> > The current idea is to use the WinRT API for that backend, as it
> provides the advantage that it can also be used on Windows Desktop starting
> Windows 8(.1). WinRT covers Windows 10 support (both classic and Unified
> Windows Platform) as well.
> >
> > This leaves out support for Windows Desktop older than Windows 8. But as
> we are aiming to implement new features, we should draw the line somewhere
> and the WinRT backend clearly has the biggest potential to be supported in
> many years' time, while the (or multiple) pure desktop solution would be
> deprecated sooner or later again. Also given the fact that we can target
> quite many platforms with one backend gives us a better coverage for
> maintenance and resourcing.
> >
> > The reason that I am mentioning this on the mailing list is that after
> talking to some folks here in The Qt Company, multiple people inside and
> outside already started or wanted to start efforts on this topic. Hence the
> aim of this email is to get everyone connected and work on it together to
> make it happen within the 5.6 feature freeze.
> >
> > So, if you have worked on Bluetooth (LE) on Windows or want to, please
> get in touch with me to align.
> >
> >
> > BR,
> > Maurice
> >
> >
> > --------
> > Maurice Kalinowski - Senior Manager, Qt Tools
> >
> > The Qt Company GmbH, Rudower Chaussee 13, D-12489 Berlin
> > Gesch?ftsf?hrer: Mika P?lsi, Juha Varelius, Tuula Haataja Sitz der
> Gesellschaft:
> > Berlin, Registergericht: Amtsgericht Charlottenburg, HRB 144331 B
> >
> > Email: maurice.kalinowski at theqtcompany.com | Mobile: + 49 175 187 19 52
> | Phone:
> > +49 30 63 92 3255 www.qt.io |Qt Blog: http://blog.qt.digia.com/ |
> Twitter:
> > @QtbyDigia, @Qtproject | Facebook: www.facebook.com/qt
> >
> >
> > _______________________________________________
> > Development mailing list
> > Development at qt-project.org
> > http://lists.qt-project.org/mailman/listinfo/development
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150617/b3f7db80/attachment.html

From dangelog at gmail.com  Wed Jun 17 10:34:39 2015
From: dangelog at gmail.com (Giuseppe D'Angelo)
Date: Wed, 17 Jun 2015 10:34:39 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <3518460.WoxmWBSvAZ@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<1570253.cED6mJgAKG@tjmaciei-mobl4>
	<55811B3F.50000@familiesomers.nl>
	<3518460.WoxmWBSvAZ@tjmaciei-mobl4>
Message-ID: <CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>

On Wed, Jun 17, 2015 at 9:15 AM, Thiago Macieira
<thiago.macieira at intel.com> wrote:
>
> Two different CI implementations. The "new CI" is being developed in lockstep
> with Qt 5.6, including QtTest features. That means the "new CI" system cannot
> be backported to 5.5.

Ok, thanks for explaining this out...

> In turn, to keep 5.5 long-term implies keeping the current infrastructure
> long-term. The same infrastructure that we're having tons of problems with,
> for flaky tests, inability to populate the test infra for Qt version, virtual
> machine configurations, etc.
>
> Since 5.5 LTS is an impossibility, the only alternative to minimising the
> issues is to push the deprecations to 5.7 and do one more "official" release of
> the to-be-deprecated code in 5.6.

I would agree to this plan; we can deprecate platforms we don't want
to support long term in 5.5 already, though, which is what has
happened with QNX. Maybe old OSX as well? GCC 4.4?

I would also push the "C++11 in our API" to 5.7 to minimise the risks.

Cheers,
--
Giuseppe D'Angelo

From Lars.Knoll at theqtcompany.com  Wed Jun 17 10:41:45 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Wed, 17 Jun 2015 08:41:45 +0000
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<1570253.cED6mJgAKG@tjmaciei-mobl4> <55811B3F.50000@familiesomers.nl>
	<3518460.WoxmWBSvAZ@tjmaciei-mobl4>
	<CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
Message-ID: <D1A6FEA5.32A1E%lars.knoll@theqtcompany.com>

On 17/06/15 10:34, "Giuseppe D'Angelo" <dangelog at gmail.com> wrote:

>On Wed, Jun 17, 2015 at 9:15 AM, Thiago Macieira
><thiago.macieira at intel.com> wrote:
>>
>> Two different CI implementations. The "new CI" is being developed in
>>lockstep
>> with Qt 5.6, including QtTest features. That means the "new CI" system
>>cannot
>> be backported to 5.5.
>
>Ok, thanks for explaining this out...
>
>> In turn, to keep 5.5 long-term implies keeping the current
>>infrastructure
>> long-term. The same infrastructure that we're having tons of problems
>>with,
>> for flaky tests, inability to populate the test infra for Qt version,
>>virtual
>> machine configurations, etc.
>>
>> Since 5.5 LTS is an impossibility, the only alternative to minimising
>>the
>> issues is to push the deprecations to 5.7 and do one more "official"
>>release of
>> the to-be-deprecated code in 5.6.
>
>I would agree to this plan; we can deprecate platforms we don't want
>to support long term in 5.5 already, though, which is what has
>happened with QNX. Maybe old OSX as well? GCC 4.4?
>
>I would also push the "C++11 in our API" to 5.7 to minimise the risks.

Pushing this to 5.7 could be an option, since the 5.6 feature freeze is
only 1.5 months away (out of which a couple of weeks are summer vacations
for many of us).

Cheers,
Lars



From andre at familiesomers.nl  Wed Jun 17 10:54:51 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Wed, 17 Jun 2015 10:54:51 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>	<1570253.cED6mJgAKG@tjmaciei-mobl4>	<55811B3F.50000@familiesomers.nl>	<3518460.WoxmWBSvAZ@tjmaciei-mobl4>
	<CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
Message-ID: <558135DB.4090606@familiesomers.nl>

Giuseppe D'Angelo schreef op 17-6-2015 om 10:34:
> I would also push the "C++11 in our API" to 5.7 to minimise the risks.
> Cheers,
C++11 in our API was to be taken slowly anyway, according to the session
at QtCS. We would start with using it in the implementation to gain some
experience first. See notes from that session.

Andr?


From Kai.Koehne at theqtcompany.com  Wed Jun 17 11:57:19 2015
From: Kai.Koehne at theqtcompany.com (Koehne Kai)
Date: Wed, 17 Jun 2015 09:57:19 +0000
Subject: [Development] Avoid overloading of 'error'
In-Reply-To: <13279726.762LyY3m5A@tjmaciei-mobl4>
References: <AM2PR02MB06733EB921A626EA854FD152E1BD0@AM2PR02MB0673.eurprd02.prod.outlook.com>
	<13279726.762LyY3m5A@tjmaciei-mobl4>
Message-ID: <AM2PR02MB067381B57C4F454E7A1D016AE1A60@AM2PR02MB0673.eurprd02.prod.outlook.com>



> -----Original Message-----
> From: development-bounces+kai.koehne=theqtcompany.com at qt-
> [...]
> So I recommend we begin the shift now in 5.6 and deprecate the old
> methods, to be removed in 6.0.
>
> As for the implementation, please connect one signal to the other, so we
> don't need to duplicate the emissions. But note that there will be an delivery
> order
> problem: all slots connected to one signal will be received before all slots
> connected to the other. Unless Olivier adds a signal alias feature to moc :-)

I've put some patches that deprecate the 'error()' signals in favor of 'errorOccurred()' up for review in a topic branch #errorAmbiguity :

https://codereview.qt-project.org/#/q/topic:errorAmbiguity,n,z

(The networking one's probably still need some work in the autotests).


Regarding the property name, I'm not convinced anymore it's a good idea to change from 'error()' to 'lastError()': error() and errorString() are actually pretty common in a lot of classes, even one's that do not suffer from the naming clash (because they don't feature a signal).


Regards

Kai

From Lars.Knoll at theqtcompany.com  Wed Jun 17 12:27:20 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Wed, 17 Jun 2015 10:27:20 +0000
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <558135DB.4090606@familiesomers.nl>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<1570253.cED6mJgAKG@tjmaciei-mobl4> <55811B3F.50000@familiesomers.nl>
	<3518460.WoxmWBSvAZ@tjmaciei-mobl4>
	<CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
	<558135DB.4090606@familiesomers.nl>
Message-ID: <D1A71668.32B1F%lars.knoll@theqtcompany.com>

Going through the discussions and looking at our time schedule, here?s
another proposal how we could do things (slightly different from what we
discussed at QtCS):

* We make Qt 5.6 an LTS release
* We already have of the current dev branch on pretty much all platforms
supported in Qt 5.5 working in the new CI (exceptions in QNX 6.5). It?s
mainly about some details now and flipping the switch.
* We delay introducing hard dependencies to C++11 to Qt 5.7. This doesn?t
come at a huge cost from an R&D perspective as the 5.6 feature freeze is
in the beginning of August. So once everybody is back form summer
vacations, we could start cleaning up our code base aggressively.
* We could then have both WEC7 and WEC2013 (on VS2012) supported on 5.6.
This would solve all problems for Windows Embedded and we could make
VS2013 the compiler baseline for 5.7.
* We?d still remove the deprecated modules from our Qt 5.6 release (maybe
with the exception of Qt Script).

That would give us a pretty good baseline to work with for the LTS
release, we?d keep people on older compilers/OSes happy and we could move
a lot more aggressively towards C++11 in the dev branch directly after
summer vacations (from the beginning of August).

Opinions?

Cheers,
Lars

On 17/06/15 10:54, "Andr? Somers" <andre at familiesomers.nl> wrote:

>Giuseppe D'Angelo schreef op 17-6-2015 om 10:34:
>> I would also push the "C++11 in our API" to 5.7 to minimise the risks.
>> Cheers,
>C++11 in our API was to be taken slowly anyway, according to the session
>at QtCS. We would start with using it in the implementation to gain some
>experience first. See notes from that session.
>
>Andr?
>
>_______________________________________________
>Development mailing list
>Development at qt-project.org
>http://lists.qt-project.org/mailman/listinfo/development


From andre at familiesomers.nl  Wed Jun 17 12:34:32 2015
From: andre at familiesomers.nl (=?UTF-8?B?QW5kcsOpIFNvbWVycw==?=)
Date: Wed, 17 Jun 2015 12:34:32 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <D1A71668.32B1F%lars.knoll@theqtcompany.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<1570253.cED6mJgAKG@tjmaciei-mobl4>
	<55811B3F.50000@familiesomers.nl>
	<3518460.WoxmWBSvAZ@tjmaciei-mobl4>
	<CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
	<558135DB.4090606@familiesomers.nl>
	<D1A71668.32B1F%lars.knoll@theqtcompany.com>
Message-ID: <55814D38.1080404@familiesomers.nl>

Knoll Lars schreef op 17-6-2015 om 12:27:
> * We?d still remove the deprecated modules from our Qt 5.6 release (maybe
> with the exception of Qt Script).
Is that really needed? For all of the modules? Could Quick 1 stay too?*

Andr?
  *) Yes, we have a stake in that: The printing case.


From Lars.Knoll at theqtcompany.com  Wed Jun 17 12:44:38 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Wed, 17 Jun 2015 10:44:38 +0000
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <55814D38.1080404@familiesomers.nl>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<1570253.cED6mJgAKG@tjmaciei-mobl4> <55811B3F.50000@familiesomers.nl>
	<3518460.WoxmWBSvAZ@tjmaciei-mobl4>
	<CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
	<558135DB.4090606@familiesomers.nl>
	<D1A71668.32B1F%lars.knoll@theqtcompany.com>
	<55814D38.1080404@familiesomers.nl>
Message-ID: <D1A71BE5.32B88%lars.knoll@theqtcompany.com>

On 17/06/15 12:34, "Andr? Somers" <andre at familiesomers.nl> wrote:

>Knoll Lars schreef op 17-6-2015 om 12:27:
>> * We?d still remove the deprecated modules from our Qt 5.6 release
>>(maybe
>> with the exception of Qt Script).
>Is that really needed? For all of the modules? Could Quick 1 stay too?*
>
>Andr?
>  *) Yes, we have a stake in that: The printing case.

As Thiago said, you could still easily use the module on your own. The
code will not suddenly dissappear from the universe. And we had some
discussions about how to fix the printing case in Qt Quick 2.

Cheers,
Lars


From Lars.Knoll at theqtcompany.com  Wed Jun 17 12:56:54 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Wed, 17 Jun 2015 10:56:54 +0000
Subject: [Development] Some Qt3D feedback
In-Reply-To: <mlq3sn$ci9$1@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111446.20906.marc.mutz@kdab.com> <mlchav$7eg$1@ger.gmane.org>
	<1637657.fa75jvLXrZ@titan> <mlchoc$it1$1@ger.gmane.org>
	<mlq3sn$ci9$1@ger.gmane.org>
Message-ID: <D1A718C6.32B50%lars.knoll@theqtcompany.com>

On 16/06/15 23:19, "Stephen Kelly" <steveire at gmail.com> wrote:

>Stephen Kelly wrote:
>
>>> I said I'm happy to discuss. I'm just waiting for some more opinions,
>>> please don't take that as me trying to shut the discussion down. :)
>>
>> Cool. Let's wait and see.
>
>This thread has gone way off-topic now, but we gathered a week of
>opinions
>and reasons, and I think it's time to put the thread to rest.
>
>Lars, what's your take on these two questions:
>
>1) What should be done for new modules with Qt 5.6+ ?
>
>2) What should be done with Qt3D?

This is mainly about how we use namespaces in Qt. We went through that
discussion during the times we moved from Qt 4 to Qt 5, and I was trying
to dog out the issues we had at that time.

During the time we worked on Qt 5, we actually discussed whether we should
move all of Qt into namespaces. It failed for several reasons. Some of
them are also valid for new code:

* (doesn?t really apply for new code) We couldn?t make things work in a
source compatible way. Moving from QObject to Qt::Object (or even
Qt::QObject) was not something you could do in a transparent way. We
thought about using a 'typedef Qt::Object QObject? for compatibility. But
it would break things such as forward declarations and typedefs.

* connect statements are hard with namespaces. Old style connects could
easily break if you forgot to fully qualify a parameter. New style
connects might end up with rather ugly looking syntax.

* metatype registration is problematic with namespaced types, as the macro
extracts the name of the type through the preprocessor. People can very
easily end up registering the type multiple times with different
(qualified vs non qualified) names.

* One of our coding guidelines is that you write code once, but read it
many times. Code written should be as self explaining as possible. Having
generic class names inside an implicit namespace makes this difficult, as
information is not fully local anymore (you have to know that there?s a
using directive at the beginning of the file to find the proper qualified
class name). Generic and duplicated names from different namespaces can
easily lead to confusion when reading code. (btw, this is also an argument
against over-using auto)

* class name prefixing is a widely used and understood scheme by our
users. Do we really want an inconsistency now in one place? I don?t think
we have enough arguments to actually go down that route.

So what do we do with Qt 3D? For 5.5, we?re too late to do any changes.
But we?re talking about a Tech Preview here, so we can use it to collect
some feedback on the namespace usage in there. We will however need to
decide rather quickly whether we want to keep it or revert to regular Qt
style class name prefixing for 5.6. I?m currently leaning towards the
latter.

At the same time, I think we should start experimenting with namespaces
for Qt types. A way to do that that doesn?t disrupt current Qt development
is by adding headers that put the types into namespaces:

--
#include <QtCoreNamespace>

QtCoreNamespace:

class QObject;
namespace QtCore { // or should this simply be Qt?
    using ::QObject as Object;
    // or
    class Object : public QObject {
	using QObject::QObject;
    }
}
--

Not sure this would work perfectly, but it might be worth a try :)

Cheers,
Lars


From marc.mutz at kdab.com  Wed Jun 17 15:36:11 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Wed, 17 Jun 2015 15:36:11 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <D1A718C6.32B50%lars.knoll@theqtcompany.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <mlq3sn$ci9$1@ger.gmane.org>
	<D1A718C6.32B50%lars.knoll@theqtcompany.com>
Message-ID: <201506171536.11799.marc.mutz@kdab.com>

On Wednesday 17 June 2015 12:56:54 Knoll Lars wrote:
[...]
> * connect statements are hard with namespaces. Old style connects could
> easily break if you forgot to fully qualify a parameter. New style
> connects might end up with rather ugly looking syntax.

This is nothing new. We have that for nested classes and enums already, as
well as typedefs. If you ban namespaces based on this, you need to ban nested
types (e.g. error enums), too.

> * metatype registration is problematic with namespaced types, as the macro
> extracts the name of the type through the preprocessor. People can very
> easily end up registering the type multiple times with different
> (qualified vs non qualified) names.

Same counter-arguments as above, but Q_DECLARE_METATYPE with namespaces is
actually easily fixed by internally prepending ::, thus making sure the
argument is a fully-qualified name.

> * One of our coding guidelines is that you write code once, but read it
> many times. Code written should be as self explaining as possible. Having
> generic class names inside an implicit namespace makes this difficult, as
> information is not fully local anymore (you have to know that there?s a
> using directive at the beginning of the file to find the proper qualified
> class name). Generic and duplicated names from different namespaces can
> easily lead to confusion when reading code. (btw, this is also an argument
> against over-using auto)

Purely subjective, and highly controversial in the wider C++ community (with
the controversity mainly between Qt and the rest of C++, afaict).

> * class name prefixing is a widely used and understood scheme by our
> users. Do we really want an inconsistency now in one place? I don?t think
> we have enough arguments to actually go down that route.

Show me one C++ library not of Qt origin that uses class name prefixes not due
to backwards compatibility concerns.

[...]
> At the same time, I think we should start experimenting with namespaces
> for Qt types. A way to do that that doesn?t disrupt current Qt development
> is by adding headers that put the types into namespaces:
>
> --
> #include <QtCoreNamespace>
>
> QtCoreNamespace:
>
> class QObject;
> namespace QtCore { // or should this simply be Qt?
>     using ::QObject as Object;

This will exacerbate the problems you mentioned before, since every type will
have two names, and there goes consistency...


>     // or
>     class Object : public QObject {
> 	using QObject::QObject;
>     }

This requires C++11 and makes Qt::Object and QObject distinct types. In
particular, a cast from QLineEdit to Qt::Object is invalid, as QLineEdit is-
not-a Qt::Object. It also doesn't work for value tyoes.


>
> Not sure this would work perfectly,

it wouldn't.

> but it might be worth a try :)

it isn't.

I'm sorry, but this mail contains no arguments against *namespaces*. It
contains _some_ arguments against *nested types*, but Qt already widely
violates that.

Curiously, you didn't list any pro-namespace arguments. I don't know what to
make of this, but I fear that a decision is being made based solely on
arguments from one side.

That side might be the vocal majority, too, tramping over the silent majority,
since I note that QtC is full of namespaces.

Roughly one per library after a quick grep.

If name prefixing is The Way To Go, I wonder why QtC, as the biggest internal
consumer, and second-biggest producer of Qt API, didn't choose it for its own
internal structure...?

*And* they are using using directives all over the place. More than 2000.
Maybe the devs over there got tired of typing QtCreatorCMakeProjectManager....
and QtCreatorCoreInternalDesignModeCoreListener? Maybe QtC already *has* the
experience with namespaces we think we first needed to gather?

But after all I read from the proponents of name prefixing so far, we rather
need to send the whole QtC bunch to the asylum because they've clearly backed
themselves into a corner and can't possibly understand their code anymore. :)

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From ulf.hermann at theqtcompany.com  Wed Jun 17 14:41:21 2015
From: ulf.hermann at theqtcompany.com (Ulf Hermann)
Date: Wed, 17 Jun 2015 14:41:21 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506171536.11799.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<mlq3sn$ci9$1@ger.gmane.org>	<D1A718C6.32B50%lars.knoll@theqtcompany.com>
	<201506171536.11799.marc.mutz@kdab.com>
Message-ID: <55816AF1.8050805@theqtcompany.com>

> That side might be the vocal majority, too, tramping over the silent majority,
> since I note that QtC is full of namespaces.
>
> Roughly one per library after a quick grep.
>
> If name prefixing is The Way To Go, I wonder why QtC, as the biggest internal
> consumer, and second-biggest producer of Qt API, didn't choose it for its own
> internal structure...?

Most of those classes are namespaced and prefixed at the same time. We probably all agree that we've successfully chosen the worst of both worlds there. Don't use that as reference, please.

regards,
Ulf

From Daniel.Teske at theqtcompany.com  Wed Jun 17 14:54:03 2015
From: Daniel.Teske at theqtcompany.com (Daniel Teske)
Date: Wed, 17 Jun 2015 14:54:03 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506171536.11799.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<D1A718C6.32B50%lars.knoll@theqtcompany.com>
	<201506171536.11799.marc.mutz@kdab.com>
Message-ID: <1772430.aq7UEFt3jF@pegasus>


> Curiously, you didn't list any pro-namespace arguments.

Actually:
>> We couldn?t make things work in a source compatible way.

>> * connect statements are hard with namespaces.

>> * metatype registration is problematic with namespaced types

>> * One of our coding guidelines is that you write code once, but read it
>> many times. Code written should be as self explaining as possible. Having
>> generic class names inside an implicit namespace makes this difficult, as
>> information is not fully local anymore

>> * class name prefixing is a widely used and understood scheme by our
>> users.

You think you have countered all of them. But to claim that there were no pro-
namespace arguments is just wrong.


> But after all I read from the proponents of name prefixing so far, we rather
> need to send the whole QtC bunch to the asylum because they've clearly
> backed themselves into a corner and can't possibly understand their code
> anymore. :)

As a Qt Creator developer, I wouldn't recommend making the Qt API inconsistent
wiht itself by introducing namespaces into a module now.

daniel

From marc.mutz at kdab.com  Wed Jun 17 16:25:10 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Wed, 17 Jun 2015 16:25:10 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <1772430.aq7UEFt3jF@pegasus>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506171536.11799.marc.mutz@kdab.com>
	<1772430.aq7UEFt3jF@pegasus>
Message-ID: <201506171625.11110.marc.mutz@kdab.com>

On Wednesday 17 June 2015 14:54:03 Daniel Teske wrote:
> > Curiously, you didn't list any pro-namespace arguments.
>
> Actually:
> >> We couldn?t make things work in a source compatible way.

not a pro argument

> >> * connect statements are hard with namespaces.

not a pro argument

> >> * metatype registration is problematic with namespaced types

not a pro argument

> >> * One of our coding guidelines is that you write code once, but read it
> >> many times. Code written should be as self explaining as possible.
> >> Having generic class names inside an implicit namespace makes this
> >> difficult, as information is not fully local anymore

not a pro argument

> >> * class name prefixing is a widely used and understood scheme by our
> >> users.

not a pro argument

> You think you have countered all of them. But to claim that there were no
> pro- namespace arguments is just wrong.

Actually: no pro arguments.

What's your point?

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From oswald.buddenhagen at theqtcompany.com  Wed Jun 17 15:55:58 2015
From: oswald.buddenhagen at theqtcompany.com (Oswald Buddenhagen)
Date: Wed, 17 Jun 2015 15:55:58 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <D1A71BE5.32B88%lars.knoll@theqtcompany.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<1570253.cED6mJgAKG@tjmaciei-mobl4>
	<55811B3F.50000@familiesomers.nl>
	<3518460.WoxmWBSvAZ@tjmaciei-mobl4>
	<CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
	<558135DB.4090606@familiesomers.nl>
	<D1A71668.32B1F%lars.knoll@theqtcompany.com>
	<55814D38.1080404@familiesomers.nl>
	<D1A71BE5.32B88%lars.knoll@theqtcompany.com>
Message-ID: <20150617135558.GA2618@troll08.it.local>

On Wed, Jun 17, 2015 at 10:44:38AM +0000, Knoll Lars wrote:
> On 17/06/15 12:34, "Andr? Somers" <andre at familiesomers.nl> wrote:
>
> >Knoll Lars schreef op 17-6-2015 om 12:27:
> >> * We?d still remove the deprecated modules from our Qt 5.6 release
> >>(maybe
> >> with the exception of Qt Script).
> >Is that really needed? For all of the modules? Could Quick 1 stay too?*
> >
> >Andr?
> >  *) Yes, we have a stake in that: The printing case.
>
> As Thiago said, you could still easily use the module on your own. The
> code will not suddenly dissappear from the universe. And we had some
> discussions about how to fix the printing case in Qt Quick 2.
>
tbh, i think thiago is a bit optimistic. the build system has several
files that are internal, and keeping them compatible between releases is
a burden.

the other argument is that it doesn't seem very wise to take the parts
that are effectively still part of the LTS entirely out of our testing
systems. especially as with the new CI, having these modules still in
shouldn't add much cost to the release process.

From thiago.macieira at intel.com  Wed Jun 17 16:31:19 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 17 Jun 2015 07:31:19 -0700
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<3518460.WoxmWBSvAZ@tjmaciei-mobl4>
	<CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
Message-ID: <1917756.J7HkZcVZ8c@tjmaciei-mobl4>

On Wednesday 17 June 2015 10:34:39 Giuseppe D'Angelo wrote:
> > Since 5.5 LTS is an impossibility, the only alternative to minimising the
> > issues is to push the deprecations to 5.7 and do one more "official"
> > release of the to-be-deprecated code in 5.6.
>
> I would agree to this plan; we can deprecate platforms we don't want
> to support long term in 5.5 already, though, which is what has
> happened with QNX. Maybe old OSX as well? GCC 4.4?

Note that doing this means we'll be out-of-sync with the next Ubuntu LTS,
which was one of the goals. We'll be late by a couple of months, which means
the next opportunity won't come for another 18 months.

> I would also push the "C++11 in our API" to 5.7 to minimise the risks.

That's the least of the problems. The deprecations, especially of Qt Quick 1
and QtWebKit, are what people will be complaining about.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From edward.sutton at subsite.com  Wed Jun 17 16:35:25 2015
From: edward.sutton at subsite.com (Edward Sutton)
Date: Wed, 17 Jun 2015 14:35:25 +0000
Subject: [Development] Bluetooth support for Windows (RT/10) in Qt 5.6
In-Reply-To: <CAG5jb=QYtfbjvNmzHigZe6KYHCc2sb1H4-tEuKWgW9RUpaSOWQ@mail.gmail.com>
References: <VI1PR02MB110492B7B1D315BE4B6878E0ECA70@VI1PR02MB1104.eurprd02.prod.outlook.com>
	<5580261C.3040406@csipa.in.rs>
	<CAG5jb=QYtfbjvNmzHigZe6KYHCc2sb1H4-tEuKWgW9RUpaSOWQ@mail.gmail.com>
Message-ID: <FE5986E1-9D2B-4FD5-B40C-866C5676D7C5@subsite.com>

I would like to see Qt Bluetooth support back to Windows 7.  However I agree work priority should be focused on Windows mobile devices.

For Windows 7 support I had to write an abstraction layer for Bluetooth that is implemented using Winsock 2.2.

If Windows 10 and mobile devices drop support for Windsock 2.2, then I totally understand not having the resource for Qt to support all Windows platforms.

-Ed



On Jun 17, 2015, at 3:33 AM, Eric Lemanisser <eric.lemanissier at gmail.com<mailto:eric.lemanissier at gmail.com>> wrote:

Hello,

I totally +1 this feature !
However if I'm not mistaking, focusing on WinRT api discards MinGW compiler, that's bad news for open source tools.

Best regards,

Eric

Le mar. 16 juin 2015 ? 15:35, Attila Csipa <qt at csipa.in.rs<mailto:qt at csipa.in.rs>> a ?crit :
Hi,

A huge +1 on this, BT support on Windows is long overdue.

While there is certainly more inertia in the windows desktop version
than probably any other Qt supported platform, Microsoft itself is
trying to nudge people into quicker upgrade cycles, and while Win8 has
certainly gotten a pushback, with Win10 around the corner I would also
try not to get bogged down with pre-WinRT solutions, as painful as that
might sound in some cases.

Best regards,
Attila

On 6/16/2015 1:42 PM, Kalinowski Maurice wrote:
> Hi everyone,
>
> It might sound weird that while we're trying to get 5.5.0 out I am starting a discussion about Qt 5.6, but if you look at the release schedule there is not much time for the feature freeze
>
> https://wiki.qt.io/Qt-5.6-release
>
> One of the items the Windows / WinRT team would really like to see included to that release is support for Bluetooth and BTLE.
>
> The current idea is to use the WinRT API for that backend, as it provides the advantage that it can also be used on Windows Desktop starting Windows 8(.1). WinRT covers Windows 10 support (both classic and Unified Windows Platform) as well.
>
> This leaves out support for Windows Desktop older than Windows 8. But as we are aiming to implement new features, we should draw the line somewhere and the WinRT backend clearly has the biggest potential to be supported in many years' time, while the (or multiple) pure desktop solution would be deprecated sooner or later again. Also given the fact that we can target quite many platforms with one backend gives us a better coverage for maintenance and resourcing.
>
> The reason that I am mentioning this on the mailing list is that after talking to some folks here in The Qt Company, multiple people inside and outside already started or wanted to start efforts on this topic. Hence the aim of this email is to get everyone connected and work on it together to make it happen within the 5.6 feature freeze.
>
> So, if you have worked on Bluetooth (LE) on Windows or want to, please get in touch with me to align.
>
>
> BR,
> Maurice
>
>
> --------
> Maurice Kalinowski - Senior Manager, Qt Tools
>
> The Qt Company GmbH, Rudower Chaussee 13, D-12489 Berlin
> Gesch?ftsf?hrer: Mika P?lsi, Juha Varelius, Tuula Haataja Sitz der Gesellschaft:
> Berlin, Registergericht: Amtsgericht Charlottenburg, HRB 144331 B
>
> Email: maurice.kalinowski at theqtcompany.com<mailto:maurice.kalinowski at theqtcompany.com> | Mobile: + 49 175 187 19 52 | Phone:
> +49 30 63 92 3255 www.qt.io<http://www.qt.io/> |Qt Blog: http://blog.qt.digia.com/ | Twitter:
> @QtbyDigia, @Qtproject | Facebook: www.facebook.com/qt<http://www.facebook.com/qt>
>
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org<mailto:Development at qt-project.org>
> http://lists.qt-project.org/mailman/listinfo/development

_______________________________________________
Development mailing list
Development at qt-project.org<mailto:Development at qt-project.org>
http://lists.qt-project.org/mailman/listinfo/development
_______________________________________________
Development mailing list
Development at qt-project.org<mailto:Development at qt-project.org>
http://lists.qt-project.org/mailman/listinfo/development

This email and any files transmitted with it from The Charles Machine Works, Inc. are confidential and intended solely for the use of the individual or entity to which they are addressed. If you have received this email in error please notify the sender. Our company accepts no liability for the contents of this email, or for the consequences of any actions taken on the basis of the information provided, unless that information is subsequently confirmed in writing. Please note that any views or opinions presented in this email are solely those of the author and do not necessarily represent those of the company. Finally, the recipient should check this email and any attachments for the presence of viruses. The company accepts no liability for any damage caused by any virus transmitted by this email.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150617/7f91b8a8/attachment-0001.html

From apoenitz at t-online.de  Wed Jun 17 18:50:14 2015
From: apoenitz at t-online.de (=?iso-8859-1?Q?Andr=E9_P=F6nitz?=)
Date: Wed, 17 Jun 2015 18:50:14 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <1917756.J7HkZcVZ8c@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<3518460.WoxmWBSvAZ@tjmaciei-mobl4>
	<CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
	<1917756.J7HkZcVZ8c@tjmaciei-mobl4>
Message-ID: <20150617165014.GA6453@klara.mpi.htwm.de>

On Wed, Jun 17, 2015 at 07:31:19AM -0700, Thiago Macieira wrote:
> On Wednesday 17 June 2015 10:34:39 Giuseppe D'Angelo wrote:
> > > Since 5.5 LTS is an impossibility, the only alternative to minimising the
> > > issues is to push the deprecations to 5.7 and do one more "official"
> > > release of the to-be-deprecated code in 5.6.
> >
> > I would agree to this plan; we can deprecate platforms we don't want
> > to support long term in 5.5 already, though, which is what has
> > happened with QNX. Maybe old OSX as well? GCC 4.4?
>
> Note that doing this means we'll be out-of-sync with the next Ubuntu LTS,
> which was one of the goals. We'll be late by a couple of months, which means
> the next opportunity won't come for another 18 months.

Would be possible to freeze 5.6 right now, and release that quickly
after 5.5 as LTS, already running on the new CI, and do whatever
else was originally planned for 5.6 in 5.7?

Andre'

From thiago.macieira at intel.com  Wed Jun 17 19:29:36 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 17 Jun 2015 10:29:36 -0700
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <20150617165014.GA6453@klara.mpi.htwm.de>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<1917756.J7HkZcVZ8c@tjmaciei-mobl4>
	<20150617165014.GA6453@klara.mpi.htwm.de>
Message-ID: <2948179.5PptTOd4Gu@tjmaciei-mobl4>

On Wednesday 17 June 2015 18:50:14 Andr? P?nitz wrote:
> Would be possible to freeze 5.6 right now, and release that quickly
> after 5.5 as LTS, already running on the new CI, and do whatever
> else was originally planned for 5.6 in 5.7?

I don't think we can do two releases in the next 7 months. We discussed
shortening release cycles again in QtCS but the conclusion was "let's look
into this after the new CI is in place".

Anyway, the main point of decision is whether we want an LTS containing stuff
effectively deprecated. That means maintaining it for a long period, which we
don't want and don't have the manpower for.

It would be the ideal solution, but I simply don't think we could pull it off.
Tough luck.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From gunnar.roth at gmx.de  Wed Jun 17 19:30:25 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Wed, 17 Jun 2015 19:30:25 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <D1A71668.32B1F%lars.knoll@theqtcompany.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<1570253.cED6mJgAKG@tjmaciei-mobl4>
	<55811B3F.50000@familiesomers.nl>
	<3518460.WoxmWBSvAZ@tjmaciei-mobl4>
	<CAPm+cvgCyjJVUcLj4FwJnbUZmbgZRgYCzyt__m2ziw_LzYNyhg@mail.gmail.com>
	<558135DB.4090606@familiesomers.nl>
	<D1A71668.32B1F%lars.knoll@theqtcompany.com>
Message-ID: <31F6F1AF-1921-4A8F-B4E3-ACBAA774C31C@gmx.de>

Hello Lars,
> Am 17.06.2015 um 12:27 schrieb Knoll Lars <Lars.Knoll at theqtcompany.com>:
>
> * We make Qt 5.6 an LTS release

> * We could then have both WEC7 and WEC2013 (on VS2012) supported on 5.6.
> This would solve all problems for Windows Embedded and we could make
> VS2013 the compiler baseline for 5.7.
> we?d keep people on older compilers/OSes happy and we could move
> a lot more aggressively towards C++11 in the dev branch directly after
> summer vacations (from the beginning of August).
>
> Opinions?
>
Yes that would make us (as a commercial user  using a self made port of qt 5.4.1 to wec2013 ) very unhappy. This means 5.6 will be the last version wec2013 would be supported and you would go straight to making a back port very hard or even impossible. Actually we somehow assumed on vs2012  being supported for Qt 5. As we use Qml/QtQuick we would be cut off of this development.

Regards,
Gunnar


From gunnar.roth at gmx.de  Wed Jun 17 19:35:27 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Wed, 17 Jun 2015 19:35:27 +0200
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <22A9AF57-ED3C-4AE9-A8CE-6A7378F659F0@digia.com>
References: <557A7773.3050903@familiesomers.nl>
	<201506121017.21905.marc.mutz@kdab.com>
	<mleri3$rlt$1@ger.gmane.org> <2996357.aFxrkyR603@tjmaciei-mobl4>
	<mlpd70$cti$1@ger.gmane.org>
	<22A9AF57-ED3C-4AE9-A8CE-6A7378F659F0@digia.com>
Message-ID: <D905F083-4385-42F6-822D-FAFCBB1A371A@gmx.de>


> Am 16.06.2015 um 22:49 schrieb Ziller Eike <Eike.Ziller at theqtcompany.com>:
>
>
>> On Jun 16, 2015, at 16:52, Matthew Woehlke <mw_triad at users.sourceforge.net> wrote:
>>
>> On 2015-06-12 17:45, Thiago Macieira wrote:
>>> On Friday 12 June 2015 10:49:38 Matthew Woehlke wrote:
>>>>> On Friday 12 June 2015 08:08:51 Andr? Somers wrote:
>>>>>> Not available for use are:
>>>>>> * = default,
>>>>>> * = deleted,
>>>>
>
> Actually this is not supported in VS2012
> https://msdn.microsoft.com/en-us/library/hh567368.aspx
>
> And Thiago?s link actually lists it under VS2013 as well :)
>
> http://code.woboq.org/qt5/qtbase/src/corelib/global/qcompilerdetection.h.html#851
Thanks Eike, saved my writing that myself.
I thought Thiago is testing me somehow? ;-)

Regards,
Gunnar

From steveire at gmail.com  Wed Jun 17 20:32:48 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Wed, 17 Jun 2015 20:32:48 +0200
Subject: [Development] Some Qt3D feedback
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506111446.20906.marc.mutz@kdab.com>
	<mlchav$7eg$1@ger.gmane.org> <1637657.fa75jvLXrZ@titan>
	<mlchoc$it1$1@ger.gmane.org> <mlq3sn$ci9$1@ger.gmane.org>
	<D1A718C6.32B50%lars.knoll@theqtcompany.com>
Message-ID: <mlsegg$geh$1@ger.gmane.org>

Knoll Lars wrote:

> * Generic and duplicated names from different namespaces can
> easily lead to confusion when reading code.

... and when searching about information about a class by unqualified name.
'QTransform' is now ambiguous to google. If the namespace route is used for
existing modules in the future (for consistency for example), then we'll end
up with lots more of that: 'QNode' in the 'QSG' and 'Qt3D' namespaces,
'QComponent' in the 'QQml' and 'Qt3D' namespaces etc.

I don't at all buy the argument that IDEs can know and show the fully
qualified name and there is therefore no problem. A lot of the time people
are reading code on websites/github/gerrit/code review tools/Stack Overflow
etc and those typically do not provide context, except if by chance.

> * class name prefixing is a widely used and understood scheme by our
> users. Do we really want an inconsistency now in one place? I don?t think
> we have enough arguments to actually go down that route.

Right. That's exactly what started this thread.

> So what do we do with Qt 3D? For 5.5, we?re too late to do any changes.

I do not see the logic in the claim that it is too late for Qt 5.5 but not
too late for Qt 5.6.

> But we?re talking about a Tech Preview here, so we can use it to collect
> some feedback on the namespace usage in there. We will however need to
> decide rather quickly whether we want to keep it or revert to regular Qt
> style class name prefixing for 5.6. I?m currently leaning towards the
> latter.

I agree with ossi that it is unrealistic/dishonest to expect a name
consistency change like this to be done after the Qt 5.5 release. I will be
extremely surprised if something like this changes after Qt 5.5 and before
Qt 5.6. With the help of some sed :) :

 We couldn?t make things work in a source compatible way. Moving from
 Qt3D::QTransform to Q3DTransform is not something you could do in a
 transparent way. We could think about using a 'typedef Q3D::QTransform
 QTransform? for compatibility. But it would break things such as forward
 declarations and typedefs.

The 'technical preview' label won't help. No one will treat the new module
any differently. You will not be able to change the names.

You wouldn't even bump the version of Enginio to fix the multitude of
inconsistencies in that, even though the different version of it was
*supposed* to make such changes and repairs possible. I don't see any way
you would change all these Qt3D names.

But at least we'll get some years of experience and possibly feedback on the
issue, and find a direction to go for consistency later.

*** Change of topic.

It seems that most people, but not everyone, in the discussion see the
inconsistency and there are good reasons that it is not a good thing. It is
also clear that now is not the right time to discuss those reasons, because
we are discussing a decision that was made and committed to already in the
past, instead of discussing something proposed for the future.

The reasons for changing the use of the namespace were not compelling enough
in their own to impel change when I first raised them a week ago. We needed
a week for people to come out of the woodwork and give their view on whether
there is inconsistency introduced (not everyone sees inconsistency here) and
whether that is a good or bad thing.

This is another indication (in addition to the fact that new modules are not
part of headerdiff review) that Qt probably needs to do some thinking about
how new modules are discusssed/reviewed, so that these things can be
resolved when there is time to discuss them calmly.

Thanks,

Steve.



From thiago.macieira at intel.com  Wed Jun 17 22:35:52 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 17 Jun 2015 13:35:52 -0700
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <31F6F1AF-1921-4A8F-B4E3-ACBAA774C31C@gmx.de>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<D1A71668.32B1F%lars.knoll@theqtcompany.com>
	<31F6F1AF-1921-4A8F-B4E3-ACBAA774C31C@gmx.de>
Message-ID: <7474203.0e4yWuBJL2@tjmaciei-mobl4>

On Wednesday 17 June 2015 19:30:25 Gunnar Roth wrote:
> Yes that would make us (as a commercial user  using a self made port of qt
> 5.4.1 to wec2013 ) very unhappy. This means 5.6 will be the last version
> wec2013 would be supported and you would go straight to making a back port
> very hard or even impossible.

WEC 2013 was never considered deprecated. The deprecation applies to WEC 7
only.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From gunnar.roth at gmx.de  Thu Jun 18 08:23:52 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Thu, 18 Jun 2015 08:23:52 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <7474203.0e4yWuBJL2@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<D1A71668.32B1F%lars.knoll@theqtcompany.com>
	<31F6F1AF-1921-4A8F-B4E3-ACBAA774C31C@gmx.de>
	<7474203.0e4yWuBJL2@tjmaciei-mobl4>
Message-ID: <68BC5110-2A62-4C93-8F44-A264F3564C05@gmx.de>


> Am 17.06.2015 um 22:35 schrieb Thiago Macieira <thiago.macieira at intel.com>:
>
> On Wednesday 17 June 2015 19:30:25 Gunnar Roth wrote:
>> Yes that would make us (as a commercial user  using a self made port of qt
>> 5.4.1 to wec2013 ) very unhappy. This means 5.6 will be the last version
>> wec2013 would be supported and you would go straight to making a back port
>> very hard or even impossible.
>
> WEC 2013 was never considered deprecated. The deprecation applies to WEC 7
> only.


Well ok, but how does Lars Knoll?s sentence  "we could make
VS2013 the compiler baseline for 5.7.? fit into this? As the only supported compiler for wec2013 is a cl with  v 17.00 aka vs2012.


Regards,
Gunnar


From thiago.macieira at intel.com  Thu Jun 18 08:43:37 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 17 Jun 2015 23:43:37 -0700
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <68BC5110-2A62-4C93-8F44-A264F3564C05@gmx.de>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<7474203.0e4yWuBJL2@tjmaciei-mobl4>
	<68BC5110-2A62-4C93-8F44-A264F3564C05@gmx.de>
Message-ID: <4306335.Py8U9I4LgU@tjmaciei-mobl4>

On Thursday 18 June 2015 08:23:52 Gunnar Roth wrote:
> > Am 17.06.2015 um 22:35 schrieb Thiago Macieira
> > <thiago.macieira at intel.com>:
> >
> > On Wednesday 17 June 2015 19:30:25 Gunnar Roth wrote:
> >> Yes that would make us (as a commercial user  using a self made port of
> >> qt
> >> 5.4.1 to wec2013 ) very unhappy. This means 5.6 will be the last version
> >> wec2013 would be supported and you would go straight to making a back
> >> port
> >> very hard or even impossible.
> >
> > WEC 2013 was never considered deprecated. The deprecation applies to WEC 7
> > only.
>
> Well ok, but how does Lars Knoll?s sentence  "we could make
> VS2013 the compiler baseline for 5.7.? fit into this? As the only supported
> compiler for wec2013 is a cl with  v 17.00 aka vs2012.

Apparently VS2013 can also be used for WEC2013.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From Maurice.Kalinowski at theqtcompany.com  Thu Jun 18 08:45:57 2015
From: Maurice.Kalinowski at theqtcompany.com (Kalinowski Maurice)
Date: Thu, 18 Jun 2015 06:45:57 +0000
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <4306335.Py8U9I4LgU@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<7474203.0e4yWuBJL2@tjmaciei-mobl4>
	<68BC5110-2A62-4C93-8F44-A264F3564C05@gmx.de>
	<4306335.Py8U9I4LgU@tjmaciei-mobl4>
Message-ID: <VI1PR02MB1104E3D885643C0B5070F354ECA50@VI1PR02MB1104.eurprd02.prod.outlook.com>

> On Thursday 18 June 2015 08:23:52 Gunnar Roth wrote:
> > > Am 17.06.2015 um 22:35 schrieb Thiago Macieira
> > > <thiago.macieira at intel.com>:
> > >
> > > On Wednesday 17 June 2015 19:30:25 Gunnar Roth wrote:
> > >> Yes that would make us (as a commercial user  using a self made
> > >> port of qt
> > >> 5.4.1 to wec2013 ) very unhappy. This means 5.6 will be the last
> > >> version
> > >> wec2013 would be supported and you would go straight to making a
> > >> back port very hard or even impossible.
> > >
> > > WEC 2013 was never considered deprecated. The deprecation applies to
> > > WEC 7 only.
> >
> > Well ok, but how does Lars Knoll?s sentence  "we could make
> > VS2013 the compiler baseline for 5.7.? fit into this? As the only
> > supported compiler for wec2013 is a cl with  v 17.00 aka vs2012.
>
> Apparently VS2013 can also be used for WEC2013.

 [Kalinowski Maurice]
Correct, check the discussion here: https://codereview.qt-project.org/#/c/113276/

As a summary, SDK makers / board vendors can select to include the VS2013 compiler into their package even though the IDE is VS2012 based. However, that puts quite some requirement on the vendor side and that needs to be evaluated.

Maurice


From jani.heikkinen at theqtcompany.com  Thu Jun 18 08:46:12 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Thu, 18 Jun 2015 06:46:12 +0000
Subject: [Development] Qt 5.5.0 RC packages available
Message-ID: <DB3PR02MB05402AF4058CFC626BF7324BE4A50@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi all,


We have finally Qt 5.5.0 RC packages available


Windows: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-17_95/

Linux: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-17_118/

Mac: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/2015-06-17_98/

src: http://download.qt.io/snapshots/qt/5.5/5.5.0-rc/latest_src/


Please check the packages now. If nothing serious found during testing we will release these packages as RC at the beginning of next. So please inform me immediately if you find something broken & blocking the RC


br,

Jani
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150618/ba0067da/attachment.html

From simon.hausmann at theqtcompany.com  Thu Jun 18 09:08:18 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Thu, 18 Jun 2015 09:08:18 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506171536.11799.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<D1A718C6.32B50%lars.knoll@theqtcompany.com>
	<201506171536.11799.marc.mutz@kdab.com>
Message-ID: <1956864.Bn7WECVLkJ@simon-sx58>

On Wednesday, June 17, 2015 03:36:11 PM Marc Mutz wrote:
> On Wednesday 17 June 2015 12:56:54 Knoll Lars wrote:
> [...]
>
> > * connect statements are hard with namespaces. Old style connects could
> > easily break if you forgot to fully qualify a parameter. New style
> > connects might end up with rather ugly looking syntax.
>
> This is nothing new. We have that for nested classes and enums already, as
> well as typedefs.

Right, but that's a _very_ different scale, isn't it?

> If you ban namespaces based on this, you need to ban
> nested types (e.g. error enums), too.

Marc, the goal if this discussion is not to impose a ban of any sorts. I'm not
sure where that term suddenly comes from. Ultimately our goal should be to
find a solution to introduce namespaces in the public API of Qt in a manner
that is consistent, preserves the ease of use of Qt and preserves source
compatibility.

> > * metatype registration is problematic with namespaced types, as the macro
> > extracts the name of the type through the preprocessor. People can very
> > easily end up registering the type multiple times with different
> > (qualified vs non qualified) names.
>
> Same counter-arguments as above, but Q_DECLARE_METATYPE with namespaces is
> actually easily fixed by internally prepending ::, thus making sure the
> argument is a fully-qualified name.

I'm not sure I understand that point. If we have

namespace QtFoo {
    struct MyType {
        ...
    }
    Q_DECLARE_METATYPE(MyType)
}

then how can we register MyType fully qualified in the type system?

Or would the idea be to place the Q_DECLARE_METATYPE outside of the namespace?

> > * One of our coding guidelines is that you write code once, but read it
> > many times. Code written should be as self explaining as possible. Having
> > generic class names inside an implicit namespace makes this difficult, as
> > information is not fully local anymore (you have to know that there?s a
> > using directive at the beginning of the file to find the proper qualified
> > class name). Generic and duplicated names from different namespaces can
> > easily lead to confusion when reading code. (btw, this is also an argument
> > against over-using auto)
>
> Purely subjective, and highly controversial in the wider C++ community (with
> the controversity mainly between Qt and the rest of C++, afaict).

Whether or not that is controversial in the wider C++ community is by itself
controversial ;-). At this point I would argue that we lack data from people
who are enjoying the Qt API as it is today and people who do not like it.
Unfortunately I don't think that we can sensibly collect the data, so I think
it remains a controversy.

> > * class name prefixing is a widely used and understood scheme by our
> > users. Do we really want an inconsistency now in one place? I don?t think
> > we have enough arguments to actually go down that route.
>
> Show me one C++ library not of Qt origin that uses class name prefixes not
> due to backwards compatibility concerns.

Can you elaborate how the question relates to the argument?

> [...]
>
> > At the same time, I think we should start experimenting with namespaces
> > for Qt types. A way to do that that doesn?t disrupt current Qt development
> > is by adding headers that put the types into namespaces:
> >
> > --
> > #include <QtCoreNamespace>
> >
> > QtCoreNamespace:
> >
> > class QObject;
> > namespace QtCore { // or should this simply be Qt?
> >
> >     using ::QObject as Object;
>
> This will exacerbate the problems you mentioned before, since every type
> will have two names, and there goes consistency...
>
> >     // or
> >     class Object : public QObject {
> >
> > 	using QObject::QObject;
> >
> >     }
>
> This requires C++11 and makes Qt::Object and QObject distinct types. In
> particular, a cast from QLineEdit to Qt::Object is invalid, as QLineEdit is-
> not-a Qt::Object. It also doesn't work for value tyoes.
>
> > Not sure this would work perfectly,
>
> it wouldn't.
>
> > but it might be worth a try :)
>
> it isn't.
>
> I'm sorry, but this mail contains no arguments against *namespaces*. It
> contains _some_ arguments against *nested types*, but Qt already widely
> violates that.
>
> Curiously, you didn't list any pro-namespace arguments. I don't know what to
> make of this, but I fear that a decision is being made based solely on
> arguments from one side.

I think there are two decisions on the table:

1) What do we do in the short term with Qt3D in relation to the rest of Qt?

2) What are the things that we need to do to properly support namespaces in
the API throughout the entire framework. (hence the point about run-time
aspects of the meta-type system and the moc)


Some people (including myself) are concerned that one module with extensive
use of namespaces in the public API will introduce an unfortunate
inconsistency. The other concern is that namespaces are not well supported yet
by the moc and the meta-type system.

For your response to the idea of experimenting with namespaces I do get the
impression that you don't think that it is possible to introduce namespaces
globally. Is that impression true?

In the event of it being true, does that mean that in your opinion we have no
choice but _do_ have some modules use namespaces in the API and others don't?

> That side might be the vocal majority, too, tramping over the silent
> majority, since I note that QtC is full of namespaces.

How does Qt related to QtC when the context is the public framework API?


Simon

From marc.mutz at kdab.com  Thu Jun 18 10:19:28 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 18 Jun 2015 10:19:28 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <mlsegg$geh$1@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<D1A718C6.32B50%lars.knoll@theqtcompany.com>
	<mlsegg$geh$1@ger.gmane.org>
Message-ID: <201506181019.28207.marc.mutz@kdab.com>

On Wednesday 17 June 2015 20:32:48 Stephen Kelly wrote:
> It seems that most people, but not everyone, in the discussion see the
> inconsistency and there are good reasons that it is not a good thing.

I *do* see the inconsistency. I'm just not convinced that it *matters*.

Paraphrasing Sharekspeare:
   What's in a name?
   that which we call a Qt3D::QTransform
   By any other name would work as well.

IMHO, the fact that our implicitly-shared value types have an even chance of
having or not having a move constructor[1] is something much more worrisome
than the imminently bike-shaddable question of Qt3DTransform vs.
Qt3D::QTransfom vs. Qt3D::Transform.

People *will* deal with namespaces just fine - they've been doing so since the
first C++ standard came out, incl. the transition from non-std:: to std::names
- but they *cannot* tolarate the 10x (H. Hinnant) slowdown when resizing a
vector<QFoo>, just because there's no QFoo move ctor or it's not marked as
noexcept.

[1] those that use a naked d-pointer have (inline) move ctors, those that use
a smart d-pointer would have to define it out-of-line, thus the C++98/11 BC
requirement makes it impossible to add them atm.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From dangelog at gmail.com  Thu Jun 18 09:18:15 2015
From: dangelog at gmail.com (Giuseppe D'Angelo)
Date: Thu, 18 Jun 2015 09:18:15 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <1956864.Bn7WECVLkJ@simon-sx58>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<D1A718C6.32B50%lars.knoll@theqtcompany.com>
	<201506171536.11799.marc.mutz@kdab.com>
	<1956864.Bn7WECVLkJ@simon-sx58>
Message-ID: <CAPm+cvhLah00HQ7zYFdzrPe5x-0-iu2sDbGcFjWB2cxO20jRyQ@mail.gmail.com>

On Thu, Jun 18, 2015 at 9:08 AM, Simon Hausmann
<simon.hausmann at theqtcompany.com> wrote:
> Or would the idea be to place the Q_DECLARE_METATYPE outside of the namespace?

Why "the idea"? It's the way it's supposed to be used right now.

Cheers,
--
Giuseppe D'Angelo

From andre at familiesomers.nl  Thu Jun 18 09:18:56 2015
From: andre at familiesomers.nl (=?UTF-8?B?QW5kcsOpIFNvbWVycw==?=)
Date: Thu, 18 Jun 2015 09:18:56 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <1956864.Bn7WECVLkJ@simon-sx58>
References: <ml2j2r$eg3$1@ger.gmane.org>	<D1A718C6.32B50%lars.knoll@theqtcompany.com>	<201506171536.11799.marc.mutz@kdab.com>
	<1956864.Bn7WECVLkJ@simon-sx58>
Message-ID: <558270E0.1070002@familiesomers.nl>

Simon Hausmann schreef op 18-6-2015 om 09:08:
>
>>> * metatype registration is problematic with namespaced types, as the macro
>>> extracts the name of the type through the preprocessor. People can very
>>> easily end up registering the type multiple times with different
>>> (qualified vs non qualified) names.
>> Same counter-arguments as above, but Q_DECLARE_METATYPE with namespaces is
>> actually easily fixed by internally prepending ::, thus making sure the
>> argument is a fully-qualified name.
> I'm not sure I understand that point. If we have
>
> namespace QtFoo {
>      struct MyType {
>          ...
>      }
>      Q_DECLARE_METATYPE(MyType)
> }
>
> then how can we register MyType fully qualified in the type system?
>
> Or would the idea be to place the Q_DECLARE_METATYPE outside of the namespace?
That would be consistent with how you are supposed to declare things
like enums inside classes right now, so yes, that makes perfect sense.

Andr?


From gunnar.roth at gmx.de  Thu Jun 18 10:08:08 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Thu, 18 Jun 2015 10:08:08 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <VI1PR02MB1104E3D885643C0B5070F354ECA50@VI1PR02MB1104.eurprd02.prod.outlook.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<7474203.0e4yWuBJL2@tjmaciei-mobl4>
	<68BC5110-2A62-4C93-8F44-A264F3564C05@gmx.de>
	<4306335.Py8U9I4LgU@tjmaciei-mobl4>,
	<VI1PR02MB1104E3D885643C0B5070F354ECA50@VI1PR02MB1104.eurprd02.prod.outlook.com>
Message-ID: <trinity-4d62c95d-6598-4343-ad37-b2475b4c9607-1434614888705@3capp-gmx-bs11>

An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150618/883e32b3/attachment.html

From gunnar.roth at gmx.de  Thu Jun 18 10:16:49 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Thu, 18 Jun 2015 10:16:49 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <4306335.Py8U9I4LgU@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<7474203.0e4yWuBJL2@tjmaciei-mobl4>
	<68BC5110-2A62-4C93-8F44-A264F3564C05@gmx.de>,
	<4306335.Py8U9I4LgU@tjmaciei-mobl4>
Message-ID: <trinity-cbc244ad-1784-4a3f-8df8-359aa28f332c-1434615409573@3capp-gmx-bs71>


?
?

Gesendet:?Donnerstag, 18. Juni 2015 um 08:43 Uhr
Von:?"Thiago Macieira" <thiago.macieira at intel.com>
An:?development at qt-project.org
Betreff:?Re: [Development] QtCS: Long Term Release discussion
On Thursday 18 June 2015 08:23:52 Gunnar Roth wrote:
> > Am 17.06.2015 um 22:35 schrieb Thiago Macieira
> > <thiago.macieira at intel.com>:
> >
>> > On Wednesday 17 June 2015 19:30:25 Gunnar Roth wrote:
>> >> Yes that would make us (as a commercial user using a self made port of
>> >> qt
>> >> 5.4.1 to wec2013 ) very unhappy. This means 5.6 will be the last version
>> >> wec2013 would be supported and you would go straight to making a back
>> >> port
>> >> very hard or even impossible.
>> >
>> > WEC 2013 was never considered deprecated. The deprecation applies to WEC 7
>> > only.
>>
>> Well ok, but how does Lars Knoll?s sentence "we could make
>> VS2013 the compiler baseline for 5.7.? fit into this? As the only supported
>> compiler for wec2013 is a cl with v 17.00 aka vs2012.

>Apparently VS2013 can also be used for WEC2013.

IDE: yes
Compiler: No

This was recently confirmed to as by microsoft. The used compiler comes from the platfrombuilder wince800 tree, which is independent from the used IDE. The sdk wec2013 compiler form wec2013 qfe M08 has this version:
Microsoft (R) C/C++ Optimizing Compiler Version 17.00.50728.6 for ARM

the vs2012 arm compiler ( which is meant  for win pohne and winrt) has :
Microsoft (R) C/C++ Optimizing Compiler Version 17.00.61030 for ARM

I don't think the possible usage of the vs2013 ide has any impact on qt development.
?
Regards,
Gunnar
?
?
?

From sean.harmer at kdab.com  Thu Jun 18 10:22:07 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Thu, 18 Jun 2015 09:22:07 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <CAPm+cvhLah00HQ7zYFdzrPe5x-0-iu2sDbGcFjWB2cxO20jRyQ@mail.gmail.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <1956864.Bn7WECVLkJ@simon-sx58>
	<CAPm+cvhLah00HQ7zYFdzrPe5x-0-iu2sDbGcFjWB2cxO20jRyQ@mail.gmail.com>
Message-ID: <12591655.XmIx5i17kr@cartman>

On Thursday 18 Jun 2015 09:18:15 Giuseppe D'Angelo wrote:
> On Thu, Jun 18, 2015 at 9:08 AM, Simon Hausmann
>
> <simon.hausmann at theqtcompany.com> wrote:
> > Or would the idea be to place the Q_DECLARE_METATYPE outside of the
> > namespace?
> Why "the idea"? It's the way it's supposed to be used right now.

Indeed, and we've been using it extensively and have not encountered any
blockers with moc or the metatype system thus far. So in our experience there
are no technical blockers.

Qt3D is only a tech preview in 5.5 so we are free to change it at will. I'd
suggest we leave it as is for 5.5.0. For 5.5.1 I'd propose we resolve the
small namespace inconsistencies between the QML and C++ APIs as discussed
elsewhere in this thread and see how users get on with that with a view to
using it as a way of testing the waters for a larger rollout of namespaces for
Qt 6. I'd propose to do this in the way that was tabled during the development
of Qt5 but which we failed to enact upon.

For a new module I really don't see the small inconsistency c.f. the rest of
Qt of using namespaces as an issue - especially given the other
inconsistencies that have been discussed. Users will cope with this, I'm sure.

I am happy to document this on the wiki as guideline proposal for new modules
as Sze-Howe suggested.

Cheers,

Sean
--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
KDAB (UK) Ltd, a KDAB Group company
Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
Mobile: +44 (0)7545 140604
KDAB - Qt Experts

From bjoern.breitmeyer at kdab.com  Thu Jun 18 10:41:24 2015
From: bjoern.breitmeyer at kdab.com (=?ISO-8859-1?Q?Bj=F6rn?= Breitmeyer)
Date: Thu, 18 Jun 2015 10:41:24 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <trinity-cbc244ad-1784-4a3f-8df8-359aa28f332c-1434615409573@3capp-gmx-bs71>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<4306335.Py8U9I4LgU@tjmaciei-mobl4>
	<trinity-cbc244ad-1784-4a3f-8df8-359aa28f332c-1434615409573@3capp-gmx-bs71>
Message-ID: <2003164.eSYExoa6v3@bjoern-upc.site>

Hello Gunnar,

i still hadn't time to verify this, but. There is a platform builder for
WEC2013, if you generate the SDk with that one it should have the Visual
Studio 2013 compiler, at least thats how i read the knowledgebase article.
Its on my TODO list to verify this, but i still didn't had the time to do so.

Best regards
Bj?rn Breitmeyer

--
Bj?rn Breitmeyer | bjoern.breitmeyer at kdab.com | Senior Software Engineer
KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
Germany: +49-30-521325470, Sweden (HQ): +46-563-540090
KDAB - Qt Experts - Platform-independent software solutions
Am Donnerstag, 18. Juni 2015, 10:16:49 schrieb Gunnar Roth:
> Gesendet: Donnerstag, 18. Juni 2015 um 08:43 Uhr
> Von: "Thiago Macieira" <thiago.macieira at intel.com>
> An: development at qt-project.org
> Betreff: Re: [Development] QtCS: Long Term Release discussion
>
> On Thursday 18 June 2015 08:23:52 Gunnar Roth wrote:
> > > Am 17.06.2015 um 22:35 schrieb Thiago Macieira
> > >
> > > <thiago.macieira at intel.com>:
> >> > On Wednesday 17 June 2015 19:30:25 Gunnar Roth wrote:
> >> >> Yes that would make us (as a commercial user using a self made port of
> >> >> qt
> >> >> 5.4.1 to wec2013 ) very unhappy. This means 5.6 will be the last
> >> >> version
> >> >> wec2013 would be supported and you would go straight to making a back
> >> >> port
> >> >> very hard or even impossible.
> >> >
> >> > WEC 2013 was never considered deprecated. The deprecation applies to
> >> > WEC 7
> >> > only.
> >>
> >> Well ok, but how does Lars Knoll?s sentence "we could make
> >> VS2013 the compiler baseline for 5.7.? fit into this? As the only
> >> supported
> >> compiler for wec2013 is a cl with v 17.00 aka vs2012.
> >
> >Apparently VS2013 can also be used for WEC2013.
>
> IDE: yes
> Compiler: No
>
> This was recently confirmed to as by microsoft. The used compiler comes from
> the platfrombuilder wince800 tree, which is independent from the used IDE.
> The sdk wec2013 compiler form wec2013 qfe M08 has this version: Microsoft
> (R) C/C++ Optimizing Compiler Version 17.00.50728.6 for ARM
>
> the vs2012 arm compiler ( which is meant  for win pohne and winrt) has :
> Microsoft (R) C/C++ Optimizing Compiler Version 17.00.61030 for ARM
>
> I don't think the possible usage of the vs2013 ide has any impact on qt
> development.
> Regards,
> Gunnar
>
>
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 5920 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150618/564c52da/attachment.bin

From bjoern.breitmeyer at kdab.com  Thu Jun 18 10:41:39 2015
From: bjoern.breitmeyer at kdab.com (=?ISO-8859-1?Q?Bj=F6rn?= Breitmeyer)
Date: Thu, 18 Jun 2015 10:41:39 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <trinity-cbc244ad-1784-4a3f-8df8-359aa28f332c-1434615409573@3capp-gmx-bs71>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<4306335.Py8U9I4LgU@tjmaciei-mobl4>
	<trinity-cbc244ad-1784-4a3f-8df8-359aa28f332c-1434615409573@3capp-gmx-bs71>
Message-ID: <1658905.xOoWYvr2Hh@bjoern-upc.site>

Sorry Visual Studio 2013

--
Bj?rn Breitmeyer | bjoern.breitmeyer at kdab.com | Senior Software Engineer
KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
Germany: +49-30-521325470, Sweden (HQ): +46-563-540090
KDAB - Qt Experts - Platform-independent software solutions
Am Donnerstag, 18. Juni 2015, 10:16:49 schrieb Gunnar Roth:
> Gesendet: Donnerstag, 18. Juni 2015 um 08:43 Uhr
> Von: "Thiago Macieira" <thiago.macieira at intel.com>
> An: development at qt-project.org
> Betreff: Re: [Development] QtCS: Long Term Release discussion
>
> On Thursday 18 June 2015 08:23:52 Gunnar Roth wrote:
> > > Am 17.06.2015 um 22:35 schrieb Thiago Macieira
> > >
> > > <thiago.macieira at intel.com>:
> >> > On Wednesday 17 June 2015 19:30:25 Gunnar Roth wrote:
> >> >> Yes that would make us (as a commercial user using a self made port of
> >> >> qt
> >> >> 5.4.1 to wec2013 ) very unhappy. This means 5.6 will be the last
> >> >> version
> >> >> wec2013 would be supported and you would go straight to making a back
> >> >> port
> >> >> very hard or even impossible.
> >> >
> >> > WEC 2013 was never considered deprecated. The deprecation applies to
> >> > WEC 7
> >> > only.
> >>
> >> Well ok, but how does Lars Knoll?s sentence "we could make
> >> VS2013 the compiler baseline for 5.7.? fit into this? As the only
> >> supported
> >> compiler for wec2013 is a cl with v 17.00 aka vs2012.
> >
> >Apparently VS2013 can also be used for WEC2013.
>
> IDE: yes
> Compiler: No
>
> This was recently confirmed to as by microsoft. The used compiler comes from
> the platfrombuilder wince800 tree, which is independent from the used IDE.
> The sdk wec2013 compiler form wec2013 qfe M08 has this version: Microsoft
> (R) C/C++ Optimizing Compiler Version 17.00.50728.6 for ARM
>
> the vs2012 arm compiler ( which is meant  for win pohne and winrt) has :
> Microsoft (R) C/C++ Optimizing Compiler Version 17.00.61030 for ARM
>
> I don't think the possible usage of the vs2013 ide has any impact on qt
> development.
> Regards,
> Gunnar
>
>
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 5920 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150618/4f4414d2/attachment-0001.bin

From gunnar.roth at gmx.de  Thu Jun 18 11:00:30 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Thu, 18 Jun 2015 11:00:30 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <2003164.eSYExoa6v3@bjoern-upc.site>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<4306335.Py8U9I4LgU@tjmaciei-mobl4>
	<trinity-cbc244ad-1784-4a3f-8df8-359aa28f332c-1434615409573@3capp-gmx-bs71>,
	<2003164.eSYExoa6v3@bjoern-upc.site>
Message-ID: <trinity-53c31035-eb90-4d77-b553-8f24dbe94636-1434618030623@3capp-gmx-bs71>

An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150618/e73db916/attachment.html

From Lars.Knoll at theqtcompany.com  Thu Jun 18 11:37:48 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Thu, 18 Jun 2015 09:37:48 +0000
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506171536.11799.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <mlq3sn$ci9$1@ger.gmane.org>
	<D1A718C6.32B50%lars.knoll@theqtcompany.com>
	<201506171536.11799.marc.mutz@kdab.com>
Message-ID: <EF7335AF-729D-4A67-BF35-36396364EDF1@theqtcompany.com>






On 17/06/15 15:36, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Marc Mutz" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of marc.mutz at kdab.com> wrote:

>On Wednesday 17 June 2015 12:56:54 Knoll Lars wrote:
>[...]
>> * connect statements are hard with namespaces. Old style connects could
>> easily break if you forgot to fully qualify a parameter. New style
>> connects might end up with rather ugly looking syntax.
>
>This is nothing new. We have that for nested classes and enums already, as
>well as typedefs. If you ban namespaces based on this, you need to ban nested
>types (e.g. error enums), too.

It's a question of how often you face these issues. Inner classes are not that common in Qt and even less commonly passed through signals/slots.

>
>> * metatype registration is problematic with namespaced types, as the macro
>> extracts the name of the type through the preprocessor. People can very
>> easily end up registering the type multiple times with different
>> (qualified vs non qualified) names.
>
>Same counter-arguments as above, but Q_DECLARE_METATYPE with namespaces is
>actually easily fixed by internally prepending ::, thus making sure the
>argument is a fully-qualified name.

True. That's a good way to enforce a fully qualified name inside the macro. I like it, as it helps fixing this in the general case. We should probably do that for 5.6, as it'll help catch coding errors at compile time.
>
>> * One of our coding guidelines is that you write code once, but read it
>> many times. Code written should be as self explaining as possible. Having
>> generic class names inside an implicit namespace makes this difficult, as
>> information is not fully local anymore (you have to know that there?s a
>> using directive at the beginning of the file to find the proper qualified
>> class name). Generic and duplicated names from different namespaces can
>> easily lead to confusion when reading code. (btw, this is also an argument
>> against over-using auto)
>
>Purely subjective, and highly controversial in the wider C++ community (with
>the controversity mainly between Qt and the rest of C++, afaict).

Could be that others have decided differently. But it's a decision we did take some years ago. But I personally don't think leaving out the prefixes leads to more readable code in the general case (where you mix a couple of different modules/namespaces).
>
>> * class name prefixing is a widely used and understood scheme by our
>> users. Do we really want an inconsistency now in one place? I don?t think
>> we have enough arguments to actually go down that route.
>
>Show me one C++ library not of Qt origin that uses class name prefixes not due
>to backwards compatibility concerns.

Most of those are single standalong libraries, not a large collection as we have here. So the preconditions are a bit different as well.
>
>[...]
>> At the same time, I think we should start experimenting with namespaces
>> for Qt types. A way to do that that doesn?t disrupt current Qt development
>> is by adding headers that put the types into namespaces:
>>
>> --
>> #include <QtCoreNamespace>
>>
>> QtCoreNamespace:
>>
>> class QObject;
>> namespace QtCore { // or should this simply be Qt?
>>     using ::QObject as Object;
>
>This will exacerbate the problems you mentioned before, since every type will
>have two names, and there goes consistency...

I was talking about experimenting, not making this part of any product. So convert some piece of code to see how things feel. Currently we have little experience how this would work with our multitude of libraries.
>
>
>>     // or
>>     class Object : public QObject {
>> 	using QObject::QObject;
>>     }
>
>This requires C++11 and makes Qt::Object and QObject distinct types. In
>particular, a cast from QLineEdit to Qt::Object is invalid, as QLineEdit is-
>not-a Qt::Object. It also doesn't work for value tyoes.
>
>
>>
>> Not sure this would work perfectly,
>
>it wouldn't.
>
>> but it might be worth a try :)
>
>it isn't.
>
>I'm sorry, but this mail contains no arguments against *namespaces*. It
>contains _some_ arguments against *nested types*, but Qt already widely
>violates that.
>
>Curiously, you didn't list any pro-namespace arguments. I don't know what to
>make of this, but I fear that a decision is being made based solely on
>arguments from one side.

So what are the arguments from your point of view then? Apart from namespaces being in fashion.
>
>That side might be the vocal majority, too, tramping over the silent majority,
>since I note that QtC is full of namespaces.
>
>Roughly one per library after a quick grep.
>
>If name prefixing is The Way To Go, I wonder why QtC, as the biggest internal
>consumer, and second-biggest producer of Qt API, didn't choose it for its own
>internal structure...?
>
>*And* they are using using directives all over the place. More than 2000.
>Maybe the devs over there got tired of typing QtCreatorCMakeProjectManager....
>and QtCreatorCoreInternalDesignModeCoreListener? Maybe QtC already *has* the
>experience with namespaces we think we first needed to gather?

Maybe. But if so we haven't clearly heard statements from that side. But please also remember that there are differences between doing APIs/frameworks and doing apps.

Cheers,
Lars

>
>But after all I read from the proponents of name prefixing so far, we rather
>need to send the whole QtC bunch to the asylum because they've clearly backed
>themselves into a corner and can't possibly understand their code anymore. :)
>
>Thanks,
>Marc
>
>--
>Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
>KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
>Tel: +49-30-521325470
>KDAB - The Qt Experts
>_______________________________________________
>Development mailing list
>Development at qt-project.org
>http://lists.qt-project.org/mailman/listinfo/development

From marc.mutz at kdab.com  Thu Jun 18 12:45:53 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 18 Jun 2015 12:45:53 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <1956864.Bn7WECVLkJ@simon-sx58>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506171536.11799.marc.mutz@kdab.com>
	<1956864.Bn7WECVLkJ@simon-sx58>
Message-ID: <201506181245.54698.marc.mutz@kdab.com>

On Thursday 18 June 2015 09:08:18 Simon Hausmann wrote:
> On Wednesday, June 17, 2015 03:36:11 PM Marc Mutz wrote:
> > On Wednesday 17 June 2015 12:56:54 Knoll Lars wrote:
> > [...]
> >
> > > * connect statements are hard with namespaces. Old style connects could
> > > easily break if you forgot to fully qualify a parameter. New style
> > > connects might end up with rather ugly looking syntax.
> >
> > This is nothing new. We have that for nested classes and enums already,
> > as well as typedefs.
>
> Right, but that's a _very_ different scale, isn't it?

No. How many people, do you think, use
QAbstractSocket::error(QAbstractSocket::SocketError), compared to, say, Qt3D?
I'd say: more.

> > If you ban namespaces based on this, you need to ban
> > nested types (e.g. error enums), too.
>
> Marc, the goal if this discussion is not to impose a ban of any sorts. I'm
> not sure where that term suddenly comes from. Ultimately our goal should
> be to find a solution to introduce namespaces in the public API of Qt in a
> manner that is consistent, preserves the ease of use of Qt and preserves
> source compatibility.

It was already determined, when going from Qt 4 to 5, that you cannot make the
switch to namespaces in a souce-compatible manner. Insisting on source-
compatibility, having ruled out the new ideas Lars included in his mail, thus
constitues a ban of namespaces until source incompatibilites are acceptable
again (if they ever will be).

> > > * metatype registration is problematic with namespaced types, as the
> > > macro extracts the name of the type through the preprocessor. People
> > > can very easily end up registering the type multiple times with
> > > different (qualified vs non qualified) names.
> >
> > Same counter-arguments as above, but Q_DECLARE_METATYPE with namespaces
> > is actually easily fixed by internally prepending ::, thus making sure
> > the argument is a fully-qualified name.
>
> I'm not sure I understand that point. If we have
>
> namespace QtFoo {
>     struct MyType {
>         ...
>     }
>     Q_DECLARE_METATYPE(MyType)
> }
>
> then how can we register MyType fully qualified in the type system?
>
> Or would the idea be to place the Q_DECLARE_METATYPE outside of the
> namespace?

As others have already pointed out, Q_DECLARE_METATYPE needs to be outside any
namespace. The reason is that it internally QT_BEGIN_NAMESPACEs.

> > > * One of our coding guidelines is that you write code once, but read it
> > > many times. Code written should be as self explaining as possible.
> > > Having generic class names inside an implicit namespace makes this
> > > difficult, as information is not fully local anymore (you have to know
> > > that there?s a using directive at the beginning of the file to find
> > > the proper qualified class name). Generic and duplicated names from
> > > different namespaces can easily lead to confusion when reading code.
> > > (btw, this is also an argument against over-using auto)
> >
> > Purely subjective, and highly controversial in the wider C++ community
> > (with the controversity mainly between Qt and the rest of C++, afaict).
>
> Whether or not that is controversial in the wider C++ community is by
> itself controversial ;-). At this point I would argue that we lack data
> from people who are enjoying the Qt API as it is today and people who do
> not like it. Unfortunately I don't think that we can sensibly collect the
> data, so I think it remains a controversy.

As a decade-long consumer of Qt API, and only recent contributor, I can tell
you that what matters is not the name or classes (as long as they start with a
Q), but the names and semantics of functions, and the order of constructor
arguments. If class name consistency was an issue, then QTextEdit would have
been called QMultiLineEdit or QLineEdit would have been called QTextLineEdit.

As a decade-long consumer and producer of KDE API, I can tell you that I never
found the use of namespaces in public KDE api irritating or whatever.

> > > * class name prefixing is a widely used and understood scheme by our
> > > users. Do we really want an inconsistency now in one place? I don?t
> > > think we have enough arguments to actually go down that route.
> >
> > Show me one C++ library not of Qt origin that uses class name prefixes
> > not due to backwards compatibility concerns.
>
> Can you elaborate how the question relates to the argument?

It relates to the claim in the quoted text that name prefixing is widely used
and understood by users. IMO, namespaces are even more widely used, as well as
sufficiently well understood inside C++ and outside Qt. Proof: std:. and
boost:: are used in more projects than is Qt. In fact, I don't know any C++
library that uses namespace prefixing that hasn't gotten this from Qt (KDE).

> I think there are two decisions on the table:
>
> 1) What do we do in the short term with Qt3D in relation to the rest of Qt?
>
> 2) What are the things that we need to do to properly support namespaces in
> the API throughout the entire framework. (hence the point about run-time
> aspects of the meta-type system and the moc)

I don't see a consensus for moving to namespaces. I see suggestions for
experiments, with claims that stuff should stay SC. I see claims that either
the :: is superfluous or else the using directives obfuscate the code.

The meta-type system and moc are perfectly fine with namespaces. If people
would just peek over their own noses and over to your cousin, KDE, you'd see
that, say, kdepimlibs would have a very hard time indeed, if QMetaType or moc
would have any trouble with namespaces whatsoever.

> Some people (including myself) are concerned that one module with extensive
> use of namespaces in the public API will introduce an unfortunate
> inconsistency. The other concern is that namespaces are not well supported
> yet by the moc and the meta-type system.
>
> For your response to the idea of experimenting with namespaces I do get the
> impression that you don't think that it is possible to introduce namespaces
> globally. Is that impression true?

I'm not sure I understand what you mean with "globally". I'm quite certain
that Qt cannot move to the use of namespaces in a SC way. Not if the types are
actually namespaced. You can, of course, say

    namespace QtCore { using Object = ::QObject; }

in every header file, but that's rather ridiculously inconsistent as every API
user will choose differently between QtCore::Object and QObject.

> In the event of it being true, does that mean that in your opinion we have
> no choice but _do_ have some modules use namespaces in the API and others
> don't?

_I_ have no problem breaking SC come Qt 6 and move to either QtCore::Object or
QtCore::QObject globally. You need to ask those who don't think a SC breakage
of that dimension is acceptable for how they will _ever_ introduce namespaces
into existing libraries, then. At the same time, I don't see why a new module
shouldn't use the QtModule namespace from its inception - saves porting come
Qt 6.

> > That side might be the vocal majority, too, tramping over the silent
> > majority, since I note that QtC is full of namespaces.
>
> How does Qt related to QtC when the context is the public framework API?

You snipped where I say that I consider QtC the second-biggest internal
producer of Qt-ish API (for plugins, say), after Qt itself.

But if you don't agree, then s/QtC/KDE/.

Thanks,
Marc


--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From bjoern.breitmeyer at kdab.com  Thu Jun 18 11:48:18 2015
From: bjoern.breitmeyer at kdab.com (=?ISO-8859-1?Q?Bj=F6rn?= Breitmeyer)
Date: Thu, 18 Jun 2015 11:48:18 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <trinity-53c31035-eb90-4d77-b553-8f24dbe94636-1434618030623@3capp-gmx-bs71>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<2003164.eSYExoa6v3@bjoern-upc.site>
	<trinity-53c31035-eb90-4d77-b553-8f24dbe94636-1434618030623@3capp-gmx-bs71>
Message-ID: <3588856.nRQqz8sQHe@bjoern-upc.site>

That would be this one,

https://msdn.microsoft.com/en-us/library/gg154234.aspx

btw, i would assume the use of the newer libstdc++ if i got it right, as that
one comes from the sdk too. But maybe i am wrong, didn't gave this a lot of
time yet, which is why i couldn't test it yet.

--
Bj?rn Breitmeyer | bjoern.breitmeyer at kdab.com | Senior Software Engineer
KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
Germany: +49-30-521325470, Sweden (HQ): +46-563-540090
KDAB - Qt Experts - Platform-independent software solutions
Am Donnerstag, 18. Juni 2015, 11:00:30 schrieb Gunnar Roth:
> Hi Bj?rn,
> what is "the knowledgebase article"? Would you mind to share a link?
>
> And even if there would be a v18.00 compiler, what about the standard c++
> library (headers, libs and dlls) where do they come from? Or would then a
> mix of newer compiler and older std c++ libary be used? That could be quite
> problematic haven such a mix leading to unpredictable behaviour from a
> programmers view. Qt could then not say, vs2013 is the base, but only
> vs2013 compiler with vs12012 std libary. Sound crazy...
> Regards,
> Gunnar
>
>
>
> Gesendet: Donnerstag, 18. Juni 2015 um 10:41 Uhr
> Von: "Bj?rn Breitmeyer" <bjoern.breitmeyer at kdab.com>
> An: development at qt-project.org
> Cc: "Gunnar Roth" <gunnar.roth at gmx.de>, "Thiago Macieira"
> <thiago.macieira at intel.com> Betreff: Re: [Development] QtCS: Long Term
> Release discussion
> Hello Gunnar,
>
> i still hadn't time to verify this, but. There is a platform builder for
> WEC2013, if you generate the SDk with that one it should have the Visual
> Studio 2013 compiler, at least thats how i read the knowledgebase article.
> Its on my TODO list to verify this, but i still didn't had the time to do
> so.
>
> Best regards
> Bj?rn Breitmeyer
>
> --
> Bj?rn Breitmeyer | bjoern.breitmeyer at kdab.com | Senior Software Engineer
> KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
> Germany: +49-30-521325470, Sweden (HQ): +46-563-540090
> KDAB - Qt Experts - Platform-independent software solutions
>
> Am Donnerstag, 18. Juni 2015, 10:16:49 schrieb Gunnar Roth:
> > Gesendet: Donnerstag, 18. Juni 2015 um 08:43 Uhr
> > Von: "Thiago Macieira" <thiago.macieira at intel.com>
> > An: development at qt-project.org
> > Betreff: Re: [Development] QtCS: Long Term Release discussion
> >
> > On Thursday 18 June 2015 08:23:52 Gunnar Roth wrote:
> > > > Am 17.06.2015 um 22:35 schrieb Thiago Macieira
> > > >
> > > > <thiago.macieira at intel.com>:
> > >> > On Wednesday 17 June 2015 19:30:25 Gunnar Roth wrote:
> > >> >> Yes that would make us (as a commercial user using a self made port
> > >> >> of
> > >> >> qt
> > >> >> 5.4.1 to wec2013 ) very unhappy. This means 5.6 will be the last
> > >> >> version
> > >> >> wec2013 would be supported and you would go straight to making a
> > >> >> back
> > >> >> port
> > >> >> very hard or even impossible.
> > >> >
> > >> > WEC 2013 was never considered deprecated. The deprecation applies to
> > >> > WEC 7
> > >> > only.
> > >>
> > >> Well ok, but how does Lars Knoll?s sentence "we could make
> > >> VS2013 the compiler baseline for 5.7.? fit into this? As the only
> > >> supported
> > >> compiler for wec2013 is a cl with v 17.00 aka vs2012.
> > >
> > >Apparently VS2013 can also be used for WEC2013.
> >
> > IDE: yes
> > Compiler: No
> >
> > This was recently confirmed to as by microsoft. The used compiler comes
> > from the platfrombuilder wince800 tree, which is independent from the
> > used IDE. The sdk wec2013 compiler form wec2013 qfe M08 has this version:
> > Microsoft (R) C/C++ Optimizing Compiler Version 17.00.50728.6 for ARM
> >
> > the vs2012 arm compiler ( which is meant for win pohne and winrt) has :
> > Microsoft (R) C/C++ Optimizing Compiler Version 17.00.61030 for ARM
> >
> > I don't think the possible usage of the vs2013 ide has any impact on qt
> > development.
> > Regards,
> > Gunnar
> >
> >
> >
> > _______________________________________________
> > Development mailing list
> > Development at qt-project.org
> > http://lists.qt-project.org/mailman/listinfo/development
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 5920 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150618/9bba7266/attachment.bin

From marc.mutz at kdab.com  Thu Jun 18 13:32:37 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 18 Jun 2015 13:32:37 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <EF7335AF-729D-4A67-BF35-36396364EDF1@theqtcompany.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506171536.11799.marc.mutz@kdab.com>
	<EF7335AF-729D-4A67-BF35-36396364EDF1@theqtcompany.com>
Message-ID: <201506181332.37522.marc.mutz@kdab.com>

On Thursday 18 June 2015 11:37:48 Knoll Lars wrote:
> >Curiously, you didn't list any pro-namespace arguments. I don't know what
> >to  make of this, but I fear that a decision is being made based solely
> >on arguments from one side.
>
> So what are the arguments from your point of view then? Apart from
> namespaces being in fashion.

If this was about fashion, then namespaces have been fashionable since at
least the early 2000s (std::, boost::).

Pro namespaces:

- It's the standard way of partioning the name space. C++ users understand it,
  the C++ language understands it, and the C++ compiler does, too.

- namespaces act as an ADL barrier (did you ever got lost in the error
  compilers spew out when you get a simple == wrong? they rival template error
  messages, and the reson is that they're all put into the global scope).

- related: they provide a module-wide C++ scope (std::rel_ops example)

- you cannot (meaningfully) use inline namespaces for versioning (an option we
  should at least consider) if you don't have a namespace in which to put
  them.

- the user has the option of whether she wants to be explicit or convenient.
  Qt trying to impose this decision on its users by name prefixing is
  a) ignoring the fact that many users I know (QtC, KDE(pim)[1], to name the
     biggest and most well-known), liberally use using-directives and do just
     fine. The standard books teach this, too.
  b) preposterous. Imagine your OS took away your hierarchical filesystem and
     required you to type
         $EDITOR homelarsdevQt5qtbasesrccorelibkernelqobject.h
     every time. How long until you'd go mad? But hey, you cannnot _not_ see
     the path of each file, even when someone pastes it on the internet.
  But this is what you're imposing on your users. It's ok as long as it was
  just Q. That's cute. But QDesignerCustomWidgetCollectionInterface or
  QDeclarativeNetworkAccessManagerFactory is *NOT* cute. It's ridiculous.

[1] And no-one, not even QtC, uses so many libraries as KMail does. If you are
    looking for namespace experience, look there.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From gunnar.roth at gmx.de  Thu Jun 18 12:50:27 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Thu, 18 Jun 2015 12:50:27 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <3588856.nRQqz8sQHe@bjoern-upc.site>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<2003164.eSYExoa6v3@bjoern-upc.site>
	<trinity-53c31035-eb90-4d77-b553-8f24dbe94636-1434618030623@3capp-gmx-bs71>,
	<3588856.nRQqz8sQHe@bjoern-upc.site>
Message-ID: <trinity-0e2aed7b-d8f2-4fe0-9e42-431f40ad37af-1434624626995@3capp-gmx-bs71>

An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150618/a69f4ee1/attachment.html

From Martin.Smith at theqtcompany.com  Thu Jun 18 12:51:01 2015
From: Martin.Smith at theqtcompany.com (Smith Martin)
Date: Thu, 18 Jun 2015 10:51:01 +0000
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506181332.37522.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506171536.11799.marc.mutz@kdab.com>
	<EF7335AF-729D-4A67-BF35-36396364EDF1@theqtcompany.com>,
	<201506181332.37522.marc.mutz@kdab.com>
Message-ID: <AM2PR02MB0356ECE88120243184483534E6A50@AM2PR02MB0356.eurprd02.prod.outlook.com>

Do you also advocate rules for using namespaces in Qt? What rules does KDE use?

>From following this thread, the rules that seem natural to me would be:

1. For a new module, either put everything in a namespace or don't use a namespace at all.
2. If you put everything in a namespace:
2.1 The name of the namespace should begin with Qt, e.g. Qt3D.
2.2 The classes in the namespace should not be prefixed with Q.
3. In the documentation for the namespace, recommend that, for readability, users should not use using.

martin

________________________________________
From: development-bounces+martin.smith=theqtcompany.com at qt-project.org <development-bounces+martin.smith=theqtcompany.com at qt-project.org> on behalf of Marc Mutz <marc.mutz at kdab.com>
Sent: Thursday, June 18, 2015 1:32 PM
To: development at qt-project.org
Subject: Re: [Development] Some Qt3D feedback

On Thursday 18 June 2015 11:37:48 Knoll Lars wrote:
> >Curiously, you didn't list any pro-namespace arguments. I don't know what
> >to  make of this, but I fear that a decision is being made based solely
> >on arguments from one side.
>
> So what are the arguments from your point of view then? Apart from
> namespaces being in fashion.

If this was about fashion, then namespaces have been fashionable since at
least the early 2000s (std::, boost::).

Pro namespaces:

- It's the standard way of partioning the name space. C++ users understand it,
  the C++ language understands it, and the C++ compiler does, too.

- namespaces act as an ADL barrier (did you ever got lost in the error
  compilers spew out when you get a simple == wrong? they rival template error
  messages, and the reson is that they're all put into the global scope).

- related: they provide a module-wide C++ scope (std::rel_ops example)

- you cannot (meaningfully) use inline namespaces for versioning (an option we
  should at least consider) if you don't have a namespace in which to put
  them.

- the user has the option of whether she wants to be explicit or convenient.
  Qt trying to impose this decision on its users by name prefixing is
  a) ignoring the fact that many users I know (QtC, KDE(pim)[1], to name the
     biggest and most well-known), liberally use using-directives and do just
     fine. The standard books teach this, too.
  b) preposterous. Imagine your OS took away your hierarchical filesystem and
     required you to type
         $EDITOR homelarsdevQt5qtbasesrccorelibkernelqobject.h
     every time. How long until you'd go mad? But hey, you cannnot _not_ see
     the path of each file, even when someone pastes it on the internet.
  But this is what you're imposing on your users. It's ok as long as it was
  just Q. That's cute. But QDesignerCustomWidgetCollectionInterface or
  QDeclarativeNetworkAccessManagerFactory is *NOT* cute. It's ridiculous.

[1] And no-one, not even QtC, uses so many libraries as KMail does. If you are
    looking for namespace experience, look there.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts
_______________________________________________
Development mailing list
Development at qt-project.org
http://lists.qt-project.org/mailman/listinfo/development

From sean.harmer at kdab.com  Thu Jun 18 13:13:16 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Thu, 18 Jun 2015 12:13:16 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <AM2PR02MB0356ECE88120243184483534E6A50@AM2PR02MB0356.eurprd02.prod.outlook.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506181332.37522.marc.mutz@kdab.com>
	<AM2PR02MB0356ECE88120243184483534E6A50@AM2PR02MB0356.eurprd02.prod.outlook.com>
Message-ID: <2766203.UDnBtfyFLZ@cartman>

On Thursday 18 Jun 2015 10:51:01 Smith Martin wrote:
> Do you also advocate rules for using namespaces in Qt? What rules does KDE
> use?
> >From following this thread, the rules that seem natural to me would be:
> 1. For a new module, either put everything in a namespace or don't use a
> namespace at all.

Fine by me.

> 2. If you put everything in a namespace:
> 2.1 The name of the namespace should begin with Qt, e.g. Qt3D.

Agreed.

> 2.2 The classes in the namespace should not be prefixed with Q.

This one I could see the benefit of still using a Q so that if people do use
using namespace QtBlah the code still looks like Qt code. However, I know
Thiago say's that's their problem and that Lars said he doesn't like the
repeated Q. So I'm happy to go with the consensus here.

> 3. In the documentation for the namespace, recommend that, for readability,
> users should not use using.

I'm not sure I'd bother mentioning that as user's can make their own minds up
and using a using directive doesn't stop anything from working, it's purely
stylistic until you need to disambiguate but those cases should be quite rare,
at least for the near future.

So, in summary, I'm happy to make those changes to Qt3D.

Cheers,

Sean

>
> martin
>
> ________________________________________
> From: development-bounces+martin.smith=theqtcompany.com at qt-project.org
> <development-bounces+martin.smith=theqtcompany.com at qt-project.org> on
> behalf of Marc Mutz <marc.mutz at kdab.com> Sent: Thursday, June 18, 2015 1:32
> PM
> To: development at qt-project.org
> Subject: Re: [Development] Some Qt3D feedback
>
> On Thursday 18 June 2015 11:37:48 Knoll Lars wrote:
> > >Curiously, you didn't list any pro-namespace arguments. I don't know what
> > >to  make of this, but I fear that a decision is being made based solely
> > >on arguments from one side.
> >
> > So what are the arguments from your point of view then? Apart from
> > namespaces being in fashion.
>
> If this was about fashion, then namespaces have been fashionable since at
> least the early 2000s (std::, boost::).
>
> Pro namespaces:
>
> - It's the standard way of partioning the name space. C++ users understand
> it, the C++ language understands it, and the C++ compiler does, too.
>
> - namespaces act as an ADL barrier (did you ever got lost in the error
>   compilers spew out when you get a simple == wrong? they rival template
> error messages, and the reson is that they're all put into the global
> scope).
>
> - related: they provide a module-wide C++ scope (std::rel_ops example)
>
> - you cannot (meaningfully) use inline namespaces for versioning (an option
> we should at least consider) if you don't have a namespace in which to put
> them.
>
> - the user has the option of whether she wants to be explicit or convenient.
> Qt trying to impose this decision on its users by name prefixing is a)
> ignoring the fact that many users I know (QtC, KDE(pim)[1], to name the
> biggest and most well-known), liberally use using-directives and do just
> fine. The standard books teach this, too.
>   b) preposterous. Imagine your OS took away your hierarchical filesystem
> and required you to type
>          $EDITOR homelarsdevQt5qtbasesrccorelibkernelqobject.h
>      every time. How long until you'd go mad? But hey, you cannnot _not_ see
> the path of each file, even when someone pastes it on the internet. But
> this is what you're imposing on your users. It's ok as long as it was just
> Q. That's cute. But QDesignerCustomWidgetCollectionInterface or
> QDeclarativeNetworkAccessManagerFactory is *NOT* cute. It's ridiculous.
>
> [1] And no-one, not even QtC, uses so many libraries as KMail does. If you
> are looking for namespace experience, look there.
>
> Thanks,
> Marc
>
> --
> Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
> KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
> Tel: +49-30-521325470
> KDAB - The Qt Experts
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
KDAB (UK) Ltd, a KDAB Group company
Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
Mobile: +44 (0)7545 140604
KDAB - Qt Experts

From simon.hausmann at theqtcompany.com  Thu Jun 18 13:19:24 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Thu, 18 Jun 2015 13:19:24 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506181245.54698.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org> <1956864.Bn7WECVLkJ@simon-sx58>
	<201506181245.54698.marc.mutz@kdab.com>
Message-ID: <4074406.511CFW4ROb@simon-sx58>

On Thursday, June 18, 2015 12:45:53 PM Marc Mutz wrote:
[...]
> The meta-type system and moc are perfectly fine with namespaces. If people
> would just peek over their own noses and over to your cousin, KDE, you'd see
> that, say, kdepimlibs would have a very hard time indeed, if QMetaType or
> moc would have any trouble with namespaces whatsoever.

Let me give you a concrete example of where "no trouble whatsoever" does not
hold in my opinion:

Qt3D has a QKeyboardInput class:

namespace Qt3D {

class QKeyboardInput: public QComponent
{
    ...
Q_SIGNALS:
    void leftPressed(Q3DKeyEvent *event);
    ...
};

The Q3DKeyEvent class is declared in a namespace as well:

namespace Qt3D {
class Q3DKeyEvent : public QObject
{
    ...
};
}

The moc generated code for QKeyboardInput stores "Q3DKeyEvent*" as
type name for the parameter of the leftPressed signal.

When connecting to this signal using the traditional SIGNAL/SLOT syntax,
a string comparison takes place to ensure that the types match. This means two
things for a signal-slot connection to work:

1) The signature of the slot that connects to the signal has either ignore the
parameter or it has to be qualified exactly like in the signal declaration, in
order for the connect() call to work. You cannot simply use this:

class MyReceiver : public QObject
{
    ...
Q_SLOTS:
    void turnLeft(Qt3D::Q3DKeyEvent *event);
};

2) In addition if the parameter was _not_ prefixed but was merely called
"KeyEvent", then the following code would allow for connections to be
established, but it would crash at run-time - eliminating the type-safety of
signal and slot connections:

struct KeyEvent {
    ...
}

class MyReceiver : public QObject
{
    ...
Q_SLOTS:
    void turnLeft(KeyEvent *event);
};



Simon

From julien.blanc at nmc-company.com  Thu Jun 18 13:56:53 2015
From: julien.blanc at nmc-company.com (Julien Blanc)
Date: Thu, 18 Jun 2015 13:56:53 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <4074406.511CFW4ROb@simon-sx58>
References: <ml2j2r$eg3$1@ger.gmane.org> <1956864.Bn7WECVLkJ@simon-sx58>
	<201506181245.54698.marc.mutz@kdab.com> <4074406.511CFW4ROb@simon-sx58>
Message-ID: <1434628613.6924.40.camel@nmc-company.com>

Le jeudi 18 juin 2015 ? 13:19 +0200, Simon Hausmann a ?crit :

> On Thursday, June 18, 2015 12:45:53 PM Marc Mutz wrote:
> [...]
> > The meta-type system and moc are perfectly fine with namespaces. If people
> > would just peek over their own noses and over to your cousin, KDE, you'd see
> > that, say, kdepimlibs would have a very hard time indeed, if QMetaType or
> > moc would have any trouble with namespaces whatsoever.
>
> Let me give you a concrete example of where "no trouble whatsoever" does not
> hold in my opinion:
>
> Qt3D has a QKeyboardInput class:
>
> namespace Qt3D {
>
> class QKeyboardInput: public QComponent
> {
>     ...
> Q_SIGNALS:
>     void leftPressed(Q3DKeyEvent *event);
>     ...
> };
>
> The Q3DKeyEvent class is declared in a namespace as well:
>
> namespace Qt3D {
> class Q3DKeyEvent : public QObject
> {
>     ...
> };
> }


Then you shouldn?t do that. You should use the fully qualified name in
your signal definition. IIRC the doc is clear on this.


>
> The moc generated code for QKeyboardInput stores "Q3DKeyEvent*" as
> type name for the parameter of the leftPressed signal.


Then the question is : can moc be improved to trigger an error (or
generate C++ code that triggers an explicit error, via static_assert for
example) when defining such signals ?

Because yes, that?s an issue, and a troublesome one. Marc told earlier
about the SC break : it?s easy to deal with SC break that triggers
compile-time errors. But SC breaks that silently triggers bugs are much
more a burden. There is a strong precondition imho before doing a move
to namespace, which is being able to detect all connection / method
invocation / ... errors. Because that?s the kind of SC break that will
inevitably occur.

Regards,

Julien

-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150618/81b6bf35/attachment.html

From marc.mutz at kdab.com  Thu Jun 18 15:07:40 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 18 Jun 2015 15:07:40 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <AM2PR02MB0356ECE88120243184483534E6A50@AM2PR02MB0356.eurprd02.prod.outlook.com>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506181332.37522.marc.mutz@kdab.com>
	<AM2PR02MB0356ECE88120243184483534E6A50@AM2PR02MB0356.eurprd02.prod.outlook.com>
Message-ID: <201506181507.40560.marc.mutz@kdab.com>

On Thursday 18 June 2015 12:51:01 Smith Martin wrote:
> Do you also advocate rules for using namespaces in Qt? What rules does KDE
> use?

I believe it's worth reading Sze Howe Koh's mails in this thread and the last
one (Oct 2013), even if the mails tend to be overwhelmingly full of
information :)

On a completely personal note, I'd find the following most natural:

1. Each Qt Module "Qt Foo" (name used in docs), with soname
   Qt<MajorVersion>Foo, only exports symbols in namespace QtFoo,
   potentially with nested inline namespace V<MajorVersion>.
2. Free functions are not prefixed with 'q' (QtFoo::escape(), not
   QtFoo::qEscape()).
3. Classes, I'm not so sure about the Q. Could leave it for better SC /
   branding, or only add a deprecated typedef Bar QBar (either insider the
   namespace or outside) for easier porting.
4. Includes:
   a. <QtFoo> includes the whole module (as is the case for QtCore, ... now)
   b. There's no <QtLike> include for just the namespace (with enums, free
      functions, etc). To get the namespace, users include any class from the
      module (much like no-one is using <QtGlobal> atm, but relies on any
      <QFoo> to include it indirectly).
   c. Class includes: <QtFoo/QClass> or /Class, depending on (3). Maybe
      <QClass> for backwards-compatibility, with a warning a la <strstream> on
      GCC.
5. (most important) don't express a bias for QtFoo::Class vs. using directives
   in the docs. That's _entirely_ up to the user. I'd even go so far as to
   leave that up to the individual developer in Qt implementations, while
   still demanding to following the style found in the file-under-edit, of
   course. In docs and examples, I'd tend to use fully-qualified names, if
   only for automatic qdoc linking, but if qdoc can cope (doxgen can), I'd use
   using directives in the examples/ subdir, at least.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From Kai.Koehne at theqtcompany.com  Thu Jun 18 14:49:40 2015
From: Kai.Koehne at theqtcompany.com (Koehne Kai)
Date: Thu, 18 Jun 2015 12:49:40 +0000
Subject: [Development] Qt & Namespaces (was: RE:  Some Qt3D feedback)
Message-ID: <AM2PR02MB30794C3BAA57A3D532E8495E1A50@AM2PR02MB307.eurprd02.prod.outlook.com>

> -----Original Message-----
> From: development-bounces+kai.koehne=theqtcompany.com at qt-
> project.org [mailto:development-
> bounces+kai.koehne=theqtcompany.com at qt-project.org] On Behalf Of
> Marc Mutz
> Sent: Thursday, June 18, 2015 3:08 PM
> To: development at qt-project.org
> Subject: Re: [Development] Some Qt3D feedback
>
> On Thursday 18 June 2015 12:51:01 Smith Martin wrote:
> > Do you also advocate rules for using namespaces in Qt? What rules does
> > KDE use?
>
> I believe it's worth reading Sze Howe Koh's mails in this thread and the last
> one (Oct 2013), even if the mails tend to be overwhelmingly full of
> information :)
>
> On a completely personal note, I'd find the following most natural:
>
> 1. Each Qt Module "Qt Foo" (name used in docs), with soname
>    Qt<MajorVersion>Foo, only exports symbols in namespace QtFoo,
>    potentially with nested inline namespace V<MajorVersion>.

This has the advantage of being a very simple, mechanical rule. But it's also
very burdensome ... You'll probably end up writing

using namespace QtCore;

in every single source file, since you almost certainly don't want to use
QtCore::QString all over the place.

Now you could argue that QtCore is special, but then again the module contains
something like "QState", which is such a generic name that you probably want
to have it in a namespace.

> 2. Free functions are not prefixed with 'q' (QtFoo::escape(), not
>    QtFoo::qEscape()).
> 3. Classes, I'm not so sure about the Q. Could leave it for better SC /
>    branding, or only add a deprecated typedef Bar QBar (either insider the
>    namespace or outside) for easier porting.

If there's one way to break almost every single line of Qt code out there, it's
removing the 'Q'. Even if you mitigate this by typedef',s I just don't see that
happening ...

So you end up with QQml::QQmlEngine. I like Q's , but that's a tad too much
for my taste.

> 4. Includes:
>    a. <QtFoo> includes the whole module (as is the case for QtCore, ... now)
>    b. There's no <QtLike> include for just the namespace (with enums, free
>       functions, etc). To get the namespace, users include any class from the
>       module (much like no-one is using <QtGlobal> atm, but relies on any
>       <QFoo> to include it indirectly).
>    c. Class includes: <QtFoo/QClass> or /Class, depending on (3). Maybe
>       <QClass> for backwards-compatibility, with a warning a la <strstream> on
>       GCC.
> 5. (most important) don't express a bias for QtFoo::Class vs. using directives
>    in the docs. That's _entirely_ up to the user. I'd even go so far as to
>    leave that up to the individual developer in Qt implementations, while
>    still demanding to following the style found in the file-under-edit, of
>    course. In docs and examples, I'd tend to use fully-qualified names, if
>    only for automatic qdoc linking, but if qdoc can cope (doxgen can), I'd use
>    using directives in the examples/ subdir, at least.

Yeah well, not sure whether that's most important, but I actually agree: Namespaces
in general are well understood, and we don't have to patronize our users about their
exact use. They will make up their own minds, anyway.



My 2 cents: Adding namespaces carefully where they make sense is a good thing
in the long run, and Qt 6 _might_ be a time where we could also touch existing
modules to avoid clashes. But let's not overdo it. And renaming existing popular classes
is IMO a non-starter.

Regards

Kai

From Martin.Smith at theqtcompany.com  Thu Jun 18 14:59:32 2015
From: Martin.Smith at theqtcompany.com (Smith Martin)
Date: Thu, 18 Jun 2015 12:59:32 +0000
Subject: [Development] Qt & Namespaces (was: RE:  Some Qt3D feedback)
In-Reply-To: <AM2PR02MB30794C3BAA57A3D532E8495E1A50@AM2PR02MB307.eurprd02.prod.outlook.com>
References: <AM2PR02MB30794C3BAA57A3D532E8495E1A50@AM2PR02MB307.eurprd02.prod.outlook.com>
Message-ID: <AM2PR02MB0356F974D47413FD437D55E8E6A50@AM2PR02MB0356.eurprd02.prod.outlook.com>

Why not leave current Qt modules as they are, without namespaces and with the Q prefix on classes, and just introduce the option of adding a new module to Qt by putting it in a namespace named QtFoo without the Q prefix on class names, or adding it with no namespace and with the Q prefix on classes.

Converting existing modules to use namespaces seems like a lot of aggravation for not much gain.

martin
________________________________________
From: development-bounces+martin.smith=theqtcompany.com at qt-project.org <development-bounces+martin.smith=theqtcompany.com at qt-project.org> on behalf of Koehne Kai <Kai.Koehne at theqtcompany.com>
Sent: Thursday, June 18, 2015 2:49 PM
To: Marc Mutz; development at qt-project.org
Subject: [Development] Qt & Namespaces (was: RE:  Some Qt3D feedback)

> -----Original Message-----
> From: development-bounces+kai.koehne=theqtcompany.com at qt-
> project.org [mailto:development-
> bounces+kai.koehne=theqtcompany.com at qt-project.org] On Behalf Of
> Marc Mutz
> Sent: Thursday, June 18, 2015 3:08 PM
> To: development at qt-project.org
> Subject: Re: [Development] Some Qt3D feedback
>
> On Thursday 18 June 2015 12:51:01 Smith Martin wrote:
> > Do you also advocate rules for using namespaces in Qt? What rules does
> > KDE use?
>
> I believe it's worth reading Sze Howe Koh's mails in this thread and the last
> one (Oct 2013), even if the mails tend to be overwhelmingly full of
> information :)
>
> On a completely personal note, I'd find the following most natural:
>
> 1. Each Qt Module "Qt Foo" (name used in docs), with soname
>    Qt<MajorVersion>Foo, only exports symbols in namespace QtFoo,
>    potentially with nested inline namespace V<MajorVersion>.

This has the advantage of being a very simple, mechanical rule. But it's also
very burdensome ... You'll probably end up writing

using namespace QtCore;

in every single source file, since you almost certainly don't want to use
QtCore::QString all over the place.

Now you could argue that QtCore is special, but then again the module contains
something like "QState", which is such a generic name that you probably want
to have it in a namespace.

> 2. Free functions are not prefixed with 'q' (QtFoo::escape(), not
>    QtFoo::qEscape()).
> 3. Classes, I'm not so sure about the Q. Could leave it for better SC /
>    branding, or only add a deprecated typedef Bar QBar (either insider the
>    namespace or outside) for easier porting.

If there's one way to break almost every single line of Qt code out there, it's
removing the 'Q'. Even if you mitigate this by typedef',s I just don't see that
happening ...

So you end up with QQml::QQmlEngine. I like Q's , but that's a tad too much
for my taste.

> 4. Includes:
>    a. <QtFoo> includes the whole module (as is the case for QtCore, ... now)
>    b. There's no <QtLike> include for just the namespace (with enums, free
>       functions, etc). To get the namespace, users include any class from the
>       module (much like no-one is using <QtGlobal> atm, but relies on any
>       <QFoo> to include it indirectly).
>    c. Class includes: <QtFoo/QClass> or /Class, depending on (3). Maybe
>       <QClass> for backwards-compatibility, with a warning a la <strstream> on
>       GCC.
> 5. (most important) don't express a bias for QtFoo::Class vs. using directives
>    in the docs. That's _entirely_ up to the user. I'd even go so far as to
>    leave that up to the individual developer in Qt implementations, while
>    still demanding to following the style found in the file-under-edit, of
>    course. In docs and examples, I'd tend to use fully-qualified names, if
>    only for automatic qdoc linking, but if qdoc can cope (doxgen can), I'd use
>    using directives in the examples/ subdir, at least.

Yeah well, not sure whether that's most important, but I actually agree: Namespaces
in general are well understood, and we don't have to patronize our users about their
exact use. They will make up their own minds, anyway.



My 2 cents: Adding namespaces carefully where they make sense is a good thing
in the long run, and Qt 6 _might_ be a time where we could also touch existing
modules to avoid clashes. But let's not overdo it. And renaming existing popular classes
is IMO a non-starter.

Regards

Kai
_______________________________________________
Development mailing list
Development at qt-project.org
http://lists.qt-project.org/mailman/listinfo/development

From sean.harmer at kdab.com  Thu Jun 18 15:01:47 2015
From: sean.harmer at kdab.com (Sean Harmer)
Date: Thu, 18 Jun 2015 14:01:47 +0100
Subject: [Development] Some Qt3D feedback
In-Reply-To: <4074406.511CFW4ROb@simon-sx58>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506181245.54698.marc.mutz@kdab.com>
	<4074406.511CFW4ROb@simon-sx58>
Message-ID: <1865639.OmsZo9cfvq@cartman>

That's a bug in Qt3D.

https://codereview.qt-project.org/#/c/114639/

Cheers,

Sean


On Thursday 18 Jun 2015 13:19:24 Simon Hausmann wrote:
> On Thursday, June 18, 2015 12:45:53 PM Marc Mutz wrote:
> [...]
>
> > The meta-type system and moc are perfectly fine with namespaces. If people
> > would just peek over their own noses and over to your cousin, KDE, you'd
> > see that, say, kdepimlibs would have a very hard time indeed, if
> > QMetaType or moc would have any trouble with namespaces whatsoever.
>
> Let me give you a concrete example of where "no trouble whatsoever" does not
> hold in my opinion:
>
> Qt3D has a QKeyboardInput class:
>
> namespace Qt3D {
>
> class QKeyboardInput: public QComponent
> {
>     ...
> Q_SIGNALS:
>     void leftPressed(Q3DKeyEvent *event);
>     ...
> };
>
> The Q3DKeyEvent class is declared in a namespace as well:
>
> namespace Qt3D {
> class Q3DKeyEvent : public QObject
> {
>     ...
> };
> }
>
> The moc generated code for QKeyboardInput stores "Q3DKeyEvent*" as
> type name for the parameter of the leftPressed signal.
>
> When connecting to this signal using the traditional SIGNAL/SLOT syntax,
> a string comparison takes place to ensure that the types match. This means
> two things for a signal-slot connection to work:
>
> 1) The signature of the slot that connects to the signal has either ignore
> the parameter or it has to be qualified exactly like in the signal
> declaration, in order for the connect() call to work. You cannot simply use
> this:
>
> class MyReceiver : public QObject
> {
>     ...
> Q_SLOTS:
>     void turnLeft(Qt3D::Q3DKeyEvent *event);
> };
>
> 2) In addition if the parameter was _not_ prefixed but was merely called
> "KeyEvent", then the following code would allow for connections to be
> established, but it would crash at run-time - eliminating the type-safety of
> signal and slot connections:
>
> struct KeyEvent {
>     ...
> }
>
> class MyReceiver : public QObject
> {
>     ...
> Q_SLOTS:
>     void turnLeft(KeyEvent *event);
> };
>
>
>
> Simon
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

--
Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
KDAB (UK) Ltd, a KDAB Group company
Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
Mobile: +44 (0)7545 140604
KDAB - Qt Experts

From Lars.Knoll at theqtcompany.com  Thu Jun 18 15:08:02 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Thu, 18 Jun 2015 13:08:02 +0000
Subject: [Development] Some Qt3D feedback
In-Reply-To: <1865639.OmsZo9cfvq@cartman>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506181245.54698.marc.mutz@kdab.com> <4074406.511CFW4ROb@simon-sx58>
	<1865639.OmsZo9cfvq@cartman>
Message-ID: <A997FA95-E0A5-43E1-B8C8-80D27249EB28@theqtcompany.com>

Or a bug in moc. I think that moc should always resolve the fully qualified name and store that one in the generated tables. Otherwise these kind of errors happen way too easily.

Cheers,
Lars


On 18/06/15 15:01, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Sean Harmer" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of sean.harmer at kdab.com> wrote:

>That's a bug in Qt3D.
>
>https://codereview.qt-project.org/#/c/114639/
>
>Cheers,
>
>Sean
>
>
>On Thursday 18 Jun 2015 13:19:24 Simon Hausmann wrote:
>> On Thursday, June 18, 2015 12:45:53 PM Marc Mutz wrote:
>> [...]
>>
>> > The meta-type system and moc are perfectly fine with namespaces. If people
>> > would just peek over their own noses and over to your cousin, KDE, you'd
>> > see that, say, kdepimlibs would have a very hard time indeed, if
>> > QMetaType or moc would have any trouble with namespaces whatsoever.
>>
>> Let me give you a concrete example of where "no trouble whatsoever" does not
>> hold in my opinion:
>>
>> Qt3D has a QKeyboardInput class:
>>
>> namespace Qt3D {
>>
>> class QKeyboardInput: public QComponent
>> {
>>     ...
>> Q_SIGNALS:
>>     void leftPressed(Q3DKeyEvent *event);
>>     ...
>> };
>>
>> The Q3DKeyEvent class is declared in a namespace as well:
>>
>> namespace Qt3D {
>> class Q3DKeyEvent : public QObject
>> {
>>     ...
>> };
>> }
>>
>> The moc generated code for QKeyboardInput stores "Q3DKeyEvent*" as
>> type name for the parameter of the leftPressed signal.
>>
>> When connecting to this signal using the traditional SIGNAL/SLOT syntax,
>> a string comparison takes place to ensure that the types match. This means
>> two things for a signal-slot connection to work:
>>
>> 1) The signature of the slot that connects to the signal has either ignore
>> the parameter or it has to be qualified exactly like in the signal
>> declaration, in order for the connect() call to work. You cannot simply use
>> this:
>>
>> class MyReceiver : public QObject
>> {
>>     ...
>> Q_SLOTS:
>>     void turnLeft(Qt3D::Q3DKeyEvent *event);
>> };
>>
>> 2) In addition if the parameter was _not_ prefixed but was merely called
>> "KeyEvent", then the following code would allow for connections to be
>> established, but it would crash at run-time - eliminating the type-safety of
>> signal and slot connections:
>>
>> struct KeyEvent {
>>     ...
>> }
>>
>> class MyReceiver : public QObject
>> {
>>     ...
>> Q_SLOTS:
>>     void turnLeft(KeyEvent *event);
>> };
>>
>>
>>
>> Simon
>> _______________________________________________
>> Development mailing list
>> Development at qt-project.org
>> http://lists.qt-project.org/mailman/listinfo/development
>
>--
>Dr Sean Harmer | sean.harmer at kdab.com | Managing Director UK
>KDAB (UK) Ltd, a KDAB Group company
>Tel. +44 (0)1625 809908; Sweden (HQ) +46-563-540090
>Mobile: +44 (0)7545 140604
>KDAB - Qt Experts
>_______________________________________________
>Development mailing list
>Development at qt-project.org
>http://lists.qt-project.org/mailman/listinfo/development

From milian.wolff at kdab.com  Thu Jun 18 15:16:06 2015
From: milian.wolff at kdab.com (Milian Wolff)
Date: Thu, 18 Jun 2015 15:16:06 +0200
Subject: [Development] Qt & Namespaces (was: RE:  Some Qt3D feedback)
In-Reply-To: <AM2PR02MB30794C3BAA57A3D532E8495E1A50@AM2PR02MB307.eurprd02.prod.outlook.com>
References: <AM2PR02MB30794C3BAA57A3D532E8495E1A50@AM2PR02MB307.eurprd02.prod.outlook.com>
Message-ID: <8592078.jGspBqfRfd@milian-kdab2>

On Thursday 18 June 2015 12:49:40 Koehne Kai wrote:
> > -----Original Message-----
> > From: development-bounces+kai.koehne=theqtcompany.com at qt-
> > project.org [mailto:development-
> > bounces+kai.koehne=theqtcompany.com at qt-project.org] On Behalf Of
> > Marc Mutz
> > Sent: Thursday, June 18, 2015 3:08 PM
> > To: development at qt-project.org
> > Subject: Re: [Development] Some Qt3D feedback
> >
> > On Thursday 18 June 2015 12:51:01 Smith Martin wrote:
> > > Do you also advocate rules for using namespaces in Qt? What rules does
> > > KDE use?
> >
> > I believe it's worth reading Sze Howe Koh's mails in this thread and the
> > last one (Oct 2013), even if the mails tend to be overwhelmingly full of
> > information :)
> >
> > On a completely personal note, I'd find the following most natural:
> >
> > 1. Each Qt Module "Qt Foo" (name used in docs), with soname
> >
> >    Qt<MajorVersion>Foo, only exports symbols in namespace QtFoo,
> >    potentially with nested inline namespace V<MajorVersion>.
>
> This has the advantage of being a very simple, mechanical rule. But it's
> also very burdensome ... You'll probably end up writing
>
> using namespace QtCore;
>
> in every single source file, since you almost certainly don't want to use
> QtCore::QString all over the place.
>
> Now you could argue that QtCore is special, but then again the module
> contains something like "QState", which is such a generic name that you
> probably want to have it in a namespace.

And that is fine, no? I do the same in all the projects I work on that use
namespaces.

> > 2. Free functions are not prefixed with 'q' (QtFoo::escape(), not
> >
> >    QtFoo::qEscape()).
> >
> > 3. Classes, I'm not so sure about the Q. Could leave it for better SC /
> >
> >    branding, or only add a deprecated typedef Bar QBar (either insider the
> >    namespace or outside) for easier porting.
>
> If there's one way to break almost every single line of Qt code out there,
> it's removing the 'Q'. Even if you mitigate this by typedef',s I just don't
> see that happening ...

Why would it break with a typedef? Forward declarations? One could go the
other way around and have the non-Q versions as typedefs of the Q versions.
And with Qt7 or so it could be removed altogether.

> So you end up with QQml::QQmlEngine. I like Q's , but that's a tad too much
> for my taste.

I agree. And QTest::qSleep is something I tripped over so many times... It
still makes me angry whenever I write it.

> > 4. Includes:
> >    a. <QtFoo> includes the whole module (as is the case for QtCore, ...
> >    now)
> >    b. There's no <QtLike> include for just the namespace (with enums, free
> >
> >       functions, etc). To get the namespace, users include any class from
> >       the
> >       module (much like no-one is using <QtGlobal> atm, but relies on any
> >       <QFoo> to include it indirectly).
> >
> >    c. Class includes: <QtFoo/QClass> or /Class, depending on (3). Maybe
> >
> >       <QClass> for backwards-compatibility, with a warning a la
> >       <strstream> on
> >       GCC.
> >
> > 5. (most important) don't express a bias for QtFoo::Class vs. using
> > directives>
> >    in the docs. That's _entirely_ up to the user. I'd even go so far as to
> >    leave that up to the individual developer in Qt implementations, while
> >    still demanding to following the style found in the file-under-edit, of
> >    course. In docs and examples, I'd tend to use fully-qualified names, if
> >    only for automatic qdoc linking, but if qdoc can cope (doxgen can), I'd
> >    use
> >    using directives in the examples/ subdir, at least.
>
> Yeah well, not sure whether that's most important, but I actually agree:
> Namespaces in general are well understood, and we don't have to patronize
> our users about their exact use. They will make up their own minds, anyway.
>
> My 2 cents: Adding namespaces carefully where they make sense is a good
> thing in the long run, and Qt 6 _might_ be a time where we could also touch
> existing modules to avoid clashes. But let's not overdo it. And renaming
> existing popular classes is IMO a non-starter.

I'd welcome Marc's proposal very much. And what he proposed has a way to stay
backwards compatible.

Bye

--
Milian Wolff | milian.wolff at kdab.com | Software Engineer
KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
Tel: +49-30-521325470
KDAB - The Qt Experts

From mw_triad at users.sourceforge.net  Thu Jun 18 15:45:06 2015
From: mw_triad at users.sourceforge.net (Matthew Woehlke)
Date: Thu, 18 Jun 2015 09:45:06 -0400
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506181507.40560.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>	<201506181332.37522.marc.mutz@kdab.com>	<AM2PR02MB0356ECE88120243184483534E6A50@AM2PR02MB0356.eurprd02.prod.outlook.com>
	<201506181507.40560.marc.mutz@kdab.com>
Message-ID: <mlui13$d9a$1@ger.gmane.org>

On 2015-06-18 09:07, Marc Mutz wrote:
> 4. Includes:
>    a. <QtFoo> includes the whole module (as is the case for QtCore, ... now)
>    b. There's no <QtLike> include for just the namespace (with enums, free
>       functions, etc). To get the namespace, users include any class from the
>       module (much like no-one is using <QtGlobal> atm, but relies on any
>       <QFoo> to include it indirectly).

Are you sure? I've used <QtGlobal> a good handful of times. In general I
find it helpful to be able to include just the types / macros / free
functions without dragging in some random class that I don't actually
care about.

Reasons I have used <QtGlobal>:

- I want only the macros
- I want only the platform / compiler feature symbols
- I want only some free function (e.g. qRound)
- I want only the convenience typedefs (e.g. qint64, qreal)

So I definitely would not say that there is no use for having a header
with a module's global entities separate from the per-class headers.

In fact, I'm annoyed that <QtNumeric> is missing... IMHO if it's a
public header, it should have a <CamelCaseName> wrapper. (Well, *was*
missing; it was added in Qt5, thankfully!)

--
Matthew


From mardy at users.sourceforge.net  Thu Jun 18 15:58:21 2015
From: mardy at users.sourceforge.net (Alberto Mardegan)
Date: Thu, 18 Jun 2015 16:58:21 +0300
Subject: [Development] Qt & Namespaces (was: RE:  Some Qt3D feedback)
In-Reply-To: <AM2PR02MB0356F974D47413FD437D55E8E6A50@AM2PR02MB0356.eurprd02.prod.outlook.com>
References: <AM2PR02MB30794C3BAA57A3D532E8495E1A50@AM2PR02MB307.eurprd02.prod.outlook.com>
	<AM2PR02MB0356F974D47413FD437D55E8E6A50@AM2PR02MB0356.eurprd02.prod.outlook.com>
Message-ID: <5582CE7D.2000309@users.sourceforge.net>

On 18.06.2015 15:59, Smith Martin wrote:
> Why not leave current Qt modules as they are, without namespaces and with the Q prefix on classes, and just introduce the option of adding a new module to Qt by putting it in a namespace named QtFoo without the Q prefix on class names, or adding it with no namespace and with the Q prefix on classes.

I can see the benefits of using namespaces when the namespace is longer
than a few characters.
But at lesat in the Qt3D case, IMHO it's much better to remove the
namespace because that will give all developers better search results
when they search for class names: searching for "Qt3DWindow" will only
give relevant results, while when searching for "Window" or "QWindow"
the desired results could get lost in the noise.

Ciao,
  Alberto

From marc.mutz at kdab.com  Thu Jun 18 17:17:19 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 18 Jun 2015 17:17:19 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <mlui13$d9a$1@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506181507.40560.marc.mutz@kdab.com>
	<mlui13$d9a$1@ger.gmane.org>
Message-ID: <201506181717.19345.marc.mutz@kdab.com>

On Thursday 18 June 2015 15:45:06 Matthew Woehlke wrote:
> On 2015-06-18 09:07, Marc Mutz wrote:
> > 4. Includes:
> >    a. <QtFoo> includes the whole module (as is the case for QtCore, ...
> >    now) b. There's no <QtLike> include for just the namespace (with
> >    enums, free
> >
> >       functions, etc). To get the namespace, users include any class from
> >       the module (much like no-one is using <QtGlobal> atm, but relies
> >       on any <QFoo> to include it indirectly).
>
> Are you sure? I've used <QtGlobal> a good handful of times. In general I
> find it helpful to be able to include just the types / macros / free
> functions without dragging in some random class that I don't actually
> care about.
>
> Reasons I have used <QtGlobal>:
>
> - I want only the macros
> - I want only the platform / compiler feature symbols
> - I want only some free function (e.g. qRound)
> - I want only the convenience typedefs (e.g. qint64, qreal)
>
> So I definitely would not say that there is no use for having a header
> with a module's global entities separate from the per-class headers.
>
> In fact, I'm annoyed that <QtNumeric> is missing... IMHO if it's a
> public header, it should have a <CamelCaseName> wrapper. (Well, *was*
> missing; it was added in Qt5, thankfully!)

I believe people with so narrow use-cases can be bothered to include
<QtCore/qglobal.h>. IIRC, the alternative proposal was to let people include
the whole module (<QtCore>) to get the namespace (reliably, without depending
on indirect includes). FWIW, your usual Qt module doesn't define lots of free
functions and macros that you'd be interested in.

If you step back a bit, you'll notice that both <QtGlobal> and <QtNumeric>, as
well as <QtNamespace> are big, fat, mistakes. QtGlobal doesn't include all of
the Qt Global module, etc. They just confuse users by appearing in QtC header
autocompletion.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From mw_triad at users.sourceforge.net  Thu Jun 18 18:16:30 2015
From: mw_triad at users.sourceforge.net (Matthew Woehlke)
Date: Thu, 18 Jun 2015 12:16:30 -0400
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506181717.19345.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>	<201506181507.40560.marc.mutz@kdab.com>	<mlui13$d9a$1@ger.gmane.org>
	<201506181717.19345.marc.mutz@kdab.com>
Message-ID: <mluqsu$buj$1@ger.gmane.org>

On 2015-06-18 11:17, Marc Mutz wrote:
> On Thursday 18 June 2015 15:45:06 Matthew Woehlke wrote:
>> Reasons I have used <QtGlobal>:
>>
>> - I want only the macros
>> - I want only the platform / compiler feature symbols
>> - I want only some free function (e.g. qRound)
>> - I want only the convenience typedefs (e.g. qint64, qreal)
>>
>> So I definitely would not say that there is no use for having a header
>> with a module's global entities separate from the per-class headers.
>>
>> In fact, I'm annoyed that <QtNumeric> is missing... IMHO if it's a
>> public header, it should have a <CamelCaseName> wrapper. (Well, *was*
>> missing; it was added in Qt5, thankfully!)
>
> I believe people with so narrow use-cases can be bothered to include
> <QtCore/qglobal.h>.

"Bothered", yes, but it's ugly and inconsistent.

> IIRC, the alternative proposal was to let people include
> the whole module (<QtCore>) to get the namespace.

Unacceptable. This drags in a HUGE amount of stuff when I only want a
small piece. From a compile perspective, it would be much better, though
still not optimal, to include some small but irrelevant class, but then
that's bad from a semantic perspective ("why does this header include
<QtCore/QString> when it never mentioned QString?").

> If you step back a bit, you'll notice that both <QtGlobal> and <QtNumeric>, as
> well as <QtNamespace> are big, fat, mistakes.

Why? How can QtNumeric, in particular, be a mistake unless qnumeric.h is
also a mistake?

--
Matthew


From thiago.macieira at intel.com  Thu Jun 18 18:45:28 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Thu, 18 Jun 2015 09:45:28 -0700
Subject: [Development] VS2012 is not deprecated
Message-ID: <10810729.SRj1kNdR7F@tjmaciei-mobl4>

It's not included in the deprecation notice in 5.5.0-rc1's changelog.

And none of the features listed for 2013 are allowed in our code.

#    if _MSC_VER >= 1800
       /* C++11 features in VC12 = VC2013 */
#      define Q_COMPILER_DEFAULT_MEMBERS
#      define Q_COMPILER_DELETE_MEMBERS
#      define Q_COMPILER_DELEGATING_CONSTRUCTORS
#      define Q_COMPILER_EXPLICIT_CONVERSIONS
#      define Q_COMPILER_NONSTATIC_MEMBER_INIT
// implemented, but nested initialization fails (eg tst_qvector):
http://connect.microsoft.com/VisualStudio/feedback/details/800364/initializer-list-calls-object-destructor-twice
//      #define Q_COMPILER_INITIALIZER_LISTS
// implemented in principle, but has a bug that makes it unusable:
http://connect.microsoft.com/VisualStudio/feedback/details/802058/c-11-unified-initialization-fails-with-c-style-arrays
//      #define Q_COMPILER_UNIFORM_INIT
#      define Q_COMPILER_RAW_STRINGS
#      define Q_COMPILER_TEMPLATE_ALIAS
#      define Q_COMPILER_VARIADIC_TEMPLATES
#    endif /* VC 12 */

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 4447 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150618/7aef8651/attachment.bin

From marc.mutz at kdab.com  Thu Jun 18 22:33:57 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Thu, 18 Jun 2015 22:33:57 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <mluqsu$buj$1@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506181717.19345.marc.mutz@kdab.com>
	<mluqsu$buj$1@ger.gmane.org>
Message-ID: <201506182233.57247.marc.mutz@kdab.com>

On Thursday 18 June 2015 18:16:30 Matthew Woehlke wrote:
> > If you step back a bit, you'll notice that both <QtGlobal> and
> > <QtNumeric>, as  well as <QtNamespace> are big, fat, mistakes.
>
> Why? How can QtNumeric, in particular, be a mistake unless qnumeric.h is
> also a mistake?

because <QtFoo> is the header that brings in all of module Qt Foo. And neither
Qt{Global,Numeric,Namespace} fit that description. Neither does
QtConcurrent{Run,Map}, btw.

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From apoenitz at t-online.de  Thu Jun 18 21:49:38 2015
From: apoenitz at t-online.de (=?iso-8859-1?Q?Andr=E9_P=F6nitz?=)
Date: Thu, 18 Jun 2015 21:49:38 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <12591655.XmIx5i17kr@cartman>
References: <ml2j2r$eg3$1@ger.gmane.org> <1956864.Bn7WECVLkJ@simon-sx58>
	<CAPm+cvhLah00HQ7zYFdzrPe5x-0-iu2sDbGcFjWB2cxO20jRyQ@mail.gmail.com>
	<12591655.XmIx5i17kr@cartman>
Message-ID: <20150618194938.GA8863@klara.mpi.htwm.de>

On Thu, Jun 18, 2015 at 09:22:07AM +0100, Sean Harmer wrote:
> On Thursday 18 Jun 2015 09:18:15 Giuseppe D'Angelo wrote:
> > On Thu, Jun 18, 2015 at 9:08 AM, Simon Hausmann
> >
> > <simon.hausmann at theqtcompany.com> wrote:
> > > Or would the idea be to place the Q_DECLARE_METATYPE outside of the
> > > namespace?
> > Why "the idea"? It's the way it's supposed to be used right now.
>
> Indeed, and we've been using it extensively and have not encountered any
> blockers with moc or the metatype system thus far. So in our experience there
> are no technical blockers.
>
> Qt3D is only a tech preview in 5.5 so we are free to change it at will. I'd
> suggest we leave it as is for 5.5.0. For 5.5.1 I'd propose we resolve the
> small namespace inconsistencies between the QML and C++ APIs as discussed
> elsewhere in this thread and see how users get on with that with a view to
> using it as a way of testing the waters for a larger rollout of namespaces for
> Qt 6. I'd propose to do this in the way that was tabled during the development
> of Qt5 but which we failed to enact upon.
>
> For a new module I really don't see the small inconsistency c.f. the rest of
> Qt of using namespaces as an issue - especially given the other
> inconsistencies that have been discussed. Users will cope with this, I'm sure.

People cope with air pollution, too. That's not a good reason to increase it.

> I am happy to document this on the wiki as guideline proposal for new modules
> as Sze-Howe suggested.

Just sticking to the existing patterns would save you from documenting
the deviatation and the users from wondering why the should search for
documentation on deviations from prior arts in some wiki.

So far no reason was given in favour of the additional inconsistencies
that went beyond "I think it is posh" and "I want to have fun playing
with the Qt API".

There has been no answer on how to prevent forseeable additional bikeshedding
on the use of 'using' and resulting additional inconsistencies in the code base.

All the talk about "the compiler will tell you when there's a problem"
entirely ignores the fact that the better part of programming is done
on syntactically incorrect translation units (while editing) or in contexts
were there's not even something like a translation in reach (reviews on
gerrit, looking up documentation), or, in short, pardon my German: ist Unsinn.

I propose to not intentionally introduce more API inconsistencies and
ban all API experiments during the 5.x cycle unless they are well
guarded behind #ifdef-ery based on an opt-in configure switch or similar.

Andre'

From mw_triad at users.sourceforge.net  Thu Jun 18 22:36:01 2015
From: mw_triad at users.sourceforge.net (Matthew Woehlke)
Date: Thu, 18 Jun 2015 16:36:01 -0400
Subject: [Development] Some Qt3D feedback
In-Reply-To: <201506182233.57247.marc.mutz@kdab.com>
References: <ml2j2r$eg3$1@ger.gmane.org>	<201506181717.19345.marc.mutz@kdab.com>	<mluqsu$buj$1@ger.gmane.org>
	<201506182233.57247.marc.mutz@kdab.com>
Message-ID: <mlva3i$mes$1@ger.gmane.org>

On 2015-06-18 16:33, Marc Mutz wrote:
> On Thursday 18 June 2015 18:16:30 Matthew Woehlke wrote:
>>> If you step back a bit, you'll notice that both <QtGlobal> and
>>> <QtNumeric>, as  well as <QtNamespace> are big, fat, mistakes.
>>
>> Why? How can QtNumeric, in particular, be a mistake unless qnumeric.h is
>> also a mistake?
>
> because <QtFoo> is the header that brings in all of module Qt Foo. And neither
> Qt{Global,Numeric,Namespace} fit that description. Neither does
> QtConcurrent{Run,Map}, btw.

Neither does <QObject>. Whether or not <QObject> should be allowed (vs.
<QtCore/QObject>) is an interesting discussion, but not one I was trying
to make.

I think we're arguing for different points. It's not the specific name
that matters to me as that there is *some* header which is named
according to modern C++ convention (in particular, no ".h"). If we have
those for e.g. <QObject>, then IMO we should have them for *all* public
headers. Or we shouldn't have them at all.

I agree that having modules and conceptual groups use the same naming
convention is unfortunate, but I disagree that not providing
modern-named headers *at all* is the correct solution to that problem.

--
Matthew


From steveire at gmail.com  Thu Jun 18 23:29:43 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Thu, 18 Jun 2015 23:29:43 +0200
Subject: [Development] Ubuntu Qt packages failing if client uses g++-5.1
Message-ID: <mlvd8c$96c$1@ger.gmane.org>


Hello,

Using this testcase:


 #include <QCoreApplication>
 #include <QTimer>
 #include <QDebug>

 int main(int argv, char **args)
 {
   QCoreApplication app(argv, args);

   qDebug() << QCoreApplication::instance() << qApp;

   QTimer::singleShot(0, qApp, SLOT(quit()));

   return app.exec();
 }

and building with ubuntu Qt packages with g++-5 (which I probably got from

 https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test

) I get incompatible runtime behavior:

 stephen at hal:/tmp/qtbug$ ./qtbug
 QObject(0x0)  QObject(0x0)
 ^C

That is, the QCoreApplication::instance() reports a null pointer in qDebug,
and the singleShot does not work.

This only happens with the ubuntu Qt packages for me. With the QtC package
it works as expected.

In case anyone else runs into this issue.

Thanks,

Steve.



From thiago.macieira at intel.com  Thu Jun 18 23:36:33 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Thu, 18 Jun 2015 14:36:33 -0700
Subject: [Development] Ubuntu Qt packages failing if client uses g++-5.1
In-Reply-To: <mlvd8c$96c$1@ger.gmane.org>
References: <mlvd8c$96c$1@ger.gmane.org>
Message-ID: <7574777.KtWxIA9fe7@tjmaciei-mobl4>

On Thursday 18 June 2015 23:29:43 Stephen Kelly wrote:
> ) I get incompatible runtime behavior:
>
>  stephen at hal:/tmp/qtbug$ ./qtbug
>  QObject(0x0)  QObject(0x0)
>  ^C
>
> That is, the QCoreApplication::instance() reports a null pointer in qDebug,
> and the singleShot does not work.
>
> This only happens with the ubuntu Qt packages for me. With the QtC package
> it works as expected.
>
> In case anyone else runs into this issue.

That's QTBUG-45755 and its duplicates.

Downgrade the compiler or upgrade to Qt to include the change that rejects
using -fPIE.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From marc.mutz at kdab.com  Fri Jun 19 02:34:19 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 19 Jun 2015 02:34:19 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <20150618194938.GA8863@klara.mpi.htwm.de>
References: <ml2j2r$eg3$1@ger.gmane.org> <12591655.XmIx5i17kr@cartman>
	<20150618194938.GA8863@klara.mpi.htwm.de>
Message-ID: <201506190234.20128.marc.mutz@kdab.com>

On Thursday 18 June 2015 21:49:38 Andr? P?nitz wrote:
> So far no reason was given in favour of the additional inconsistencies
> that went beyond "I think it is posh" and "I want to have fun playing
> with the Qt API".

http://lists.qt-project.org/pipermail/development/2015-June/022038.html

> There has been no answer on how to prevent forseeable additional
> bikeshedding on the use of 'using' and resulting additional
> inconsistencies in the code base.

http://lists.qt-project.org/pipermail/development/2015-June/022038.html, item
5

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Fri Jun 19 02:57:51 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 19 Jun 2015 02:57:51 +0200
Subject: [Development] Some Qt3D feedback
In-Reply-To: <mlva3i$mes$1@ger.gmane.org>
References: <ml2j2r$eg3$1@ger.gmane.org>
	<201506182233.57247.marc.mutz@kdab.com>
	<mlva3i$mes$1@ger.gmane.org>
Message-ID: <201506190257.51733.marc.mutz@kdab.com>

On Thursday 18 June 2015 22:36:01 Matthew Woehlke wrote:
> On 2015-06-18 16:33, Marc Mutz wrote:
> > On Thursday 18 June 2015 18:16:30 Matthew Woehlke wrote:
> >>> If you step back a bit, you'll notice that both <QtGlobal> and
> >>> <QtNumeric>, as  well as <QtNamespace> are big, fat, mistakes.
> >>
> >> Why? How can QtNumeric, in particular, be a mistake unless qnumeric.h is
> >> also a mistake?
> >
> > because <QtFoo> is the header that brings in all of module Qt Foo. And
> > neither Qt{Global,Numeric,Namespace} fit that description. Neither does
> > QtConcurrent{Run,Map}, btw.
>
> Neither does <QObject>. Whether or not <QObject> should be allowed (vs.
> <QtCore/QObject>) is an interesting discussion, but not one I was trying
> to make.
>
> I think we're arguing for different points. It's not the specific name
> that matters to me as that there is *some* header which is named
> according to modern C++ convention (in particular, no ".h"). If we have
> those for e.g. <QObject>, then IMO we should have them for *all* public
> headers. Or we shouldn't have them at all.
>
> I agree that having modules and conceptual groups use the same naming
> convention is unfortunate, but I disagree that not providing
> modern-named headers *at all* is the correct solution to that problem.

   <Q_t_Foo>     - module: <QtCore>, <QtGui>, <QtWidgets>
   <Q__Foo>      - class: <QObject>, <QString>, <QLineEdit>
   <Q_t_Global>  - NOT a module (-> mistake)
   <Q_t_Numeric> - NOT a module (-> mistake)
   <Q_t_ConcurrentRun>
                 - NOT a module (-> mistake)
   <Q__Test>     - NOT a class  (-> mistake)

<QObject> does not stand for <qobject.h>. It stands for the class QObject.
That's why <QSignalBlocker> also resolves to <qobject.h>.

So the question boils down to: If we have QFoo for classes and QtFoo for
modules, do we need sans-.h headers for other entities? Namespaces? Enums? And
I'd say no. If you say yes, then that's fine. Propose a naming convention for
headers for enums (could use the convention for classes, as enums and classes
share a namespace) and free functions (which I'd propose you put either into a
class header that's related to the free function, or else into a
q(t?foo(global|namespace|funtions).h that gets included in every Qt Foo class-
and thus module header, but doesn't have its own sans-.h header.

People like you that want to optimize includes can still use the .h-header
directly.

API design principle: make common tasks easy to use and other tasks possible.
Perfect example. If you stray from QFoo means class, QtFoo means module, you
make the common task hard. After all these years, I still have to look up
whether to include <QtTest> or <QTest>. _This_ is a _real_ inconsistency.
Namespaces aren't (they'd make QtCore::QObject consistent with
<QtCore/QObject>!).

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From simon.hausmann at theqtcompany.com  Fri Jun 19 08:48:20 2015
From: simon.hausmann at theqtcompany.com (Simon Hausmann)
Date: Fri, 19 Jun 2015 08:48:20 +0200
Subject: [Development] [QtCS] QtRemoteObjects Session Summary
In-Reply-To: <D19E5501.230B%bstottle@ford.com>
References: <CALX7-s7sbB0Gpb_7M-B__tWGAtB75K3xbdQR6izaDihNmqP0xw@mail.gmail.com>
	<CALX7-s7BLR3jjwnRn02r1oHVzOtbaLxOVDMyg3EshEmH=eQQMQ@mail.gmail.com>
	<D19E5501.230B%bstottle@ford.com>
Message-ID: <1489377.Guzvtt1UZk@simon-sx58>

On Thursday, June 11, 2015 02:21:22 AM Stottlemyer, Brett wrote:
> Hi Alan.  Hi Simon.
>
> On 6/10/15, 4:23 PM, "Alan Alpert" <416365416c at gmail.com> wrote:
> >On Wed, Jun 10, 2015 at 6:52 AM, Simon Hausmann
> >
> ><simon.hausmann at theqtcompany.com> wrote:
> >> On Tuesday, June 09, 2015 01:23:29 PM Alan Alpert wrote:
> >>> A brief overview of planned features:
> >>> -QML API
> >>> -Protocol Layer Adapters
> >>> -Investigate merge with QWebChannel (sounds similar, of course no-one
> >>> working on QWebChannel was present to confirm).
> >>>
> >>> After it is established with those features and solid quality, it
> >>> could be considered to promote it to an add-on module.
>
> I?m the one who talked about QtRO (it was named Replicant at the time) at
> last year?s Contributors Summit and requested the playground.  I
> definitely like the idea of making it an add-on module, but are you
> suggesting it needs protocol layer adapters as a prerequisite?
>
> The additional QML API piece would be welcome, and I?m open to see if
> there is benefit to merge/code share with QWebChannel.  I?ve always been
> resistant to try to make QtRO play nice with other languages, though.  Of
> course that would be fantastic!  No argument there.  But you?ve already
> mentioned one of the difficulties - exported abstractitemmodels.  That is
> a very Qt specific implementation, with support for QVariant types and
> specific roles.  And concrete signals/slots.  It isn?t a matter of simply
> passing data to another language (although that is hard enough when it
> comes to all the types Qt supports marshaling for already).  Even if you
> could pass the data to python or java effectively, how would the receiver
> be expected to display the results?

Very good point. Many of our concepts in Qt map well to concepts in other
languages - for example signals/slots across threads and go channels. However
the more complex the concept the harder it becomes to map and that perhaps
isn't worth the effort. (this just as an observation, not in response to your
concrete implementation of QtRO :)

> >> I feel that mistake is made over and over again in many similar
> >>
> >>designs. It is
> >>
> >> perhaps one area where the web development is doing better. It's my
> >>
> >>(perhaps
> >>
> >> incorrect?) impression that web services tend to be accessed using more
> >> explicit code instead of using transparent method calls or property
> >>
> >>access.
> >>
> >> The XMLHttpRequest API is one example here, and the promises based
> >>
> >>fetch() API
> >>
> >> makes this even better IMHO.
> >
> >This is attempted to be addressed (at least from the QML API) by
> >having explicit node objects. It can have error handling and state
> >communication (still to be designed), and fall-back mechanisms like
> >default values. I agree error handling shouldn't be hidden entirely,
> >but I would also say that it's still an area where we want to make
> >developer's lives easier with pre-built common-case logic.
>
> This is how it is currently addressed in C++ as well, although we need to
> expose the errors as signals and enhance this area.

I feel error handling is something that's really getting better over time in
programming. I really like thrift's new error handling and I admit I'm also a
fan of go's put-the-error-in-your-face approach - controversial I admit :).
But what this shows in my opinion is that particularly robust designs don't
just _offer_ error handling to the developer, they really place it right in
front of them when writing and reading code. I feel we haven't done that in
the design of the Qt APIs, yet.

> >We already have the XMLHttpRequest API for distributed systems. The
> >point of QRO, as I see it, is something more convenient and more
> >pre-made by comparison.
>
> Indeed.  QtRO makes it trivial to create a Replica of a Qt object in
> another process or on another device.  You interact with the Replica just
> as you would the original object.  It doesn?t hide errors, but also
> doesn?t require overhead for nominal/happy-path behavior.

And this is where I think Qt is best off providing functionality that makes it
trivial to interact with other processes or devices under the rather likely
assumption that they are not written in Qt.

A current or future scenario these days is that you have mobile devices,
processes on stationary computers, small computers on big industrial machines.
The software in question may very well be written in Qt and C++, but it's also
likely that in the same software scenario there's a "frontend" that's running
in a web browser using JavaScript. This software may talk to a "service",
which is likely written not in C++ but rather Haskell, Go, Java or perhaps
NodeJS - running perhaps on some instance in Amazon's cloud. For a variety of
reasons I suppose, including the availability of efficient green threads or
simply due to expertise on the job market. And those services then may talk to
"backend" services, unlikely to be written with Qt in my opinion.

There's no strict need for these systems to speak exactly the same wire
format, but it is critical for Qt to be able to easily interact with any of
these endpoints through message passing.

This is a somewhat lower goal that mapping entire objects across process
boundaries, but I think it is an direction that would make Qt more attractive.
I would love to see really good "native" thrift and protobuf bindings. I would
love to see really convenient marshalling and demarshalling of C++ structures
to and from JSON (something that's fortunately a work in progress). All to
make it easy for Qt to fit into any heterogeneous environment.

I see that this is almost orthogonal to your goals at this point, not
necessarily in  conflict.

> >> In my opinion a system that we promote to Qt developers should learn
> >>
> >>from
> >>
> >> these "mistakes" in the past: The API should encourage developers to
> >>
> >>write
> >>
> >> fault tolerant code (because distributed systems _do_ fail) and it
> >>
> >>should be
> >>
> >> easy to maintain wire compatibility (just like we do maintain binary
> >> compatibility).
>
> Simon - I?m curious if you think D-Bus succeeds or fails in this regard?

I don't think D-Bus succeeds in this regard. At least I can make my Linux
system dysfunctional rather easily by killing off certain D-Bus services. Not
so much because of the way D-Bus is designed but rather due to the way
the bindings are designed.

That said, I do acknowledge that a different degree of stability exists across
process boundaries on the same machine, as opposed to networking across
machine boundaries.


Simon

From Morten.Sorvig at theqtcompany.com  Fri Jun 19 15:44:38 2015
From: Morten.Sorvig at theqtcompany.com (Sorvig Morten)
Date: Fri, 19 Jun 2015 13:44:38 +0000
Subject: [Development] Qt for Native Client
Message-ID: <F303408C-187B-44B5-9864-44F24FD46273@digia.com>

Hi,

I?m happy to announce that a work-in-progress port of Qt to the Chrome / Native Client platform has now been pushed to the wip/nacl branch in QtBase. So far development has been closed, but we are now ready to develop in the open and also take contributions. My intention is to at some point merge the work, after the whip/nacl and dev branches have converged sufficiently,

The main difference from other platforms is that Qt for NaCl is running in the web sandbox, which has lots of interesting implications for areas like file or network access. The port is tested with Qt Widgets and Qt Quick and supports raster and OpenGL graphics.

"Getting started? instructions can be found at qtbase/nacl-readme.

One further patch is needed for QtDeclarative, available here:

https://codereview.qt-project.org/#/c/114670/

- Morten

From bjoern.breitmeyer at kdab.com  Fri Jun 19 17:51:41 2015
From: bjoern.breitmeyer at kdab.com (=?ISO-8859-1?Q?Bj=F6rn?= Breitmeyer)
Date: Fri, 19 Jun 2015 17:51:41 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <trinity-0e2aed7b-d8f2-4fe0-9e42-431f40ad37af-1434624626995@3capp-gmx-bs71>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<3588856.nRQqz8sQHe@bjoern-upc.site>
	<trinity-0e2aed7b-d8f2-4fe0-9e42-431f40ad37af-1434624626995@3capp-gmx-bs71>
Message-ID: <1517107.NVlnKTlzes@bjoern-upc.site>

Hi Gunnar,

sadly i have to agree. I finally had the time to setup a Visual Studio 2013
with the recent Platform Builder and sadly the generated SDK's still have
the Compiler Version 17.xx and says Visual Studio 2012. So the link indeed
gets us to wrong assumptions. It is a bit sad since there is a working arm
compiler as you said.

But we can't force our users to try unsupported crude workarounds. So i hope
we can find a consenus on having Visual Studio 2012 as a baseline. As
otherwise we would drop Embedded Compact 2013 support directly after
introducing it.

Best regards
Bj?rn Breitmeyer

--
Bj?rn Breitmeyer | bjoern.breitmeyer at kdab.com | Senior Software Engineer
KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
Germany: +49-30-521325470, Sweden (HQ): +46-563-540090
KDAB - Qt Experts - Platform-independent software solutions
Am Donnerstag, 18. Juni 2015, 12:50:27 schrieb Gunnar Roth:
> Hi Bj?rn, i had the assumption you could mean that, but thats not a
> knowledge base article. I think you mean "Compact 2013 uses the Microsoft
> Visual Studio 2013 compiler,"? That part was also sent to me by a colleage
> from another department when discussing v8 usage( as this has vs2013
> depedancy according to wiki).  So we startet a MS Request to clear this
> issue. The answer was that the arcticle is wrong here.
>
> Where should the newer stdc++ lib for wec 2013 come from?
>
> As a side note, we were able to compile ffmpeg for wec2013 with the cl
> v18.00 arm compiler as this has sufficient c99 support. But that is not
> supported and c++ relies heavily on its stdc++ lib where we dont have a
> fitting version.
> Regards,
> Gunnar
>
>
>
> Gesendet: Donnerstag, 18. Juni 2015 um 11:48 Uhr
> Von: "Bj?rn Breitmeyer" <bjoern.breitmeyer at kdab.com>
> An: "Gunnar Roth" <gunnar.roth at gmx.de>
> Cc: development at qt-project.org, "Thiago Macieira"
> <thiago.macieira at intel.com> Betreff: Re: Aw: Re: [Development] QtCS: Long
> Term Release discussion That would be this one,
>
> https://msdn.microsoft.com/en-us/library/gg154234.aspx
>
> btw, i would assume the use of the newer libstdc++ if i got it right, as
> that one comes from the sdk too. But maybe i am wrong, didn't gave this a
> lot of time yet, which is why i couldn't test it yet.
>
> --
> Bj?rn Breitmeyer | bjoern.breitmeyer at kdab.com | Senior Software Engineer
> KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
> Germany: +49-30-521325470, Sweden (HQ): +46-563-540090
> KDAB - Qt Experts - Platform-independent software solutions
>
> Am Donnerstag, 18. Juni 2015, 11:00:30 schrieb Gunnar Roth:
> > Hi Bj?rn,
> > what is "the knowledgebase article"? Would you mind to share a link?
> >
> > And even if there would be a v18.00 compiler, what about the standard c++
> > library (headers, libs and dlls) where do they come from? Or would then a
> > mix of newer compiler and older std c++ libary be used? That could be
> > quite
> > problematic haven such a mix leading to unpredictable behaviour from a
> > programmers view. Qt could then not say, vs2013 is the base, but only
> > vs2013 compiler with vs12012 std libary. Sound crazy...
> > Regards,
> > Gunnar
> >
> >
> >
> > Gesendet: Donnerstag, 18. Juni 2015 um 10:41 Uhr
> > Von: "Bj?rn Breitmeyer" <bjoern.breitmeyer at kdab.com>
> > An: development at qt-project.org
> > Cc: "Gunnar Roth" <gunnar.roth at gmx.de>, "Thiago Macieira"
> > <thiago.macieira at intel.com> Betreff: Re: [Development] QtCS: Long Term
> > Release discussion
> > Hello Gunnar,
> >
> > i still hadn't time to verify this, but. There is a platform builder for
> > WEC2013, if you generate the SDk with that one it should have the Visual
> > Studio 2013 compiler, at least thats how i read the knowledgebase article.
> > Its on my TODO list to verify this, but i still didn't had the time to do
> > so.
> >
> > Best regards
> > Bj?rn Breitmeyer
> >
> > --
> > Bj?rn Breitmeyer | bjoern.breitmeyer at kdab.com | Senior Software Engineer
> > KDAB (Deutschland) GmbH&Co KG, a KDAB Group company
> > Germany: +49-30-521325470, Sweden (HQ): +46-563-540090
> > KDAB - Qt Experts - Platform-independent software solutions
> >
> > Am Donnerstag, 18. Juni 2015, 10:16:49 schrieb Gunnar Roth:
> > > Gesendet: Donnerstag, 18. Juni 2015 um 08:43 Uhr
> > > Von: "Thiago Macieira" <thiago.macieira at intel.com>
> > > An: development at qt-project.org
> > > Betreff: Re: [Development] QtCS: Long Term Release discussion
> > >
> > > On Thursday 18 June 2015 08:23:52 Gunnar Roth wrote:
> > > > > Am 17.06.2015 um 22:35 schrieb Thiago Macieira
> > > > >
> > > > > <thiago.macieira at intel.com>:
> > > >> > On Wednesday 17 June 2015 19:30:25 Gunnar Roth wrote:
> > > >> >> Yes that would make us (as a commercial user using a self made
> > > >> >> port
> > > >> >> of
> > > >> >> qt
> > > >> >> 5.4.1 to wec2013 ) very unhappy. This means 5.6 will be the last
> > > >> >> version
> > > >> >> wec2013 would be supported and you would go straight to making a
> > > >> >> back
> > > >> >> port
> > > >> >> very hard or even impossible.
> > > >> >
> > > >> > WEC 2013 was never considered deprecated. The deprecation applies
> > > >> > to
> > > >> > WEC 7
> > > >> > only.
> > > >>
> > > >> Well ok, but how does Lars Knoll?s sentence "we could make
> > > >> VS2013 the compiler baseline for 5.7.? fit into this? As the only
> > > >> supported
> > > >> compiler for wec2013 is a cl with v 17.00 aka vs2012.
> > > >
> > > >Apparently VS2013 can also be used for WEC2013.
> > >
> > > IDE: yes
> > > Compiler: No
> > >
> > > This was recently confirmed to as by microsoft. The used compiler comes
> > > from the platfrombuilder wince800 tree, which is independent from the
> > > used IDE. The sdk wec2013 compiler form wec2013 qfe M08 has this
> > > version:
> > > Microsoft (R) C/C++ Optimizing Compiler Version 17.00.50728.6 for ARM
> > >
> > > the vs2012 arm compiler ( which is meant for win pohne and winrt) has :
> > > Microsoft (R) C/C++ Optimizing Compiler Version 17.00.61030 for ARM
> > >
> > > I don't think the possible usage of the vs2013 ide has any impact on qt
> > > development.
> > > Regards,
> > > Gunnar
> > >
> > >
> > >
> > > _______________________________________________
> > > Development mailing list
> > > Development at qt-project.org
> > > http://lists.qt-project.org/mailman/listinfo/development
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 5920 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150619/66ede9e5/attachment.bin

From gunnar.roth at gmx.de  Fri Jun 19 18:26:27 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Fri, 19 Jun 2015 18:26:27 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <1517107.NVlnKTlzes@bjoern-upc.site>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<3588856.nRQqz8sQHe@bjoern-upc.site>
	<trinity-0e2aed7b-d8f2-4fe0-9e42-431f40ad37af-1434624626995@3capp-gmx-bs71>
	<1517107.NVlnKTlzes@bjoern-upc.site>
Message-ID: <AFB0A4A9-DE8B-43EB-A0D4-59B321B0A42F@gmx.de>


Hi Bj?rn,
i am really glad this discussion will come to an end ;-), it already took considerable time, internally and externally.
> Am 19.06.2015 um 17:51 schrieb Bj?rn Breitmeyer <bjoern.breitmeyer at kdab.com>:
>
> Hi Gunnar,
>
> sadly i have to agree. I finally had the time to setup a Visual Studio 2013
> with the recent Platform Builder and sadly the generated SDK's still have
> the Compiler Version 17.xx and says Visual Studio 2012. So the link indeed
> gets us to wrong assumptions. It is a bit sad since there is a working arm
> compiler as you said.
>

Yes there is, and as i wrote it can be used to compile c99 code and create a working executable by just setting /subsystem to windowsce in the linker step.
This is because wec2013 and winrt both use thumb2 and the arm eabi 2. So the problem is the missing std c++ library for wec2013 and this v18.00 compiler and that it is not supported by MS.


> But we can't force our users to try unsupported crude workarounds. So i hope
> we can find a consenus on having Visual Studio 2012 as a baseline. As
> otherwise we would drop Embedded Compact 2013 support directly after
> introducing it.
That would make me and the company really sad


I would appreciate  a clear answer ( or better commitment) from the Qt Company to continue supporting wec2013 beyond  qt 5.6.

Regards,
Gunnar

From Lars.Knoll at theqtcompany.com  Fri Jun 19 18:38:27 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Fri, 19 Jun 2015 16:38:27 +0000
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <AFB0A4A9-DE8B-43EB-A0D4-59B321B0A42F@gmx.de>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<3588856.nRQqz8sQHe@bjoern-upc.site>
	<trinity-0e2aed7b-d8f2-4fe0-9e42-431f40ad37af-1434624626995@3capp-gmx-bs71>
	<1517107.NVlnKTlzes@bjoern-upc.site>
	<AFB0A4A9-DE8B-43EB-A0D4-59B321B0A42F@gmx.de>
Message-ID: <E429B6BB-F2B1-4B8B-9203-A45B569ACAD0@theqtcompany.com>

On 19/06/15 18:26, "development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of Gunnar Roth" <development-bounces+lars.knoll=theqtcompany.com at qt-project.org on behalf of gunnar.roth at gmx.de> wrote:



>
>Hi Bj?rn,
>i am really glad this discussion will come to an end ;-), it already took considerable time, internally and externally.
>> Am 19.06.2015 um 17:51 schrieb Bj?rn Breitmeyer <bjoern.breitmeyer at kdab.com>:
>>
>> Hi Gunnar,
>>
>> sadly i have to agree. I finally had the time to setup a Visual Studio 2013
>> with the recent Platform Builder and sadly the generated SDK's still have
>> the Compiler Version 17.xx and says Visual Studio 2012. So the link indeed
>> gets us to wrong assumptions. It is a bit sad since there is a working arm
>> compiler as you said.
>>
>
>Yes there is, and as i wrote it can be used to compile c99 code and create a working executable by just setting /subsystem to windowsce in the linker step.
>This is because wec2013 and winrt both use thumb2 and the arm eabi 2. So the problem is the missing std c++ library for wec2013 and this v18.00 compiler and that it is not supported by MS.
>
>
>> But we can't force our users to try unsupported crude workarounds. So i hope
>> we can find a consenus on having Visual Studio 2012 as a baseline. As
>> otherwise we would drop Embedded Compact 2013 support directly after
>> introducing it.
>That would make me and the company really sad
>
>
>I would appreciate  a clear answer ( or better commitment) from the Qt Company to continue supporting wec2013 beyond  qt 5.6.

There was never an intention to remove it after 5.6. But I was hoping that we could be using VC++ 2013 (and support wec2013 with it). Looks like that is unfortunately not the case. That implies that our new compiler baseline will stay with 2012 for some time :/

Cheers,
Lars




From gunnar.roth at gmx.de  Fri Jun 19 18:49:35 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Fri, 19 Jun 2015 18:49:35 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <E429B6BB-F2B1-4B8B-9203-A45B569ACAD0@theqtcompany.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<3588856.nRQqz8sQHe@bjoern-upc.site>
	<trinity-0e2aed7b-d8f2-4fe0-9e42-431f40ad37af-1434624626995@3capp-gmx-bs71>
	<1517107.NVlnKTlzes@bjoern-upc.site>
	<AFB0A4A9-DE8B-43EB-A0D4-59B321B0A42F@gmx.de>
	<E429B6BB-F2B1-4B8B-9203-A45B569ACAD0@theqtcompany.com>
Message-ID: <3D64D89C-127D-436F-9650-59E63F7F5F32@gmx.de>


> Am 19.06.2015 um 18:38 schrieb Knoll Lars <Lars.Knoll at theqtcompany.com>:
>
>
> There was never an intention to remove it after 5.6. But I was hoping that we could be using VC++ 2013 (and support wec2013 with it). Looks like that is unfortunately not the case. That implies that our new compiler baseline will stay with 2012 for some time :/
>

Thanks a lot for your answer. That is a big relief.

Regards,
Gunnar


From 416365416c at gmail.com  Fri Jun 19 23:39:44 2015
From: 416365416c at gmail.com (Alan Alpert)
Date: Fri, 19 Jun 2015 14:39:44 -0700
Subject: [Development] [QtCS] QtRemoteObjects Session Summary
In-Reply-To: <1489377.Guzvtt1UZk@simon-sx58>
References: <CALX7-s7sbB0Gpb_7M-B__tWGAtB75K3xbdQR6izaDihNmqP0xw@mail.gmail.com>
	<CALX7-s7BLR3jjwnRn02r1oHVzOtbaLxOVDMyg3EshEmH=eQQMQ@mail.gmail.com>
	<D19E5501.230B%bstottle@ford.com> <1489377.Guzvtt1UZk@simon-sx58>
Message-ID: <CALX7-s5k3ntFQnZ73ykjLHKed_imQ6mHyrYHfEB_QWy8HvQ1Vg@mail.gmail.com>

On Thu, Jun 18, 2015 at 11:48 PM, Simon Hausmann
<simon.hausmann at theqtcompany.com> wrote:
> On Thursday, June 11, 2015 02:21:22 AM Stottlemyer, Brett wrote:
>> Hi Alan.  Hi Simon.
>>
>> On 6/10/15, 4:23 PM, "Alan Alpert" <416365416c at gmail.com> wrote:
>> >On Wed, Jun 10, 2015 at 6:52 AM, Simon Hausmann
>> >
>> ><simon.hausmann at theqtcompany.com> wrote:
>> >> On Tuesday, June 09, 2015 01:23:29 PM Alan Alpert wrote:
>> >>> A brief overview of planned features:
>> >>> -QML API
>> >>> -Protocol Layer Adapters
>> >>> -Investigate merge with QWebChannel (sounds similar, of course no-one
>> >>> working on QWebChannel was present to confirm).
>> >>>
>> >>> After it is established with those features and solid quality, it
>> >>> could be considered to promote it to an add-on module.
>>
>> I?m the one who talked about QtRO (it was named Replicant at the time) at
>> last year?s Contributors Summit and requested the playground.  I
>> definitely like the idea of making it an add-on module, but are you
>> suggesting it needs protocol layer adapters as a prerequisite?
>>
>> The additional QML API piece would be welcome, and I?m open to see if
>> there is benefit to merge/code share with QWebChannel.  I?ve always been
>> resistant to try to make QtRO play nice with other languages, though.  Of
>> course that would be fantastic!  No argument there.  But you?ve already
>> mentioned one of the difficulties - exported abstractitemmodels.  That is
>> a very Qt specific implementation, with support for QVariant types and
>> specific roles.  And concrete signals/slots.  It isn?t a matter of simply
>> passing data to another language (although that is hard enough when it
>> comes to all the types Qt supports marshaling for already).  Even if you
>> could pass the data to python or java effectively, how would the receiver
>> be expected to display the results?
>
> Very good point. Many of our concepts in Qt map well to concepts in other
> languages - for example signals/slots across threads and go channels. However
> the more complex the concept the harder it becomes to map and that perhaps
> isn't worth the effort. (this just as an observation, not in response to your
> concrete implementation of QtRO :)
>
>> >> I feel that mistake is made over and over again in many similar
>> >>
>> >>designs. It is
>> >>
>> >> perhaps one area where the web development is doing better. It's my
>> >>
>> >>(perhaps
>> >>
>> >> incorrect?) impression that web services tend to be accessed using more
>> >> explicit code instead of using transparent method calls or property
>> >>
>> >>access.
>> >>
>> >> The XMLHttpRequest API is one example here, and the promises based
>> >>
>> >>fetch() API
>> >>
>> >> makes this even better IMHO.
>> >
>> >This is attempted to be addressed (at least from the QML API) by
>> >having explicit node objects. It can have error handling and state
>> >communication (still to be designed), and fall-back mechanisms like
>> >default values. I agree error handling shouldn't be hidden entirely,
>> >but I would also say that it's still an area where we want to make
>> >developer's lives easier with pre-built common-case logic.
>>
>> This is how it is currently addressed in C++ as well, although we need to
>> expose the errors as signals and enhance this area.
>
> I feel error handling is something that's really getting better over time in
> programming. I really like thrift's new error handling and I admit I'm also a
> fan of go's put-the-error-in-your-face approach - controversial I admit :).
> But what this shows in my opinion is that particularly robust designs don't
> just _offer_ error handling to the developer, they really place it right in
> front of them when writing and reading code. I feel we haven't done that in
> the design of the Qt APIs, yet.
>
>> >We already have the XMLHttpRequest API for distributed systems. The
>> >point of QRO, as I see it, is something more convenient and more
>> >pre-made by comparison.
>>
>> Indeed.  QtRO makes it trivial to create a Replica of a Qt object in
>> another process or on another device.  You interact with the Replica just
>> as you would the original object.  It doesn?t hide errors, but also
>> doesn?t require overhead for nominal/happy-path behavior.
>
> And this is where I think Qt is best off providing functionality that makes it
> trivial to interact with other processes or devices under the rather likely
> assumption that they are not written in Qt.
>
> A current or future scenario these days is that you have mobile devices,
> processes on stationary computers, small computers on big industrial machines.
> The software in question may very well be written in Qt and C++, but it's also
> likely that in the same software scenario there's a "frontend" that's running
> in a web browser using JavaScript. This software may talk to a "service",
> which is likely written not in C++ but rather Haskell, Go, Java or perhaps
> NodeJS - running perhaps on some instance in Amazon's cloud. For a variety of
> reasons I suppose, including the availability of efficient green threads or
> simply due to expertise on the job market. And those services then may talk to
> "backend" services, unlikely to be written with Qt in my opinion.
>
> There's no strict need for these systems to speak exactly the same wire
> format, but it is critical for Qt to be able to easily interact with any of
> these endpoints through message passing.
>
> This is a somewhat lower goal that mapping entire objects across process
> boundaries, but I think it is an direction that would make Qt more attractive.
> I would love to see really good "native" thrift and protobuf bindings. I would
> love to see really convenient marshalling and demarshalling of C++ structures
> to and from JSON (something that's fortunately a work in progress). All to
> make it easy for Qt to fit into any heterogeneous environment.
>
> I see that this is almost orthogonal to your goals at this point, not
> necessarily in  conflict.

Yes, I'm still looking into (haven't had much time for it yet :( ) a
protocol level adapter, which allows us to convert the wire format.
Then as orthogonal work to the rest of QtRO, you can add a protocol
adapter for go/thrift/NodeJS whatever you want to connect to. Each
adapter would have to match the non-Qt wire format to avoid modifying
the other codebase, but eventually a standard might emerge that we can
all talk.

Although you were looking for a lower level marshalling and message
passing solution. I thought JSON over HTTP POST was good enough for
that already. I've been using it in my simple cases for a while. The
missing part I see is really the property style notifications, REST is
really just a pull paradigm that can't push out updates to values.
QtRO is one solution to that.

--
Alan Alpert

P.S: I have written a backend service in Qt that I deployed to AWS. I
think it works fine. But that's just me, and likely to stay just me ;)
.

From steveire at gmail.com  Sat Jun 20 12:17:42 2015
From: steveire at gmail.com (Stephen Kelly)
Date: Sat, 20 Jun 2015 12:17:42 +0200
Subject: [Development] Ubuntu Qt packages failing if client uses g++-5.1
References: <mlvd8c$96c$1@ger.gmane.org> <7574777.KtWxIA9fe7@tjmaciei-mobl4>
Message-ID: <mm3ek7$llp$1@ger.gmane.org>

Thiago Macieira wrote:

>> In case anyone else runs into this issue.
>
> That's QTBUG-45755 and its duplicates.
>
> Downgrade the compiler or upgrade to Qt to include the change that rejects
> using -fPIE.

Ah, great, thanks,

Steve.



From wim.delvaux at adaptiveplanet.com  Sun Jun 21 13:21:54 2015
From: wim.delvaux at adaptiveplanet.com (wim delvaux)
Date: Sun, 21 Jun 2015 13:21:54 +0200
Subject: [Development] [QtCS] QtRemoteObjects Session Summary
In-Reply-To: <CALX7-s5k3ntFQnZ73ykjLHKed_imQ6mHyrYHfEB_QWy8HvQ1Vg@mail.gmail.com>
References: <CALX7-s7sbB0Gpb_7M-B__tWGAtB75K3xbdQR6izaDihNmqP0xw@mail.gmail.com>
	<CALX7-s7BLR3jjwnRn02r1oHVzOtbaLxOVDMyg3EshEmH=eQQMQ@mail.gmail.com>
	<D19E5501.230B%bstottle@ford.com> <1489377.Guzvtt1UZk@simon-sx58>
	<CALX7-s5k3ntFQnZ73ykjLHKed_imQ6mHyrYHfEB_QWy8HvQ1Vg@mail.gmail.com>
Message-ID: <CACFydquHo3ZWBYqmMJm-Kts6fzB7AKTqgWjFA8=kzfr3fojbFA@mail.gmail.com>

HI guys,

Just read this mail,

I have already working code for a QtRPC based mechanism.  Support
threading, multiple parallel services, symmetric client/server (i.e server
can be client and vice versa),

Working on signals, multiple service models ( shared, group, private), auto
detection using ( in the case of TCPIP broadcast)

Sure would like you guys to step in.  Interested ?

W

On Fri, Jun 19, 2015 at 11:39 PM, Alan Alpert <416365416c at gmail.com> wrote:

> On Thu, Jun 18, 2015 at 11:48 PM, Simon Hausmann
> <simon.hausmann at theqtcompany.com> wrote:
> > On Thursday, June 11, 2015 02:21:22 AM Stottlemyer, Brett wrote:
> >> Hi Alan.  Hi Simon.
> >>
> >> On 6/10/15, 4:23 PM, "Alan Alpert" <416365416c at gmail.com> wrote:
> >> >On Wed, Jun 10, 2015 at 6:52 AM, Simon Hausmann
> >> >
> >> ><simon.hausmann at theqtcompany.com> wrote:
> >> >> On Tuesday, June 09, 2015 01:23:29 PM Alan Alpert wrote:
> >> >>> A brief overview of planned features:
> >> >>> -QML API
> >> >>> -Protocol Layer Adapters
> >> >>> -Investigate merge with QWebChannel (sounds similar, of course
> no-one
> >> >>> working on QWebChannel was present to confirm).
> >> >>>
> >> >>> After it is established with those features and solid quality, it
> >> >>> could be considered to promote it to an add-on module.
> >>
> >> I?m the one who talked about QtRO (it was named Replicant at the time)
> at
> >> last year?s Contributors Summit and requested the playground.  I
> >> definitely like the idea of making it an add-on module, but are you
> >> suggesting it needs protocol layer adapters as a prerequisite?
> >>
> >> The additional QML API piece would be welcome, and I?m open to see if
> >> there is benefit to merge/code share with QWebChannel.  I?ve always been
> >> resistant to try to make QtRO play nice with other languages, though.
> Of
> >> course that would be fantastic!  No argument there.  But you?ve already
> >> mentioned one of the difficulties - exported abstractitemmodels.  That
> is
> >> a very Qt specific implementation, with support for QVariant types and
> >> specific roles.  And concrete signals/slots.  It isn?t a matter of
> simply
> >> passing data to another language (although that is hard enough when it
> >> comes to all the types Qt supports marshaling for already).  Even if you
> >> could pass the data to python or java effectively, how would the
> receiver
> >> be expected to display the results?
> >
> > Very good point. Many of our concepts in Qt map well to concepts in other
> > languages - for example signals/slots across threads and go channels.
> However
> > the more complex the concept the harder it becomes to map and that
> perhaps
> > isn't worth the effort. (this just as an observation, not in response to
> your
> > concrete implementation of QtRO :)
> >
> >> >> I feel that mistake is made over and over again in many similar
> >> >>
> >> >>designs. It is
> >> >>
> >> >> perhaps one area where the web development is doing better. It's my
> >> >>
> >> >>(perhaps
> >> >>
> >> >> incorrect?) impression that web services tend to be accessed using
> more
> >> >> explicit code instead of using transparent method calls or property
> >> >>
> >> >>access.
> >> >>
> >> >> The XMLHttpRequest API is one example here, and the promises based
> >> >>
> >> >>fetch() API
> >> >>
> >> >> makes this even better IMHO.
> >> >
> >> >This is attempted to be addressed (at least from the QML API) by
> >> >having explicit node objects. It can have error handling and state
> >> >communication (still to be designed), and fall-back mechanisms like
> >> >default values. I agree error handling shouldn't be hidden entirely,
> >> >but I would also say that it's still an area where we want to make
> >> >developer's lives easier with pre-built common-case logic.
> >>
> >> This is how it is currently addressed in C++ as well, although we need
> to
> >> expose the errors as signals and enhance this area.
> >
> > I feel error handling is something that's really getting better over
> time in
> > programming. I really like thrift's new error handling and I admit I'm
> also a
> > fan of go's put-the-error-in-your-face approach - controversial I admit
> :).
> > But what this shows in my opinion is that particularly robust designs
> don't
> > just _offer_ error handling to the developer, they really place it right
> in
> > front of them when writing and reading code. I feel we haven't done that
> in
> > the design of the Qt APIs, yet.
> >
> >> >We already have the XMLHttpRequest API for distributed systems. The
> >> >point of QRO, as I see it, is something more convenient and more
> >> >pre-made by comparison.
> >>
> >> Indeed.  QtRO makes it trivial to create a Replica of a Qt object in
> >> another process or on another device.  You interact with the Replica
> just
> >> as you would the original object.  It doesn?t hide errors, but also
> >> doesn?t require overhead for nominal/happy-path behavior.
> >
> > And this is where I think Qt is best off providing functionality that
> makes it
> > trivial to interact with other processes or devices under the rather
> likely
> > assumption that they are not written in Qt.
> >
> > A current or future scenario these days is that you have mobile devices,
> > processes on stationary computers, small computers on big industrial
> machines.
> > The software in question may very well be written in Qt and C++, but
> it's also
> > likely that in the same software scenario there's a "frontend" that's
> running
> > in a web browser using JavaScript. This software may talk to a "service",
> > which is likely written not in C++ but rather Haskell, Go, Java or
> perhaps
> > NodeJS - running perhaps on some instance in Amazon's cloud. For a
> variety of
> > reasons I suppose, including the availability of efficient green threads
> or
> > simply due to expertise on the job market. And those services then may
> talk to
> > "backend" services, unlikely to be written with Qt in my opinion.
> >
> > There's no strict need for these systems to speak exactly the same wire
> > format, but it is critical for Qt to be able to easily interact with any
> of
> > these endpoints through message passing.
> >
> > This is a somewhat lower goal that mapping entire objects across process
> > boundaries, but I think it is an direction that would make Qt more
> attractive.
> > I would love to see really good "native" thrift and protobuf bindings. I
> would
> > love to see really convenient marshalling and demarshalling of C++
> structures
> > to and from JSON (something that's fortunately a work in progress). All
> to
> > make it easy for Qt to fit into any heterogeneous environment.
> >
> > I see that this is almost orthogonal to your goals at this point, not
> > necessarily in  conflict.
>
> Yes, I'm still looking into (haven't had much time for it yet :( ) a
> protocol level adapter, which allows us to convert the wire format.
> Then as orthogonal work to the rest of QtRO, you can add a protocol
> adapter for go/thrift/NodeJS whatever you want to connect to. Each
> adapter would have to match the non-Qt wire format to avoid modifying
> the other codebase, but eventually a standard might emerge that we can
> all talk.
>
> Although you were looking for a lower level marshalling and message
> passing solution. I thought JSON over HTTP POST was good enough for
> that already. I've been using it in my simple cases for a while. The
> missing part I see is really the property style notifications, REST is
> really just a pull paradigm that can't push out updates to values.
> QtRO is one solution to that.
>
> --
> Alan Alpert
>
> P.S: I have written a backend service in Qt that I deployed to AWS. I
> think it works fine. But that's just me, and likely to stay just me ;)
> .
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150621/2f4d255e/attachment.html

From adimas at gmail.com  Sun Jun 21 23:17:41 2015
From: adimas at gmail.com (Dmitri Afanasjev)
Date: Sun, 21 Jun 2015 21:17:41 +0000
Subject: [Development] Qt 5.4 + QtGstreamer building under Windows
Message-ID: <CAJ7z7BpxFn4WvTH-0449AtMbV71NGHNK0PtW=g-a+Pf1wPNV0Q@mail.gmail.com>

Hello Developers!

Im developing application that uses QtGstreamer bindings with Qt under
Windows 8.1
I have cloned git https://github.com/detrout/qt-gstreamer and installed all
stuff reqquired in README
I have build QtGstreamer sources using Visual Studio 2010 and Qt5.4

What type of libraries should VS produce? *dynamic (dll) *or static *libs
(lib)*? I would like to use it in Qt application

If I use defaults, the dynamic dll is to be produced, the build phase is
ok, but linker part gives me following *dllimport* errors:

1>wrap.obj : error LNK2001: unresolved external symbol
"__declspec(dllimport) public: __thiscall QByteArray::~QByteArray(void)"
(__imp_??1QByteArray@@QAE at XZ)
1>gen.obj : error LNK2001: unresolved external symbol
"__declspec(dllimport) public: __thiscall QByteArray::~QByteArray(void)"
(__imp_??1QByteArray@@QAE at XZ)
1>value.obj : error LNK2001: unresolved external symbol
"__declspec(dllimport) public: __thiscall QByteArray::~QByteArray(void)"
(__imp_??1QByteArray@@QAE at XZ)
1>signal.obj : error LNK2001: unresolved external symbol
"__declspec(dllimport) public: __thiscall QByteArray::~QByteArray(void)"
(__imp_??1QByteArray@@QAE at XZ)

Im newbie in developement under Window, but as I understand C++ linker
could not find Qt DLLs to links with generated objects. I'm i right? How
could I fix the problem? I assume that i should update *include path* with
qt libraries. Where to find libraries?

Thanks for any advice!

Regards, Dmitri
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150621/d188be51/attachment.html

From thiago.macieira at intel.com  Sun Jun 21 23:44:05 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sun, 21 Jun 2015 14:44:05 -0700
Subject: [Development] Qt 5.4 + QtGstreamer building under Windows
In-Reply-To: <CAJ7z7BpxFn4WvTH-0449AtMbV71NGHNK0PtW=g-a+Pf1wPNV0Q@mail.gmail.com>
References: <CAJ7z7BpxFn4WvTH-0449AtMbV71NGHNK0PtW=g-a+Pf1wPNV0Q@mail.gmail.com>
Message-ID: <1652661.B3iFEazzSa@tjmaciei-mobl4>

On Sunday 21 June 2015 21:17:41 Dmitri Afanasjev wrote:
> What type of libraries should VS produce? *dynamic (dll) *or static *libs
> (lib)*? I would like to use it in Qt application
>
> If I use defaults, the dynamic dll is to be produced, the build phase is
> ok, but linker part gives me following *dllimport* errors:
>
> 1>wrap.obj : error LNK2001: unresolved external symbol
> "__declspec(dllimport) public: __thiscall QByteArray::~QByteArray(void)"
> (__imp_??1QByteArray@@QAE at XZ)

Hello Dmitri

This does not seem to be an issue about development of the Qt libraries
themselves. I can tell you for certain that QByteArray's destructor does exist
in the Qt DLLs. You problem must be in the use of the Qt libraries.

Please repost your question to the interest mailing list (interest at qt-
project.org) for help with using Qt in your applications.

PS: QtGStreamer is not part of Qt. Therefore, for the purposes of the
discussion, it is considered part of your application.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From jani.heikkinen at theqtcompany.com  Mon Jun 22 12:26:58 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Mon, 22 Jun 2015 10:26:58 +0000
Subject: [Development] Qt 5.5.0 RC released
Message-ID: <DB3PR02MB0540CB0FE471F5F60E018507E4A10@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi all,



Qt 5.5.0 RC is now released, see http://blog.qt.io/blog/2015/06/22/qt-5-5-release-candidate-available/



Big thanks to everyone involved!



Best regards,

Jani Heikkinen

Release Manager | The Qt Company



The Qt Company / Digia Finland Ltd, Elektroniikkatie 10, 90590 Oulu, Finland

www.qt.io |Qt Blog: http://blog.qt.digia.com/ | Twitter: @QtbyDigia, @Qtproject Facebook: www.facebook.com/qt








-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150622/df3eb889/attachment.html

From Christian.Stromme at theqtcompany.com  Mon Jun 22 12:46:57 2015
From: Christian.Stromme at theqtcompany.com (Stromme Christian)
Date: Mon, 22 Jun 2015 10:46:57 +0000
Subject: [Development] Make Qt WebView a Qt Add-on
Message-ID: <38F23603-6E6F-4DED-ABBA-35F694FEBCE1@theqtcompany.com>

Hi,

The Qt WebView module has been a tech preview for 5.4 and is still going to be a tech preview for 5.5, but
for 5.6 we would like to propose that it gets upgraded to an official Qt add-on. Making the module an add-on,
and also making it part of the normal release infrastructure, should hopefully improve the current (manual)
release and testing process.

For those not familiar with Qt WebView, the modules goal is to provide a more lightweight WebView API for application
developers that don?t need to, or are unable to ship a whole web engine with their application.
Currently Qt WebView provides a Qml only API (a subset of the WebEngineView APIs) and has implementations for
Android, iOS and OS X. And besides Windows Phone/RT, which is still on the wish list, other desktop platforms should
already be supported through Qt WebEngine.


?
Christian Stromme


From louai.al-khanji at theqtcompany.com  Mon Jun 22 13:27:33 2015
From: louai.al-khanji at theqtcompany.com (Al-Khanji Louai)
Date: Mon, 22 Jun 2015 11:27:33 +0000
Subject: [Development] Specifying module dependencies
In-Reply-To: <20150610184747.5693520.73529.26374@theqtcompany.com>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>,
	<11566590.yvz3mEnJq3@tjmaciei-mobl4>
	<20150610184747.5693520.73529.26374@theqtcompany.com>
Message-ID: <DB4PR02MB0288581B25EEF16F44BDA493D1A10@DB4PR02MB0288.eurprd02.prod.outlook.com>

> To the CI system the optional dependencies are
> also required ones.

So we're not going to test the optionality of said dependencies?

Louai


> -----Original Message-----
> From: development-bounces+louai.al-khanji=theqtcompany.com at qt-
> project.org [mailto:development-bounces+louai.al-
> khanji=theqtcompany.com at qt-project.org] On Behalf Of Hausmann Simon
> Sent: Wednesday, June 10, 2015 9:48 PM
> To: Thiago Macieira; development at qt-project.org
> Subject: Re: [Development] Specifying module dependencies
>
> Hi,
>
> Why do we need to pin anything beyond the regular git submodules
> handling of qt5.git (where the information is in the tree object)?
>
> In think we should have a configuration file in each module listing
> required and optional dependencies. Qt.pro can interpret that file and
> so can the CI system. To the CI system the optional dependencies are
> also required ones.
>
> Simon
>
>   Original Message
> From: Thiago Macieira
> Sent: Wednesday, June 10, 2015 18:44
> To: development at qt-project.org
> Subject: Re: [Development] Specifying module dependencies
>
>
> On Wednesday 10 June 2015 18:30:34 Frederik Gladhorn wrote:
> > 4) qt5.git
> > in qt.pro we list all modules again, with deps:
> > addModule(qtdeclarative, qtbase, qtsvg qtxmlpatterns)
> > (amusingly this is not even correct, qtsvg is not a dependency of
> > qtdeclarative any more)
>
> That's an optional dependency.
>
> Note that the qt.pro file allows us to do the full build, so unless we
> teach
> qmake to parse any other sources, we'll need to keep it.
>
> That said, I don't think qt.pro should keep SHA-1 of pinned revisions,
> so
> we'll need something else anyway.
> --
> Thiago Macieira - thiago.macieira (AT) intel.com
>   Software Architect - Intel Open Source Technology Center
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

From louai.al-khanji at theqtcompany.com  Mon Jun 22 14:01:48 2015
From: louai.al-khanji at theqtcompany.com (Al-Khanji Louai)
Date: Mon, 22 Jun 2015 12:01:48 +0000
Subject: [Development] QtCS: Notes from Modern C++ session
In-Reply-To: <17931088.7emqeUohDo@tjmaciei-mobl4>
References: <557A7773.3050903@familiesomers.nl>
	<2996357.aFxrkyR603@tjmaciei-mobl4>
	<BB2F6DE2-94BA-4307-807F-7C344ACDE7A6@gmx.de>
	<17931088.7emqeUohDo@tjmaciei-mobl4>
Message-ID: <DB4PR02MB0288A151C9C4D017D5B40EC5D1A10@DB4PR02MB0288.eurprd02.prod.outlook.com>

Unfortunately that's not accurate. As I said during the session, no released version of MSVC supports the feature properly:

https://msdn.microsoft.com/en-us/library/hh567368.aspx#defaultedanddeleted

As I understand it, that's also the reason that defaulted and deleted functions are listed as partial in this table for VS 2013:

http://blogs.msdn.com/b/vcblog/archive/2015/04/29/c-11-14-17-features-in-vs-2015-rc.aspx

In a nutshell, we'll have to wait for VS 2015, and that's going to be a while.

--Louai

> -----Original Message-----
> From: development-bounces+louai.al-khanji=theqtcompany.com at qt-
> project.org [mailto:development-bounces+louai.al-
> khanji=theqtcompany.com at qt-project.org] On Behalf Of Thiago Macieira
> Sent: Sunday, June 14, 2015 8:08 PM
> To: development at qt-project.org
> Subject: Re: [Development] QtCS: Notes from Modern C++ session
>
> On Saturday 13 June 2015 19:33:14 Gunnar Roth wrote:
> > >>>> Not available for use are:
> > >>>> * = default,
> > >>>> * = deleted,
> > >>
> > >> Where are these not supported? I have code that (AFAIK) has been
> using
> > >> these already, and IIRC our compiler requirements are lower.
> > >
> > > GCC requires 4.7 for this. I think we were discussing whether our
> minimum
> > > is 4.6 or 4.7.
> >
> > I am quite sure that this only works since vs 2013, Would be glad if
> proven
> > wrong. see https://msdn.microsoft.com/en-us/library/dn457344.aspx
> > <https://msdn.microsoft.com/en-us/library/dn457344.aspx>
>
> The best list of what works and what doesn't can be found here:
>
> http://code.qt.io/cgit/qt/qtbase.git/tree/src/corelib/global/qcompilerd
> etection.h#n447
> http://code.woboq.org/qt5/qtbase/src/corelib/global/qcompilerdetection.
> h.html#447
>
> Just scroll down to your compiler.
>
> For this particular feature in MSVC, it's listed as of MSVC 2012:
>
> http://code.woboq.org/qt5/qtbase/src/corelib/global/qcompilerdetection.
> h.html#851
>
> --
> Thiago Macieira - thiago.macieira (AT) intel.com
>   Software Architect - Intel Open Source Technology Center
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

From robin+qt at viroteck.net  Mon Jun 22 14:47:53 2015
From: robin+qt at viroteck.net (Robin Burchell)
Date: Mon, 22 Jun 2015 14:47:53 +0200
Subject: [Development] QtCS: Qt Quick Performance discussion
Message-ID: <1434977273.2372318.304449849.7582E2C2@webmail.messagingengine.com>

It seems that nobody took proper notes of the session (oops!) so I'm
sending the notes Gunnar and I wrote up in preparation for the session.
If anyone else has any recollections they'd like to add, please go ahead
and do so :)

=====

# Performance!

* Why it's important
* What needs to be checked?

# Benchmarking

* Need support in qmlbench for measuring memory usage.
    * For each set of creation benchmarks, we should run them a second
    time collecting memory information.
* Once we have that, once graphed across a single test run, memory leaks
become easy to spot
    * Graphed over time, regressions between commits become easy to spot
* Likewise for the number of items per frame

# Start up performance

We don't have good benchmarks for this, and creating them isn't trivial
to measure. Need a few generated examples, maybe.

# Memory usage

* Our memory usage is pretty bad in a lot of areas.
* Sharing data across processes (fork-booster)..
    * Similar but better sharing achievable through qmlcompiler
* Benefits could be achieved by carefully allocating all write-once
expected-to-be-shared data contiguously
* Dropping CPU-side image data. We recently added QSG_TRANSIENT_IMAGES
to Qt Quick.

# Item creation performance

* We have pretty good benchmarks for this :)
* But we (constantly!) keep regressing
    * This week's example: two separate regressions in QQuickImageBase
    (high DPI, and automatic transform)
    * Image items per frame dropped from ~550/frame to 492/frame -- ~10%
    regression
    * Allocations for 5000 images increased by 41mb
    * This is just one case - it's nobody's "fault", there's just nobody
    taking care of it.
* Ideally need to do some work on automating runs of it (more on this
later)
* What is a good target?
    * 1000 items / frame in qmlbench on a modern desktop / laptop (mbp
    is one such)
    * 100 items / frame on mobile and embedded

# Binding performance

I have no idea whether or not we have good benchmarks for this.

* Probably the creation ones cover the simple cases, but the more
advanced ones probably need separate coverage.
* Ideally we also need to monitor the impact of things changing in
bindings (& multiple things changing at once, and so on?)
* Help creating benchmarks welcome!

# Graphics Performance:

Are we good here? I think we're close at least..
* Clipping has been brought up as an issue, 'simplerenderer' solves that
* Poor batching gives worse result, 'simplerenderer' solves that also,
but be mindful that simplerenderer also has ~2-3x worse performance
overall.

# Recommendations for working on QtQuick

* Avoid structures like QHash unless you are sure they are needed (they
have a heavy cost, and for <1k items or so, QVector, or std::vector, are
often a better choice)
* Avoid signal connections
    * Virtuals instead might be a good choice
    * If you really have to use them, use qmlobject_connect
    * See prior art:
       * qtdeclarative: 0de680c8e8fab36e386dca35e5008ffaa27e8ef6
       * qtdeclarative: 7568922fa240e6e9440e9c6e93bf8ec00c06ec17
* Memory compactness:
    * Don't introduce padding holes
    * Don't increase the size of frequently allocated things (nodes,
    items) "accidentally" without careful consideration
    * Use a lazily-allocated ExtraData for things that aren't needed
    often
    * Consider your data types carefully - don't use a 64 bit int for an
    "on/off" toggle
* Consider custom data structures & allocation (page allocation of the
shadow nodes was a big win)

# Specific Items?

* Rectangle implementation could be improved quite a bit (Gunnar?)
* Text node improvements (Eskil?)
* Hash of shadow nodes in the batched render is a large problem
    * https://codereview.qt-project.org/#/c/97708/
* Delaying compilation (or whatever it is) on inline components until
they are used. Right now, these can have massive impacts on
performance/memory unless moved to external files. e.g. "Component {
Dialog { ... foo ... } }, only used when a button is pressed. It may
never be pressed.
* "Don't use" classes, like SpriteSequence :)
* In general, small items take up huge amounts.. Repeater { model: 500;
Rectangle { width: 100; height: 100; radius: 10 } } and you have 1Mb or
something :)
* QObject -> QQmlData / QQuickItem / QQuickItemPrivate etc all adds up
on individual items - but what can we do to fix that?
* The recent introduction of 'padding' in the box model might need a
second look to make sure it isn't increasing item sizes in common cases.
4 extra doubles is quite a large addition to item sizes.

From rpzrpzrpz at gmail.com  Mon Jun 22 14:56:25 2015
From: rpzrpzrpz at gmail.com (rpzrpzrpz at gmail.com)
Date: Mon, 22 Jun 2015 06:56:25 -0600
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <2948179.5PptTOd4Gu@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>	<1917756.J7HkZcVZ8c@tjmaciei-mobl4>	<20150617165014.GA6453@klara.mpi.htwm.de>
	<2948179.5PptTOd4Gu@tjmaciei-mobl4>
Message-ID: <558805F9.4020304@gmail.com>

Don't have the manpower?

Then transfer LTS support over to a group of willing volunteers whose
businesses depend on it and let them handle as a GROUP the maintenance.

Provide a space on the the Qt Web Site for organizing reasons and make
it officially a "community" only supported pile of code.

It can even run in parts of the CI that still run it, but keep it
separate.  Maybe have a part time "maintainer" whose only job is to
referee group decisions.

That way the rest of the community and the Qt company can advance
forward and concentrate on future and not legacy and also save precious
manpower resources for that purpose.

md


On 6/17/2015 11:29 AM, Thiago Macieira wrote:
> On Wednesday 17 June 2015 18:50:14 Andr? P?nitz wrote:
>> Would be possible to freeze 5.6 right now, and release that quickly
>> after 5.5 as LTS, already running on the new CI, and do whatever
>> else was originally planned for 5.6 in 5.7?
>
> I don't think we can do two releases in the next 7 months. We discussed
> shortening release cycles again in QtCS but the conclusion was "let's look
> into this after the new CI is in place".
>
> Anyway, the main point of decision is whether we want an LTS containing stuff
> effectively deprecated. That means maintaining it for a long period, which we
> don't want and don't have the manpower for.
>
> It would be the ideal solution, but I simply don't think we could pull it off.
> Tough luck.
>


--
No spell checkers were harmed during the creation of this message.

From louai.al-khanji at theqtcompany.com  Mon Jun 22 15:02:58 2015
From: louai.al-khanji at theqtcompany.com (Al-Khanji Louai)
Date: Mon, 22 Jun 2015 13:02:58 +0000
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <3D64D89C-127D-436F-9650-59E63F7F5F32@gmx.de>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<3588856.nRQqz8sQHe@bjoern-upc.site>
	<trinity-0e2aed7b-d8f2-4fe0-9e42-431f40ad37af-1434624626995@3capp-gmx-bs71>
	<1517107.NVlnKTlzes@bjoern-upc.site>
	<AFB0A4A9-DE8B-43EB-A0D4-59B321B0A42F@gmx.de>
	<E429B6BB-F2B1-4B8B-9203-A45B569ACAD0@theqtcompany.com>
	<3D64D89C-127D-436F-9650-59E63F7F5F32@gmx.de>
Message-ID: <DB4PR02MB0288B9AED982B7CC10707B6BD1A10@DB4PR02MB0288.eurprd02.prod.outlook.com>

So this bit in the article is not factual?

"Windows Embedded Compact no longer provides its own tool chain (compiler, assembler, and make), but instead use the same tools as desktop development."

Louai


> -----Original Message-----
> From: development-bounces+louai.al-khanji=theqtcompany.com at qt-
> project.org [mailto:development-bounces+louai.al-
> khanji=theqtcompany.com at qt-project.org] On Behalf Of Gunnar Roth
> Sent: Friday, June 19, 2015 7:50 PM
> To: Knoll Lars
> Cc: development at qt-project.org; Thiago Macieira
> Subject: Re: [Development] QtCS: Long Term Release discussion
>
>
> > Am 19.06.2015 um 18:38 schrieb Knoll Lars
> <Lars.Knoll at theqtcompany.com>:
> >
> >
> > There was never an intention to remove it after 5.6. But I was hoping
> that we could be using VC++ 2013 (and support wec2013 with it). Looks
> like that is unfortunately not the case. That implies that our new
> compiler baseline will stay with 2012 for some time :/
> >
>
> Thanks a lot for your answer. That is a big relief.
>
> Regards,
> Gunnar
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

From frederik.gladhorn at theqtcompany.com  Mon Jun 22 17:04:06 2015
From: frederik.gladhorn at theqtcompany.com (Frederik Gladhorn)
Date: Mon, 22 Jun 2015 17:04:06 +0200
Subject: [Development] Specifying module dependencies
In-Reply-To: <DB4PR02MB0288581B25EEF16F44BDA493D1A10@DB4PR02MB0288.eurprd02.prod.outlook.com>
References: <7683735.V6dSB2beso@frederik-thinkcentre-m93p>
	<20150610184747.5693520.73529.26374@theqtcompany.com>
	<DB4PR02MB0288581B25EEF16F44BDA493D1A10@DB4PR02MB0288.eurprd02.prod.outlook.com>
Message-ID: <1711977.DlNBAQcgKp@frederik-thinkcentre-m93p>

On Monday, June 22, 2015 11:27:33 AM Al-Khanji Louai wrote:
> > To the CI system the optional dependencies are
> > also required ones.
>
> So we're not going to test the optionality of said dependencies?

That is currently correct. We assume that we have all Qt modules that are
dependencies. That's also the way we package. Making smaller builds is
possible but not supported. The problem with testing every possible
combination of everything is that it quickly becomes exponential in the number
of combinations we'd have to test.

Frederik

>
> Louai
>
> > -----Original Message-----
> > From: development-bounces+louai.al-khanji=theqtcompany.com at qt-
> > project.org [mailto:development-bounces+louai.al-
> > khanji=theqtcompany.com at qt-project.org] On Behalf Of Hausmann Simon
> > Sent: Wednesday, June 10, 2015 9:48 PM
> > To: Thiago Macieira; development at qt-project.org
> > Subject: Re: [Development] Specifying module dependencies
> >
> > Hi,
> >
> > Why do we need to pin anything beyond the regular git submodules
> > handling of qt5.git (where the information is in the tree object)?
> >
> > In think we should have a configuration file in each module listing
> > required and optional dependencies. Qt.pro can interpret that file and
> > so can the CI system. To the CI system the optional dependencies are
> > also required ones.
> >
> > Simon
> >
> >   Original Message
> >
> > From: Thiago Macieira
> > Sent: Wednesday, June 10, 2015 18:44
> > To: development at qt-project.org
> > Subject: Re: [Development] Specifying module dependencies
> >
> > On Wednesday 10 June 2015 18:30:34 Frederik Gladhorn wrote:
> > > 4) qt5.git
> > > in qt.pro we list all modules again, with deps:
> > > addModule(qtdeclarative, qtbase, qtsvg qtxmlpatterns)
> > > (amusingly this is not even correct, qtsvg is not a dependency of
> > > qtdeclarative any more)
> >
> > That's an optional dependency.
> >
> > Note that the qt.pro file allows us to do the full build, so unless we
> > teach
> > qmake to parse any other sources, we'll need to keep it.
> >
> > That said, I don't think qt.pro should keep SHA-1 of pinned revisions,
> > so
> > we'll need something else anyway.
> > --
> > Thiago Macieira - thiago.macieira (AT) intel.com
> >
> >   Software Architect - Intel Open Source Technology Center
> >
> > _______________________________________________
> > Development mailing list
> > Development at qt-project.org
> > http://lists.qt-project.org/mailman/listinfo/development
> > _______________________________________________
> > Development mailing list
> > Development at qt-project.org
> > http://lists.qt-project.org/mailman/listinfo/development
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development


From gunnar.roth at gmx.de  Mon Jun 22 17:05:50 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Mon, 22 Jun 2015 17:05:50 +0200
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <DB4PR02MB0288B9AED982B7CC10707B6BD1A10@DB4PR02MB0288.eurprd02.prod.outlook.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<3588856.nRQqz8sQHe@bjoern-upc.site>
	<trinity-0e2aed7b-d8f2-4fe0-9e42-431f40ad37af-1434624626995@3capp-gmx-bs71>
	<1517107.NVlnKTlzes@bjoern-upc.site>
	<AFB0A4A9-DE8B-43EB-A0D4-59B321B0A42F@gmx.de>
	<E429B6BB-F2B1-4B8B-9203-A45B569ACAD0@theqtcompany.com>
	<3D64D89C-127D-436F-9650-59E63F7F5F32@gmx.de>,
	<DB4PR02MB0288B9AED982B7CC10707B6BD1A10@DB4PR02MB0288.eurprd02.prod.outlook.com>
Message-ID: <trinity-c1cc5950-22ae-49a4-a2b1-039c763c98fb-1434985550251@3capp-gmx-bs71>

An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150622/3c9b4136/attachment.html

From thiago.macieira at intel.com  Mon Jun 22 17:16:30 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 22 Jun 2015 08:16:30 -0700
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <558805F9.4020304@gmail.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<2948179.5PptTOd4Gu@tjmaciei-mobl4> <558805F9.4020304@gmail.com>
Message-ID: <43486881.zo6Eo1C9Mi@tjmaciei-mobl4>

On Monday 22 June 2015 06:56:25 rpzrpzrpz at gmail.com wrote:
> Don't have the manpower?
>
> Then transfer LTS support over to a group of willing volunteers whose
> businesses depend on it and let them handle as a GROUP the maintenance.

Is anyone volunteering?

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From rpzrpzrpz at gmail.com  Mon Jun 22 18:35:56 2015
From: rpzrpzrpz at gmail.com (rpzrpzrpz at gmail.com)
Date: Mon, 22 Jun 2015 10:35:56 -0600
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <43486881.zo6Eo1C9Mi@tjmaciei-mobl4>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>	<2948179.5PptTOd4Gu@tjmaciei-mobl4>
	<558805F9.4020304@gmail.com> <43486881.zo6Eo1C9Mi@tjmaciei-mobl4>
Message-ID: <5588396C.7030700@gmail.com>

On 6/22/2015 9:16 AM, Thiago Macieira wrote:
> On Monday 22 June 2015 06:56:25 rpzrpzrpz at gmail.com wrote:
>> Don't have the manpower?
>>
>> Then transfer LTS support over to a group of willing volunteers whose
>> businesses depend on it and let them handle as a GROUP the maintenance.
>
> Is anyone volunteering?
>

Another alternative is "Good Luck".

--
No spell checkers were harmed during the creation of this message.

From thiago.macieira at intel.com  Mon Jun 22 19:30:35 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 22 Jun 2015 10:30:35 -0700
Subject: [Development] QtCS: Long Term Release discussion
In-Reply-To: <5588396C.7030700@gmail.com>
References: <2505786.e0shnu4VyY@tjmaciei-mobl4>
	<43486881.zo6Eo1C9Mi@tjmaciei-mobl4> <5588396C.7030700@gmail.com>
Message-ID: <1923460.uUHy6yziTN@tjmaciei-mobl4>

On Monday 22 June 2015 10:35:56 rpzrpzrpz at gmail.com wrote:
> On 6/22/2015 9:16 AM, Thiago Macieira wrote:
> > On Monday 22 June 2015 06:56:25 rpzrpzrpz at gmail.com wrote:
> >> Don't have the manpower?
> >>
> >> Then transfer LTS support over to a group of willing volunteers whose
> >> businesses depend on it and let them handle as a GROUP the maintenance.
> >
> > Is anyone volunteering?
>
> Another alternative is "Good Luck".

We haven't had luck in finding volunteers for the LTS work, so it's unlikely
we'll have better luck in the next month.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From nospam at vuorela.dk  Mon Jun 22 22:51:30 2015
From: nospam at vuorela.dk (Sune Vuorela)
Date: Mon, 22 Jun 2015 20:51:30 +0000 (UTC)
Subject: [Development] Qt & Namespaces (was: RE:  Some Qt3D feedback)
References: <AM2PR02MB30794C3BAA57A3D532E8495E1A50@AM2PR02MB307.eurprd02.prod.outlook.com>
Message-ID: <mm9sgi$gu6$1@ger.gmane.org>

On 2015-06-18, Koehne Kai <Kai.Koehne at theqtcompany.com> wrote:
>> 1. Each Qt Module "Qt Foo" (name used in docs), with soname
>>    Qt<MajorVersion>Foo, only exports symbols in namespace QtFoo,
>>    potentially with nested inline namespace V<MajorVersion>.
>
> This has the advantage of being a very simple, mechanical rule. But it's also
> very burdensome ... You'll probably end up writing
>
> using namespace QtCore;
>
> in every single source file, since you almost certainly don't want to use
> QtCore::QString all over the place.

> My 2 cents: Adding namespaces carefully where they make sense is a good thing
> in the long run, and Qt 6 _might_ be a time where we could also touch existing
> modules to avoid clashes. But let's not overdo it. And renaming existing popular classes
> is IMO a non-starter.

If we are doing it, we should definitely add the MajorVersion as in
namespace Qt6Core.

That way, we automatically become immune to crashes from having several
qt verisons in the same process, which is a thing that seems to happen
from time to time for a lot of people by accident. (and quite hard to
debug)

/Sune


From thiago.macieira at intel.com  Mon Jun 22 23:17:47 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 22 Jun 2015 14:17:47 -0700
Subject: [Development] Qt & Namespaces (was: RE:  Some Qt3D feedback)
In-Reply-To: <mm9sgi$gu6$1@ger.gmane.org>
References: <AM2PR02MB30794C3BAA57A3D532E8495E1A50@AM2PR02MB307.eurprd02.prod.outlook.com>
	<mm9sgi$gu6$1@ger.gmane.org>
Message-ID: <2861032.C3ZvB2WLTp@tjmaciei-mobl4>

On Monday 22 June 2015 20:51:30 Sune Vuorela wrote:
> That way, we automatically become immune to crashes from having several
> qt verisons in the same process, which is a thing that seems to happen
> from time to time for a lot of people by accident. (and quite hard to
> debug)

Fixed by https://codereview.qt-project.org/113558 for Linux. No fix for non-
Linux (not relevant).

    The big advantage of an ELF version is that, when we do Qt 6, both
    versions of QtCore could be loaded in memory without conflicts and all
    symbols would be resolved to the correct library. No module can talk to
    both at the same time, but this avoids mistakes of loading them
    indirectly by plugins.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From jani.heikkinen at theqtcompany.com  Tue Jun 23 08:37:42 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Tue, 23 Jun 2015 06:37:42 +0000
Subject: [Development] Qt 5.5.0 Final release 1.7.2015
Message-ID: <DB3PR02MB05407F5A1387AE4CF1C219ACE4A00@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi all,


RC is finally out & we are planning to release Qt 5.5.0 1.7.2015. That's why we need to get final packages ready at the end of this week. And that's why we need all changes for Qt 5.5.0 final in latest Thu morning. So if you are still planning to update change files, documentation etc please do it immediately


br,

Jani
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150623/5baa4bd1/attachment.html

From gunnar at sletta.org  Tue Jun 23 10:03:39 2015
From: gunnar at sletta.org (Gunnar Sletta)
Date: Tue, 23 Jun 2015 10:03:39 +0200
Subject: [Development] QtCS: Qt Quick Performance discussion
In-Reply-To: <1434977273.2372318.304449849.7582E2C2@webmail.messagingengine.com>
References: <1434977273.2372318.304449849.7582E2C2@webmail.messagingengine.com>
Message-ID: <5D4F0D14-68FC-48F5-80F2-04A57D0CE5A3@sletta.org>

As promised in the talk, I moved the qmlbench tool to a separate repo and gave it a readme: https://github.com/sletta/qmlbench

Still under my github account, but now it is at least documented so others can take part in interpreting the results.

> On 22 Jun 2015, at 14:47, Robin Burchell <robin+qt at viroteck.net> wrote:
>
> It seems that nobody took proper notes of the session (oops!) so I'm
> sending the notes Gunnar and I wrote up in preparation for the session.
> If anyone else has any recollections they'd like to add, please go ahead
> and do so :)
>
> =====
>
> # Performance!
>
> * Why it's important
> * What needs to be checked?
>
> # Benchmarking
>
> * Need support in qmlbench for measuring memory usage.
>    * For each set of creation benchmarks, we should run them a second
>    time collecting memory information.
> * Once we have that, once graphed across a single test run, memory leaks
> become easy to spot
>    * Graphed over time, regressions between commits become easy to spot
> * Likewise for the number of items per frame
>
> # Start up performance
>
> We don't have good benchmarks for this, and creating them isn't trivial
> to measure. Need a few generated examples, maybe.
>
> # Memory usage
>
> * Our memory usage is pretty bad in a lot of areas.
> * Sharing data across processes (fork-booster)..
>    * Similar but better sharing achievable through qmlcompiler
> * Benefits could be achieved by carefully allocating all write-once
> expected-to-be-shared data contiguously
> * Dropping CPU-side image data. We recently added QSG_TRANSIENT_IMAGES
> to Qt Quick.
>
> # Item creation performance
>
> * We have pretty good benchmarks for this :)
> * But we (constantly!) keep regressing
>    * This week's example: two separate regressions in QQuickImageBase
>    (high DPI, and automatic transform)
>    * Image items per frame dropped from ~550/frame to 492/frame -- ~10%
>    regression
>    * Allocations for 5000 images increased by 41mb
>    * This is just one case - it's nobody's "fault", there's just nobody
>    taking care of it.
> * Ideally need to do some work on automating runs of it (more on this
> later)
> * What is a good target?
>    * 1000 items / frame in qmlbench on a modern desktop / laptop (mbp
>    is one such)
>    * 100 items / frame on mobile and embedded
>
> # Binding performance
>
> I have no idea whether or not we have good benchmarks for this.
>
> * Probably the creation ones cover the simple cases, but the more
> advanced ones probably need separate coverage.
> * Ideally we also need to monitor the impact of things changing in
> bindings (& multiple things changing at once, and so on?)
> * Help creating benchmarks welcome!
>
> # Graphics Performance:
>
> Are we good here? I think we're close at least..
> * Clipping has been brought up as an issue, 'simplerenderer' solves that
> * Poor batching gives worse result, 'simplerenderer' solves that also,
> but be mindful that simplerenderer also has ~2-3x worse performance
> overall.
>
> # Recommendations for working on QtQuick
>
> * Avoid structures like QHash unless you are sure they are needed (they
> have a heavy cost, and for <1k items or so, QVector, or std::vector, are
> often a better choice)
> * Avoid signal connections
>    * Virtuals instead might be a good choice
>    * If you really have to use them, use qmlobject_connect
>    * See prior art:
>       * qtdeclarative: 0de680c8e8fab36e386dca35e5008ffaa27e8ef6
>       * qtdeclarative: 7568922fa240e6e9440e9c6e93bf8ec00c06ec17
> * Memory compactness:
>    * Don't introduce padding holes
>    * Don't increase the size of frequently allocated things (nodes,
>    items) "accidentally" without careful consideration
>    * Use a lazily-allocated ExtraData for things that aren't needed
>    often
>    * Consider your data types carefully - don't use a 64 bit int for an
>    "on/off" toggle
> * Consider custom data structures & allocation (page allocation of the
> shadow nodes was a big win)
>
> # Specific Items?
>
> * Rectangle implementation could be improved quite a bit (Gunnar?)
> * Text node improvements (Eskil?)
> * Hash of shadow nodes in the batched render is a large problem
>    * https://codereview.qt-project.org/#/c/97708/
> * Delaying compilation (or whatever it is) on inline components until
> they are used. Right now, these can have massive impacts on
> performance/memory unless moved to external files. e.g. "Component {
> Dialog { ... foo ... } }, only used when a button is pressed. It may
> never be pressed.
> * "Don't use" classes, like SpriteSequence :)
> * In general, small items take up huge amounts.. Repeater { model: 500;
> Rectangle { width: 100; height: 100; radius: 10 } } and you have 1Mb or
> something :)
> * QObject -> QQmlData / QQuickItem / QQuickItemPrivate etc all adds up
> on individual items - but what can we do to fix that?
> * The recent introduction of 'padding' in the box model might need a
> second look to make sure it isn't increasing item sizes in common cases.
> 4 extra doubles is quite a large addition to item sizes.
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development


From julien.maille at data-pixel.com  Tue Jun 23 12:07:05 2015
From: julien.maille at data-pixel.com (julien maille)
Date: Tue, 23 Jun 2015 12:07:05 +0200
Subject: [Development] Using qt-labs-qtscriptgenerator on my own class
Message-ID: <mmbb4c$e1o$1@ger.gmane.org>

Hi folks,
I'm a happy user of qtscriptgenerator and I was wondering if there is
anywhere online a short documentation that would explain how I can write
a xml for one of my own class and feed it to the generator.

It is surprising how powerful this tool is, yet there's no resource
available online.

Thanks in advance.


From Lars.Knoll at theqtcompany.com  Tue Jun 23 12:17:40 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Tue, 23 Jun 2015 10:17:40 +0000
Subject: [Development] Qt LTS & C++11 plans
Message-ID: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>

Hi,

I?ve went through the plans that we now have for Qt 5.6 and think that we
need to slightly adjust our plans to deprecate certain compilers and move
over to C++11.

We are currently around 6 weeks away from the 5.6 feature freeze, and
currently the dev branch is still nicely compiling in C++98 mode, and we
still test all the older compilers (and platforms such as WEC7) in the CI
system. I do not see us gaining much from throwing this support now out a
couple of weeks before the feature freeze. On the opposite, I?m afraid it
would lead to us trying to rush some new code at the last minute and not
give us proper time to test before the freeze.

After discussing with a couple of different people, here?s the updated
proposal for 5.6 and onwards.

Qt 5.6:

* We make 5.6 a long term supported release
* We still support C++98 compilers in this release (for the last time),
i.e. We keep the 5.5 compiler baseline
* WEC7 will be still supported
* QNX 6.5 is not supported anymore
* Qt Quick1 and Qt WebKit are not part of the release (but we test that
the sources compile against 5.6)
* We keep Qt Script for this release, it?ll be gone in 5.7 as well

Qt 5.7:

* New compiler baseline with gcc 4.7 and VC++ 2012
* Enable and use the C++11 features supported by these compilers
unconditionally
* WEC7 not supported anymore, WEC2013 supported
* Probably remove support for older Android, Mac and Linux versions as
well (to be discussed)

This would mean that we?d simply remove the older compilers and platforms
from the dev branch of the CI system a few weeks later than originally
planned. From an R&D perspective it means we can start fully relying on
the new compiler baseline from the beginning of August (once we branched
5.6). So it?s a rather small delay from an R&D perspective, but it?ll give
us a broader baseline of supported platforms and compilers for our LTS
release. It?s basically what we wanted to do for 5.5, but couldn?t because
the CI system wasn?t yet in place.

Cheers,
Lars


From christianfeldbacher at yahoo.de  Tue Jun 23 12:18:03 2015
From: christianfeldbacher at yahoo.de (Christian Feldbacher)
Date: Tue, 23 Jun 2015 12:18:03 +0200
Subject: [Development] Qt3D Texture Mapping from loaded obj not working
 correctly (using a DiffuseMapMaterial & Mesh)
Message-ID: <5589325B.5020108@yahoo.de>

Hi,
we're currently working on a 3D showcase game of the new Qt3D module.

When loading a Mesh (.obj format) and applying a texture with
DiffuseMapMaterial, the texture is not applied correctly though. I've
tried several different objects and none of them work.

Any pointers what could cause this or how to fix it?

I've also created a bug report with the models, textures and a testing
project here: https://bugreports.qt.io/browse/QTBUG-46815

Cheers,
Chris from V-Play

From jani.heikkinen at theqtcompany.com  Tue Jun 23 12:31:42 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Tue, 23 Jun 2015 10:31:42 +0000
Subject: [Development] Qt 5.5.0 Post Mortem
Message-ID: <DB3PR02MB0540A78ED65E9F672A69FFCCE4A00@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi all,


We are quite close to releasing Qt 5.5.0 final so it is good time to start thinking & writing down the lessons learnt from that release.


We are so much late so there should be pretty much thing to be improved at least. I have created a wiki page for collecting the information, see https://wiki.qt.io/Qt_5.5.0_Post_Mortem


Please add your comments etc there. You can also sent your feedback directly to me if you don't want to add it to the wiki page because of some reason.


I'll start analysing feedback after summer holidays so please add your comments before beginning of August 2015.


br,


Jani




-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150623/6bcbac8c/attachment.html

From mike.krus at kdab.com  Tue Jun 23 15:12:36 2015
From: mike.krus at kdab.com (Mike Krus)
Date: Tue, 23 Jun 2015 14:12:36 +0100
Subject: [Development] QAtomicInteger default implementations
Message-ID: <88CE6D6C-3BD2-42FB-A47C-8F4717FF835D@kdab.com>

Hi

while investigating crashes in QAtomicInteger<quint64> on iOS, I was wondering why the default is not the use the C++11 implementation if it?s available?
In particular, in qbasicatomic.h, the asm-based implementations are preferred for all arm platforms (and others).
Shouldn?t the version using std::atomic be preferred?

Cheers,

Mike

--
Mike Krus | mike.krus at kdab.com | Senior Software Engineer
KDAB (UK) Ltd., a KDAB Group company
Tel: UK +44-1625-809908
KDAB - The Qt Experts

-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 3859 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150623/1177f8ef/attachment.bin

From thiago.macieira at intel.com  Tue Jun 23 17:37:32 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 23 Jun 2015 08:37:32 -0700
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
Message-ID: <239181426.6AhilcWcB2@tjmaciei-mobl4>

On Tuesday 23 June 2015 10:17:40 Knoll Lars wrote:
> Qt 5.6:
>
> * We make 5.6 a long term supported release
> * We still support C++98 compilers in this release (for the last time),
> i.e. We keep the 5.5 compiler baseline
> * WEC7 will be still supported
> * QNX 6.5 is not supported anymore
> * Qt Quick1 and Qt WebKit are not part of the release (but we test that
> the sources compile against 5.6)
> * We keep Qt Script for this release, it?ll be gone in 5.7 as well
>
> Qt 5.7:
>
> * New compiler baseline with gcc 4.7 and VC++ 2012
> * Enable and use the C++11 features supported by these compilers
> unconditionally
> * WEC7 not supported anymore, WEC2013 supported
> * Probably remove support for older Android, Mac and Linux versions as
> well (to be discussed)

+1
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Tue Jun 23 17:40:27 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 23 Jun 2015 08:40:27 -0700
Subject: [Development] QAtomicInteger default implementations
In-Reply-To: <88CE6D6C-3BD2-42FB-A47C-8F4717FF835D@kdab.com>
References: <88CE6D6C-3BD2-42FB-A47C-8F4717FF835D@kdab.com>
Message-ID: <1579455.gQftNs5Pc3@tjmaciei-mobl4>

On Tuesday 23 June 2015 14:12:36 Mike Krus wrote:
> Hi
>
> while investigating crashes in QAtomicInteger<quint64> on iOS, I was
> wondering why the default is not the use the C++11 implementation if it?s
> available?

Because the quality of the implementation varies a lot. They first showed up in
GCC 4.6 but were lockless atomics only for x86. In GCC 4.7, they were
lockless, but full barrier for other architectures. It wasn't until GCC 4.8
that they began really working.

Then ICC had a bug with constexpr, causing dynamic initialisation of all
atomics in unspecified order.

So it's probably been working for about a year, on Linux.

> In particular, in qbasicatomic.h, the asm-based implementations
> are preferred for all arm platforms (and others). Shouldn?t the version
> using std::atomic be preferred?

We should switch, eventually. It just hasn't happened yet due to the quality
of those std::atomic implementations.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From marc.mutz at kdab.com  Tue Jun 23 19:07:12 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Tue, 23 Jun 2015 19:07:12 +0200
Subject: [Development] QAtomicInteger default implementations
In-Reply-To: <88CE6D6C-3BD2-42FB-A47C-8F4717FF835D@kdab.com>
References: <88CE6D6C-3BD2-42FB-A47C-8F4717FF835D@kdab.com>
Message-ID: <201506231907.12487.marc.mutz@kdab.com>

On Tuesday 23 June 2015 15:12:36 Mike Krus wrote:
> Hi
>
> while investigating crashes in QAtomicInteger<quint64> on iOS, I was
> wondering why the default is not the use the C++11 implementation if it?s
> available? In particular, in qbasicatomic.h, the asm-based implementations
> are preferred for all arm platforms (and others). Shouldn?t the version
> using std::atomic be preferred?

Doing so would be binary incompatible. (Contested) rationale here:
https://codereview.qt-project.org/103848

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From thiago.macieira at intel.com  Tue Jun 23 18:18:03 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 23 Jun 2015 09:18:03 -0700
Subject: [Development] QAtomicInteger default implementations
In-Reply-To: <201506231907.12487.marc.mutz@kdab.com>
References: <88CE6D6C-3BD2-42FB-A47C-8F4717FF835D@kdab.com>
	<201506231907.12487.marc.mutz@kdab.com>
Message-ID: <1873476.riurtUU2kV@tjmaciei-mobl4>

On Tuesday 23 June 2015 19:07:12 Marc Mutz wrote:
> On Tuesday 23 June 2015 15:12:36 Mike Krus wrote:
> > Hi
> >
> > while investigating crashes in QAtomicInteger<quint64> on iOS, I was
> > wondering why the default is not the use the C++11 implementation if it?s
> > available? In particular, in qbasicatomic.h, the asm-based implementations
> > are preferred for all arm platforms (and others). Shouldn?t the version
> > using std::atomic be preferred?
>
> Doing so would be binary incompatible. (Contested) rationale here:
> https://codereview.qt-project.org/103848

Some (like me) argued and argue that it's not binary incompatible. It's an ODR
violation, but all of our minor releases have contained ODR violations for 20
years.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From dangelog at gmail.com  Tue Jun 23 18:47:47 2015
From: dangelog at gmail.com (Giuseppe D'Angelo)
Date: Tue, 23 Jun 2015 18:47:47 +0200
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
Message-ID: <CAPm+cviyrMimYxQHZXUc4inNPpLBNb6Bt1Quf6La6e-E5qjbTg@mail.gmail.com>

On Tue, Jun 23, 2015 at 12:17 PM, Knoll Lars
<Lars.Knoll at theqtcompany.com> wrote:
> Qt 5.7:
>
> * New compiler baseline with gcc 4.7 and VC++ 2012
> * Enable and use the C++11 features supported by these compilers
> unconditionally
> * WEC7 not supported anymore, WEC2013 supported
> * Probably remove support for older Android, Mac and Linux versions as
> well (to be discussed)

Random thought: call it Qt 6? :-P

But the plan sounds nice to me.

Cheers,
--
Giuseppe D'Angelo

From ritt.ks at gmail.com  Tue Jun 23 20:56:26 2015
From: ritt.ks at gmail.com (Konstantin Ritt)
Date: Tue, 23 Jun 2015 22:56:26 +0400
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <CAPm+cviyrMimYxQHZXUc4inNPpLBNb6Bt1Quf6La6e-E5qjbTg@mail.gmail.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<CAPm+cviyrMimYxQHZXUc4inNPpLBNb6Bt1Quf6La6e-E5qjbTg@mail.gmail.com>
Message-ID: <CAGVE+R=59OcHtVZ1+M3RW1tG5Op4e+xHKEqD1pmB6Z1VbR6paQ@mail.gmail.com>

2015-06-23 20:47 GMT+04:00 Giuseppe D'Angelo <dangelog at gmail.com>:

> On Tue, Jun 23, 2015 at 12:17 PM, Knoll Lars
> <Lars.Knoll at theqtcompany.com> wrote:
> > Qt 5.7:
> >
> > * New compiler baseline with gcc 4.7 and VC++ 2012
> > * Enable and use the C++11 features supported by these compilers
> > unconditionally
> > * WEC7 not supported anymore, WEC2013 supported
> > * Probably remove support for older Android, Mac and Linux versions as
> > well (to be discussed)
>

Do we really need WEC7 support these days?

Regards,
Konstantin
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150623/fb79271a/attachment.html

From Lars.Knoll at theqtcompany.com  Tue Jun 23 21:43:14 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Tue, 23 Jun 2015 19:43:14 +0000
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <CAGVE+R=59OcHtVZ1+M3RW1tG5Op4e+xHKEqD1pmB6Z1VbR6paQ@mail.gmail.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<CAPm+cviyrMimYxQHZXUc4inNPpLBNb6Bt1Quf6La6e-E5qjbTg@mail.gmail.com>
	<CAGVE+R=59OcHtVZ1+M3RW1tG5Op4e+xHKEqD1pmB6Z1VbR6paQ@mail.gmail.com>
Message-ID: <8DCDD4EB-A9C5-499D-8E49-D4180EABAFBA@theqtcompany.com>

On 23/06/15 20:56, "Konstantin Ritt" <ritt.ks at gmail.com<mailto:ritt.ks at gmail.com>> wrote:


2015-06-23 20:47 GMT+04:00 Giuseppe D'Angelo <dangelog at gmail.com<mailto:dangelog at gmail.com>>:
On Tue, Jun 23, 2015 at 12:17 PM, Knoll Lars
<Lars.Knoll at theqtcompany.com<mailto:Lars.Knoll at theqtcompany.com>> wrote:
> Qt 5.7:
>
> * New compiler baseline with gcc 4.7 and VC++ 2012
> * Enable and use the C++11 features supported by these compilers
> unconditionally
> * WEC7 not supported anymore, WEC2013 supported
> * Probably remove support for older Android, Mac and Linux versions as
> well (to be discussed)

Do we really need WEC7 support these days?

Yes, we need a solution where we can support it for at least 2 more years. It's easiest and most maintainable if that's simply done by making it part of Qt 5.6 LTS.

Cheers,
Lars



-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150623/d86f3bb1/attachment.html

From thiago.macieira at intel.com  Tue Jun 23 22:01:27 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 23 Jun 2015 13:01:27 -0700
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <CAPm+cviyrMimYxQHZXUc4inNPpLBNb6Bt1Quf6La6e-E5qjbTg@mail.gmail.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<CAPm+cviyrMimYxQHZXUc4inNPpLBNb6Bt1Quf6La6e-E5qjbTg@mail.gmail.com>
Message-ID: <1698774.A294tDYoFj@tjmaciei-mobl4>

On Tuesday 23 June 2015 18:47:47 Giuseppe D'Angelo wrote:
> Random thought: call it Qt 6? :-P

Let's not.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From marc.mutz at kdab.com  Wed Jun 24 00:16:47 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Wed, 24 Jun 2015 00:16:47 +0200
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <1698774.A294tDYoFj@tjmaciei-mobl4>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<CAPm+cviyrMimYxQHZXUc4inNPpLBNb6Bt1Quf6La6e-E5qjbTg@mail.gmail.com>
	<1698774.A294tDYoFj@tjmaciei-mobl4>
Message-ID: <201506240016.47525.marc.mutz@kdab.com>

On Tuesday 23 June 2015 22:01:27 Thiago Macieira wrote:
> On Tuesday 23 June 2015 18:47:47 Giuseppe D'Angelo wrote:
> > Random thought: call it Qt 6? :-P
>
> Let's not.

I agree. Qt 5 required full C++98 support, IMO, Qt 6 should require full C++11
support, maybe C++14, and that's still far, far away.

How wrong I was believing Herb Sutter @ GoingNative 2012 about MSVC picking up
the pace...

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From zhangq.rhy at gmail.com  Wed Jun 24 08:03:07 2015
From: zhangq.rhy at gmail.com (Zhang Qun)
Date: Wed, 24 Jun 2015 14:03:07 +0800
Subject: [Development] QMetaType::registerType: Binary compatibility break
 -- Size mismatch for type 'QPaintBufferCacheEntry' [1024]. Previously
 registered size 0, now registering size 16. Aborted (core dumped)
Message-ID: <CADk-=6f8oOPciWY7JWV=V8Kc0xDJYjJ3JGdxy8X6OTXU-e6LcQ@mail.gmail.com>

Dear all

I manage to compile my code with Qt 5 but when I run the program and
encountered the following error:

  QMetaType::registerType: Binary compatibility break -- Size mismatch for
type 'QPaintBufferCacheEntry' [1024]. Previously registered size 0, now
registering size 16.
Aborted (core dumped)
 I have googled for a few days and did not find any luck. Anyone could help
me with this? Thanks in advance. I am running Qt5 on ubuntu 14.04 64bit.

The source code is simple from sample code of the marble library (a globe
map library):

 Qt Code:
Switch view


   1. #include <QtWidgets/QApplication>
   2. #include <marble/MarbleWidget.h>
   3.
   4. int main(int argc, char** argv)
   5. {
   6.     QApplication
<http://qt-project.org/doc/qt-4.8/qapplication.html> app(argc, argv);
   7.
   8.     // Load Marble using OpenStreetMap in Mercator projection
   9.     Marble::MarbleWidget *mapWidget = new Marble::MarbleWidget;
   10.     mapWidget->setProjection(Marble::Mercator);
   11.     mapWidget->setMapThemeId("earth/openstreetmap/openstreetmap.dgml");
   12.
   13.     mapWidget->setWindowTitle("Hello Marble!");
   14.     mapWidget->show();
   15.     return app.exec();
   16. }

*To copy to clipboard, switch view to plain text mode *

My cmake file to build is below:
Qt Code:
Switch view


   1. CMAKE_MINIMUM_REQUIRED (VERSION 2.8.11)
   2. SET (TARGET hello-marble)
   3. PROJECT (${TARGET})
   4.
   5. # Find includes in corresponding build directories
   6. set(CMAKE_INCLUDE_CURRENT_DIR ON)
   7. # Instruct CMake to run moc automatically when needed.
   8. set(CMAKE_AUTOMOC ON)
   9.
   10. # Find the Qt modules library
   11. find_package(Qt5Widgets REQUIRED)
   12.
   13. SET (QT_LIBRARIES ${QT_LIBRARIES} Qt5::Widgets)
   14. SET (MARBLE_LIBRARIES ${MARBLE_LIBRARIES} marblewidget)
   15. SET (LIBS ${LIBS} ${MARBLE_LIBRARIES} ${QT_LIBRARIES})
   16.
   17. ADD_EXECUTABLE (${TARGET} marble_test.cpp)
   18. TARGET_LINK_LIBRARIES (${TARGET} ${LIBS})

The gdb traceback of my program is:

Program received signal SIGABRT, Aborted.
0x00007ffff56d1cc9 in __GI_raise (sig=sig at entry=6) at
../nptl/sysdeps/unix/sysv/linux/raise.c:56
56	../nptl/sysdeps/unix/sysv/linux/raise.c: No such file or directory.
(gdb) bt
#0  0x00007ffff56d1cc9 in __GI_raise (sig=sig at entry=6) at
../nptl/sysdeps/unix/sysv/linux/raise.c:56
#1  0x00007ffff56d50d8 in __GI_abort () at abort.c:89
#2  0x00007ffff600ab76 in QMessageLogger::fatal(char const*, ...)
const () from /home/zq/Qt5.4.0/5.4/gcc_64/lib/libQt5Core.so.5
#3  0x00007ffff6266175 in QMetaType::registerNormalizedType(QByteArray
const&, void (*)(void*), void* (*)(void const*), void (*)(void*),
void* (*)(void*, void const*), int, QFlags<QMetaType::TypeFlag>,
QMetaObject const*) ()
   from /home/zq/Qt5.4.0/5.4/gcc_64/lib/libQt5Core.so.5
#4  0x00007ffff677dc5a in ?? () from
/home/zq/Qt5.4.0/5.4/gcc_64/lib/libQt5Gui.so.5
#5  0x00007ffff7dea13a in call_init (l=<optimized out>,
argc=argc at entry=1, argv=argv at entry=0x7fffffffdb58,
env=env at entry=0x7fffffffdb68) at dl-init.c:78
#6  0x00007ffff7dea223 in call_init (env=<optimized out>,
argv=<optimized out>, argc=<optimized out>, l=<optimized out>) at
dl-init.c:36
#7  _dl_init (main_map=0x7ffff7ffe1c8, argc=1, argv=0x7fffffffdb58,
env=0x7fffffffdb68) at dl-init.c:126
#8  0x00007ffff7ddb30a in _dl_start_user () from /lib64/ld-linux-x86-64.so.2
#9  0x0000000000000001 in ?? ()
#10 0x00007fffffffdf7a in ?? ()
#11 0x0000000000000000 in ?? ()
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150624/04836f0e/attachment-0001.html

From thiago.macieira at intel.com  Wed Jun 24 08:19:00 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 23 Jun 2015 23:19 -0700
Subject: [Development] QMetaType::registerType: Binary compatibility
	break -- Size mismatch for type 'QPaintBufferCacheEntry'
	[1024]. Previously registered size 0,
	now registering size 16. Aborted (core dumped)
In-Reply-To: <CADk-=6f8oOPciWY7JWV=V8Kc0xDJYjJ3JGdxy8X6OTXU-e6LcQ@mail.gmail.com>
References: <CADk-=6f8oOPciWY7JWV=V8Kc0xDJYjJ3JGdxy8X6OTXU-e6LcQ@mail.gmail.com>
Message-ID: <4312140.yINM56EBbX@tjmaciei-mobl4>

On Wednesday 24 June 2015 14:03:07 Zhang Qun wrote:
> #4  0x00007ffff677dc5a in ?? () from
> /home/zq/Qt5.4.0/5.4/gcc_64/lib/libQt5Gui.so.5

We need to know what this ?? is. Please recompile in debug mode and rerun.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From jedrzej.nowacki at theqtcompany.com  Wed Jun 24 08:32:17 2015
From: jedrzej.nowacki at theqtcompany.com (=?utf-8?B?SsSZZHJ6ZWo=?= Nowacki)
Date: Wed, 24 Jun 2015 08:32:17 +0200
Subject: [Development] QMetaType::registerType: Binary compatibility
	break -- Size mismatch for type 'QPaintBufferCacheEntry'
	[1024]. Previously registered size 0,
	now registering size 16. Aborted (core dumped)
In-Reply-To: <CADk-=6f8oOPciWY7JWV=V8Kc0xDJYjJ3JGdxy8X6OTXU-e6LcQ@mail.gmail.com>
References: <CADk-=6f8oOPciWY7JWV=V8Kc0xDJYjJ3JGdxy8X6OTXU-e6LcQ@mail.gmail.com>
Message-ID: <1914445.hTqkWvMAcm@42>

On Wednesday 24 of June 2015 14:03:07 Zhang Qun wrote:
> QMetaType::registerType: Binary compatibility break -- Size mismatch for
> type 'QPaintBufferCacheEntry' [1024]. Previously registered size 0, now
> registering size 16.

Hi,

  It looks like a build issue, qt library version mismatch... Does Marble
support Qt5?

Cheers,
  J?drek

From thiago.macieira at intel.com  Wed Jun 24 09:01:46 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Wed, 24 Jun 2015 00:01:46 -0700
Subject: [Development] New Module for Serial Buses
In-Reply-To: <D18A5091.265CA%kalle.viironen@theqtcompany.com>
References: <D18A4DA5.26598%kalle.viironen@theqtcompany.com>
	<D18A4E25.265A0%kalle.viironen@theqtcompany.com>
	<D18A5091.265CA%kalle.viironen@theqtcompany.com>
Message-ID: <2861274.T0USBii8cl@tjmaciei-mobl4>

On Tuesday 26 May 2015 13:33:59 Viironen Kalle wrote:
> Hi,
>
> We?d like to create a new Qt module for serial buses. At first stage this
> generic extendable module would include support for CAN-bus, but
> architecture should be such that supporting also other generally used
> serial buses like Flexray, i2c, SPI, 1-wire etc. would be as easy as
> possible.

> Motivation for this kind of generic bus module is to allow easy to use
> direct Qt access to buses that are commonly used when developing embedded
> and/or industrial applications with Qt. Also it would be great to see
> companies working with these buses to adopt the generalised core approach
> that we shall be bringing with this bus module and start developing support
> for different buses directly on top of Qt framework.

> For naming we have thought either QtBus or QtSerialBus. IMO name as such
> should already on it?s own describe the generalised idea of the module.

Hi Kalle

Please take a look at the Automotive Message Broker (AMB) [1] [2]. It has code
to talk to the automotive CAN bus and has support for Qt already. That should
get you started for at least one type of bus.

You won't be able to copy code from it if the intention is to licence
commercially, but you should be able to work with it as a plugin. I might also
be mistaken, but the Broker may be accessible via a D-Bus so there would be no
actual linking if you don't use libamb.

[1] https://01.org/automotive-message-broker
[2] https://github.com/otcshare/automotive-message-broker
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From olivier at woboq.com  Wed Jun 24 10:08:42 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Wed, 24 Jun 2015 10:08:42 +0200
Subject: [Development] QMetaType::registerType: Binary compatibility
	break -- Size mismatch for type 'QPaintBufferCacheEntry'
	[1024]. Previously registered size 0,
	now registering size 16. Aborted (core dumped)
In-Reply-To: <CADk-=6f8oOPciWY7JWV=V8Kc0xDJYjJ3JGdxy8X6OTXU-e6LcQ@mail.gmail.com>
References: <CADk-=6f8oOPciWY7JWV=V8Kc0xDJYjJ3JGdxy8X6OTXU-e6LcQ@mail.gmail.com>
Message-ID: <1737519.TulKnpxBA5@finn>

On Wednesday 24. June 2015 14:03:07 Zhang Qun wrote:
> Dear all
>
> I manage to compile my code with Qt 5 but when I run the program and
> encountered the following error:
>
>   QMetaType::registerType: Binary compatibility break -- Size mismatch for
> type 'QPaintBufferCacheEntry' [1024]. Previously registered size 0, now
> registering size 16.
> Aborted (core dumped)
>  I have googled for a few days and did not find any luck. Anyone could help
> me with this? Thanks in advance. I am running Qt5 on ubuntu 14.04 64bit.

Searching for 'QPaintBufferCacheEntry' on google lead to some report of the
same problems:
https://bugreports.qt.io/browse/QTBUG-27104
https://forum.qt.io/topic/24491/qmetatype-registertype-binary-compatibility-break-size-mismatch-for-type-qpaintbuffercacheentry-1024-previously-registered-size-0-now-regist

It appears that this is because your application loads both Qt5 and Qt4 at the
same time. Qt4 did not register the size and Qt5 tries to register the same
type with a size.

So to fix your problem you must make sure that you do not load a qt4 based
plugin. This can be loaded indirectly from some other library.


--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org



From bo at vikingsoft.eu  Thu Jun 25 08:11:27 2015
From: bo at vikingsoft.eu (Bo Thorsen)
Date: Thu, 25 Jun 2015 08:11:27 +0200
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
Message-ID: <558B9B8F.7010506@vikingsoft.eu>

Den 23-06-2015 kl. 12:17 skrev Knoll Lars:
> Qt 5.6:
>
> * We make 5.6 a long term supported release
> * We still support C++98 compilers in this release (for the last time),
> i.e. We keep the 5.5 compiler baseline
> * WEC7 will be still supported
> * QNX 6.5 is not supported anymore
> * Qt Quick1 and Qt WebKit are not part of the release (but we test that
> the sources compile against 5.6)
> * We keep Qt Script for this release, it?ll be gone in 5.7 as well

To me this looks like the perfect plan. It's exactly what all customers
I have spoken to have been asking for as well.

With an LTS release that has almost all of the modules of the Qt 5
lifetime, I'd be fine with dropping the compilation requirements of
webkit and quick1 from 5.7.

IMO that's the benefit that an LTS support should give - to allow us to
completely drop support for old modules. This gives the option of
shifting resources from keeping f.e. webkit compiling with the latest
version to keeing it running with the LTS release.
Bo Thorsen,
Director, Viking Software.

--
Viking Software
Qt and C++ developers for hire
http://www.vikingsoft.eu

From jani.heikkinen at theqtcompany.com  Thu Jun 25 11:37:32 2015
From: jani.heikkinen at theqtcompany.com (Heikkinen Jani)
Date: Thu, 25 Jun 2015 09:37:32 +0000
Subject: [Development] Qt 5.5.0 content frozen
Message-ID: <DB3PR02MB0540612A2F0FC43760D9CEB9E4AE0@DB3PR02MB0540.eurprd02.prod.outlook.com>

Hi all,


We must freeze the Qt 5.5.0 content now so please don't push any new changes in '5.5.0' branch anymore; those won't be staged. Final qt5.git integration is now ongoing & when it succeed final Qt5.5.0 packages will be created for testing.


br,

Jani
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150625/5204a9e1/attachment.html

From Daniel.Teske at theqtcompany.com  Thu Jun 25 11:43:28 2015
From: Daniel.Teske at theqtcompany.com (Daniel Teske)
Date: Thu, 25 Jun 2015 11:43:28 +0200
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
Message-ID: <25183223.fBE92uRzBR@marvin>

> * WEC7 not supported anymore, WEC2013 supported
So what is the time frame for dropping WEC2013? Because that's the time Qt
will be stuck with MSVC2012.

daniel


From Lars.Knoll at theqtcompany.com  Thu Jun 25 12:09:54 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Thu, 25 Jun 2015 10:09:54 +0000
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <25183223.fBE92uRzBR@marvin>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<25183223.fBE92uRzBR@marvin>
Message-ID: <D1B19FDF.33980%lars.knoll@theqtcompany.com>

On 25/06/15 11:43, "Teske Daniel" <Daniel.Teske at theqtcompany.com> wrote:

>> * WEC7 not supported anymore, WEC2013 supported
>So what is the time frame for dropping WEC2013? Because that's the time
>Qt
>will be stuck with MSVC2012.

WEC2013 just came out. I?m afraid we?ll be stuck with it for some time.

Cheers,
Lars


From Daniel.Teske at theqtcompany.com  Thu Jun 25 12:43:16 2015
From: Daniel.Teske at theqtcompany.com (Daniel Teske)
Date: Thu, 25 Jun 2015 12:43:16 +0200
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <D1B19FDF.33980%lars.knoll@theqtcompany.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<25183223.fBE92uRzBR@marvin>
	<D1B19FDF.33980%lars.knoll@theqtcompany.com>
Message-ID: <5319492.ZsnFFU4QSI@marvin>

On Thursday 25 Jun 2015 12:09:54 Knoll Lars wrote:
> On 25/06/15 11:43, "Teske Daniel" <Daniel.Teske at theqtcompany.com> wrote:
>
>
> >> * WEC7 not supported anymore, WEC2013 supported
> >
> >So what is the time frame for dropping WEC2013? Because that's the time
> >Qt
> >will be stuck with MSVC2012.
>
>
> WEC2013 just came out. I?m afraid we?ll be stuck with it for some time.
>
Right, that's what I expected, I'm guessing the expectation is that it'll be
supported for years.

We need to prioritize moving towards modern C++. The C++ world is changing.We
cannot be stuck on a compiler that has only a minimal set of C++11 features,
if we want Qt to stay relevant.

So, I'm against making WEC2013 a supported platform.

daniel

From Lars.Knoll at theqtcompany.com  Thu Jun 25 13:04:42 2015
From: Lars.Knoll at theqtcompany.com (Knoll Lars)
Date: Thu, 25 Jun 2015 11:04:42 +0000
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <5319492.ZsnFFU4QSI@marvin>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<25183223.fBE92uRzBR@marvin>
	<D1B19FDF.33980%lars.knoll@theqtcompany.com>
	<5319492.ZsnFFU4QSI@marvin>
Message-ID: <D1B1AB23.3398B%lars.knoll@theqtcompany.com>

On 25/06/15 12:43, "Teske Daniel" <Daniel.Teske at theqtcompany.com> wrote:

>On Thursday 25 Jun 2015 12:09:54 Knoll Lars wrote:
>> On 25/06/15 11:43, "Teske Daniel" <Daniel.Teske at theqtcompany.com> wrote:
>>
>>
>> >> * WEC7 not supported anymore, WEC2013 supported
>> >
>> >So what is the time frame for dropping WEC2013? Because that's the time
>> >Qt
>> >will be stuck with MSVC2012.
>>
>>
>> WEC2013 just came out. I?m afraid we?ll be stuck with it for some time.
>>
>Right, that's what I expected, I'm guessing the expectation is that it'll
>be
>supported for years.

Right. But at some point the question will come on which Qt version we
support the platform.
>
>
>We need to prioritize moving towards modern C++. The C++ world is
>changing.We
>cannot be stuck on a compiler that has only a minimal set of C++11
>features,
>if we want Qt to stay relevant.

There?s always a difference between enabling our users to use more modern
C++11 features and us using those ourselves inside our product. Inside the
Qt frameworks, we've always been more conservative in using features
unconditionally that are not supported everywhere.

When we went through the compatibility list during QtCS, it looked like we
can start using quite a few C++11 features unconditionally even with
VS2012. This gives us a much better baseline than what we had previously.

>
>So, I'm against making WEC2013 a supported platform.

Well, please tell me where this is such a big problem that we *have to
have* VS2013 when it comes to our APIs. For our implementation inside Qt,
we can work with slightly older compilers. It?s not the end of the world
and our users wouldn?t even notice.

Cheers,
Lars


From cristian.adam at gmail.com  Thu Jun 25 13:18:17 2015
From: cristian.adam at gmail.com (Cristian Adam)
Date: Thu, 25 Jun 2015 13:18:17 +0200
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <D1B1AB23.3398B%lars.knoll@theqtcompany.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<25183223.fBE92uRzBR@marvin>
	<D1B19FDF.33980%lars.knoll@theqtcompany.com>
	<5319492.ZsnFFU4QSI@marvin>
	<D1B1AB23.3398B%lars.knoll@theqtcompany.com>
Message-ID: <CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>

On Thu, Jun 25, 2015 at 1:04 PM, Knoll Lars <Lars.Knoll at theqtcompany.com>
wrote:

>
>
> Well, please tell me where this is such a big problem that we *have to
> have* VS2013 when it comes to our APIs. For our implementation inside Qt,
> we can work with slightly older compilers. It?s not the end of the world
> and our users wouldn?t even notice.
>
> Cheers,
> Lars
>
>
There is always CopperSpice <http://www.copperspice.com/> the Qt fork which
uses C++11.

They've got rid of moc and plan to replace Qt containers with std ones.
Afterwards maybe
they will add support for namespaces to their peppermill source convertor
utility.

Cheers,
Cristian.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150625/8db97804/attachment.html

From Marco.Bubke at theqtcompany.com  Thu Jun 25 15:55:00 2015
From: Marco.Bubke at theqtcompany.com (Bubke Marco)
Date: Thu, 25 Jun 2015 13:55:00 +0000
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<25183223.fBE92uRzBR@marvin>	<D1B19FDF.33980%lars.knoll@theqtcompany.com>
	<5319492.ZsnFFU4QSI@marvin>
	<D1B1AB23.3398B%lars.knoll@theqtcompany.com>,
	<CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>
Message-ID: <AM3PR02MB0550804002D662185866D8DC89AE0@AM3PR02MB0550.eurprd02.prod.outlook.com>

Wrapping Qt container around standard container is quite a good idea to interact with other code. So Qt Container would be standard container + COW. One of the complains I hear very often is that Qt is an island and sadly in many cases I must agree. I think we should discuss the integration of the new library features too.

Cheers, Marco

________________________________
From: development-bounces+marco.bubke=theqtcompany.com at qt-project.org <development-bounces+marco.bubke=theqtcompany.com at qt-project.org> on behalf of Cristian Adam <cristian.adam at gmail.com>
Sent: Thursday, June 25, 2015 1:18 PM
To: Knoll Lars
Cc: development at qt-project.org
Subject: Re: [Development] Qt LTS & C++11 plans

On Thu, Jun 25, 2015 at 1:04 PM, Knoll Lars <Lars.Knoll at theqtcompany.com<mailto:Lars.Knoll at theqtcompany.com>> wrote:


Well, please tell me where this is such a big problem that we *have to
have* VS2013 when it comes to our APIs. For our implementation inside Qt,
we can work with slightly older compilers. It's not the end of the world
and our users wouldn't even notice.

Cheers,
Lars


There is always CopperSpice<http://www.copperspice.com/> the Qt fork which uses C++11.

They've got rid of moc and plan to replace Qt containers with std ones. Afterwards maybe
they will add support for namespaces to their peppermill source convertor utility.

Cheers,
Cristian.
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150625/c1fa5fa0/attachment-0001.html

From thiago.macieira at intel.com  Thu Jun 25 18:02:58 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Thu, 25 Jun 2015 09:02:58 -0700
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<D1B1AB23.3398B%lars.knoll@theqtcompany.com>
	<CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>
Message-ID: <1931564.b5DOBh5eUO@tjmaciei-mobl4>

On Thursday 25 June 2015 13:18:17 Cristian Adam wrote:
> They've got rid of moc and plan to replace Qt containers with std ones.

If they got rid of moc, then they also got rid of QtDBus, QtScript and QtQml.
That doesn't sound like a "fork of Qt".

Getting rid of moc is waiting for SG7 from the standards committee to come up
with a language reflection feature. At the current pace, it might happen as a
TS for C++2x, so we may be able to start using it in Qt around 2025.

And if they replaced Qt containers with std ones, what replaced QString?
Because the standard ones are nowhere near feature parity with QString.
Unfortunately, CopperSpice's documentation is offline, so I can't tell.

Doesn't seem like a serious project to me. That sounds a lot like TQt from the
Trinity Project...

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Thu Jun 25 18:04:08 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Thu, 25 Jun 2015 09:04:08 -0700
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <AM3PR02MB0550804002D662185866D8DC89AE0@AM3PR02MB0550.eurprd02.prod.outlook.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>
	<AM3PR02MB0550804002D662185866D8DC89AE0@AM3PR02MB0550.eurprd02.prod.outlook.com>
Message-ID: <5418498.arNnXWCuHN@tjmaciei-mobl4>

On Thursday 25 June 2015 13:55:00 Bubke Marco wrote:
> Wrapping Qt container around standard container is quite a good idea to
> interact with other code. So Qt Container would be standard container +
> COW. One of the complains I hear very often is that Qt is an island and
> sadly in many cases I must agree. I think we should discuss the integration
> of the new library features too.

That's a Qt 6 discussion.

Wrapping the std containers with COW will introduce another level of
indirection to the data, which is probably the worst of all solutions. If
we're going to use the std containers in any capacity, we'll have to ditch COW
completely.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Thu Jun 25 18:04:43 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Thu, 25 Jun 2015 09:04:43 -0700
Subject: [Development] Qt 5.5.0 content frozen
In-Reply-To: <DB3PR02MB0540612A2F0FC43760D9CEB9E4AE0@DB3PR02MB0540.eurprd02.prod.outlook.com>
References: <DB3PR02MB0540612A2F0FC43760D9CEB9E4AE0@DB3PR02MB0540.eurprd02.prod.outlook.com>
Message-ID: <2602554.ujij56Rhm1@tjmaciei-mobl4>

On Thursday 25 June 2015 09:37:32 Heikkinen Jani wrote:
> Hi all,
>
>
> We must freeze the Qt 5.5.0 content now so please don't push any new changes
> in '5.5.0' branch anymore; those won't be staged. Final qt5.git integration
> is now ongoing & when it succeed final Qt5.5.0 packages will be created for
> testing.

There are changelog changes that need to go in, including the platform
deprecation updates due to the LTS discussion.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Thu Jun 25 18:30:28 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Thu, 25 Jun 2015 09:30:28 -0700
Subject: [Development] Qt 5.5.0 content frozen
In-Reply-To: <2602554.ujij56Rhm1@tjmaciei-mobl4>
References: <DB3PR02MB0540612A2F0FC43760D9CEB9E4AE0@DB3PR02MB0540.eurprd02.prod.outlook.com>
	<2602554.ujij56Rhm1@tjmaciei-mobl4>
Message-ID: <3355854.XJ7nfEYhbt@tjmaciei-mobl4>

On Thursday 25 June 2015 09:04:43 Thiago Macieira wrote:
> On Thursday 25 June 2015 09:37:32 Heikkinen Jani wrote:
> > Hi all,
> >
> >
> > We must freeze the Qt 5.5.0 content now so please don't push any new
> > changes in '5.5.0' branch anymore; those won't be staged. Final qt5.git
> > integration is now ongoing & when it succeed final Qt5.5.0 packages will
> > be created for testing.
>
> There are changelog changes that need to go in, including the platform
> deprecation updates due to the LTS discussion.

https://codereview.qt-project.org/115267

To be clear: this is not a nice to have. The current changelog in the 5.5.0
branch is *wrong* because it says that Qt Quick 1, QtScript and QtWebKit will
be removed in 5.6.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Thu Jun 25 18:31:54 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Thu, 25 Jun 2015 09:31:54 -0700
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
Message-ID: <14354966.nd7z1Wl9nj@tjmaciei-mobl4>

On Tuesday 23 June 2015 10:17:40 Knoll Lars wrote:
> Qt 5.6:
>
> * We make 5.6 a long term supported release
> * We still support C++98 compilers in this release (for the last time),
> i.e. We keep the 5.5 compiler baseline
> * WEC7 will be still supported
> * QNX 6.5 is not supported anymore
> * Qt Quick1 and Qt WebKit are not part of the release (but we test that
> the sources compile against 5.6)
> * We keep Qt Script for this release, it?ll be gone in 5.7 as well
>
> Qt 5.7:
>
> * New compiler baseline with gcc 4.7 and VC++ 2012
> * Enable and use the C++11 features supported by these compilers
> unconditionally
> * WEC7 not supported anymore, WEC2013 supported
> * Probably remove support for older Android, Mac and Linux versions as
> well (to be discussed)

https://codereview.qt-project.org/115267

I've updated the 5.5.0 changelog to reflect this discussion.

By effect of requiring Clang 3.2 for the C++11 features, we also require XCode
5.0, which in turn removes OS X 10.7 support from 5.7.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From louai.al-khanji at theqtcompany.com  Fri Jun 26 08:12:53 2015
From: louai.al-khanji at theqtcompany.com (Al-Khanji Louai)
Date: Fri, 26 Jun 2015 06:12:53 +0000
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <1931564.b5DOBh5eUO@tjmaciei-mobl4>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<D1B1AB23.3398B%lars.knoll@theqtcompany.com>
	<CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>
	<1931564.b5DOBh5eUO@tjmaciei-mobl4>
Message-ID: <DB4PR02MB028861F02B6FE5FCE9587CB0D1AD0@DB4PR02MB0288.eurprd02.prod.outlook.com>

What they did was to move registration of meta object content to runtime. They basically have structs with static variables and they rely on initialization of these variables at program start-up. It's a lot of macro magic and relies on things like __LINE__ to create unique tokens.

The info above is based on this presentation, the meta object stuff is covered from slide 20 onwards: https://docs.google.com/presentation/d/1Sxei-Em6cnYbE0Zj16j6gwF4SIvGJIE_1tb4P78RN3o/edit?usp=sharing

I don't think they did anything to the container classes, but I haven't looked.

Cheers,
Louai

> -----Original Message-----
> From: development-bounces+louai.al-khanji=theqtcompany.com at qt-
> project.org [mailto:development-bounces+louai.al-
> khanji=theqtcompany.com at qt-project.org] On Behalf Of Thiago Macieira
> Sent: Thursday, June 25, 2015 7:03 PM
> To: development at qt-project.org
> Subject: Re: [Development] Qt LTS & C++11 plans
>
> On Thursday 25 June 2015 13:18:17 Cristian Adam wrote:
> > They've got rid of moc and plan to replace Qt containers with std
> ones.
>
> If they got rid of moc, then they also got rid of QtDBus, QtScript and
> QtQml.
> That doesn't sound like a "fork of Qt".
>
> Getting rid of moc is waiting for SG7 from the standards committee to
> come up
> with a language reflection feature. At the current pace, it might
> happen as a
> TS for C++2x, so we may be able to start using it in Qt around 2025.
>
> And if they replaced Qt containers with std ones, what replaced QString?
> Because the standard ones are nowhere near feature parity with QString.
> Unfortunately, CopperSpice's documentation is offline, so I can't tell.
>
> Doesn't seem like a serious project to me. That sounds a lot like TQt
> from the
> Trinity Project...
>
> --
> Thiago Macieira - thiago.macieira (AT) intel.com
>   Software Architect - Intel Open Source Technology Center
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development

From marc.mutz at kdab.com  Fri Jun 26 10:45:24 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 26 Jun 2015 10:45:24 +0200
Subject: [Development] Move ctors for q_declare_shared types
Message-ID: <201506261045.24634.marc.mutz@kdab.com>

Hi,

I'd like to invite review of
  https://codereview.qt-project.org/115213
despite it clearly not being in a mergeable state (mixes unrelated changes).

It introduces a new shared data pointer that's designed to allow users of the
pointer to have an inline move constructor.

Most of our implicitly shared types already had a move-assignment operator,
because it's just

   QFoo &operator=(QForr &&other) { swap(other); return *this; }

and member-swap was enforced by Q_DECLARE_SHARED since Qt 5.0. I have uploaded
a series of changes that makes (almost) all Q_DECLARE_SHARED types in qtbase
nothrow move constructible. That's good. But far from enough.

What is _really_ important to have for _any_ value type is to have nothrow
move *constructors*, because that's what std::vector uses when reallocating.

So far, adding move ctors was thwarded by the compiler insisting on
instantiating ~Q(Explicitly)SharedDataPointer() in the obvious move ctor
implementation:

    QFoo(QFoo &&other) : d(std::move(other.d)) {}

(see http://stackoverflow.com/questions/9417477), which of course fails in
header files where the shared data pointer's payload is merely forward-
declared.

Having naked pointers instead of smart ones as d-pointers works, see. eg.
QUrl, but moving all classes back to naked d pointers would be highly
controversial, and we'd lose the safety net of deep const propagation that at
least QSharedDataPointer provides (QExplicitlySharedDataPointer doesn't).

The idea is explained in the change's commit message, so I will not repeat it
here.

But I'd like to get some feedback on the patch before I run off and port all
Q_DECLARE_SHARED classes over to the new smart pointer, and then someone pulls
the plug like with Q_STRINGTABLE-

It's a bit urgent, because I'd like to have complete coverage in by 5.6, so
please have a look.

Q_DECLARE_SHARED will at some point start to enforce the presence of a nothrow
move assignment operator, then, later, a nothrow move ctor.

Mid-term goal would be to have all implicitly-shared classes use the same
smart pointer, be nothrow move-assignable, nothrow move-constructible, and
nothrow *default-constructible* (which requires a trick a la QRegion / QString
/ QVector / QList (QtPrivate::RefCount and a shared null state, or else a
nullptr d-pointer)), probably by Qt 5.7.

If you don't believe this matters, see comment in qdatetime.h:

    // ### Qt6: Using a private here has high impact on runtime
    // on users such as QFileInfo. In Qt 6, the data members
    // should be inlined.

And no, it's not mine. Someone actually measured and found it to be
unacceptable. Specifically, that the default ctor allocates memory. In fact,
it's *so* unacceptable that QFileInfo now contains a QVector<QFileInfo>
instead of a QFileInfo[3], which at face value is ridiculous, but delays
memory allocations until they are actually needed.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From olivier at woboq.com  Fri Jun 26 11:59:11 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Fri, 26 Jun 2015 11:59:11 +0200
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
Message-ID: <3234614.pUVFgra0Ue@finn>

On Tuesday 23. June 2015 10:17:40 Knoll Lars wrote:
> Qt 5.6:
>
> * We make 5.6 a long term supported release
> * We still support C++98 compilers in this release (for the last time),
> i.e. We keep the 5.5 compiler baseline
> * WEC7 will be still supported
> * QNX 6.5 is not supported anymore
> * Qt Quick1 and Qt WebKit are not part of the release (but we test that
> the sources compile against 5.6)
> * We keep Qt Script for this release, it?ll be gone in 5.7 as well
>
> Qt 5.7:
>
> * New compiler baseline with gcc 4.7 and VC++ 2012
> * Enable and use the C++11 features supported by these compilers
> unconditionally
> * WEC7 not supported anymore, WEC2013 supported
> * Probably remove support for older Android, Mac and Linux versions as
> well (to be discussed)

+1

There is another point we need to decide on (for Qt 5.7), is whether or not we
relax the policy not to use the standard library in our ABI.

Can we have function that takes or return std::function, std::tuple,
std::unique_ptr, std::vector?

Currently we don't allow it, and this makes it possible to change the
underlying standard library without breaking binary compatibility. (Qt can
link to one standard library, and the application to another. Or, if they use
inline namespace, the namespace can change provided that both old and new
symbols are still in the library.)

However, it is questionable if even this works. We already rely on the
standard library ABI in QException. And most users will have to recompile
everything if they want to change standard library anyway.

We currently do not have a general purpose std::function (there is
QtPrivate::QSlotObjectBase, but it is not as good as std::function
implementations).
I believe it is better to use std::function than trying to reinvent our own.

So should we allow standard library types in our ABI?
Nobody seemed to be opposed in the "Notes from Modern C++ session" thread.

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org


From eskil.abrahamsen-blomfeldt at theqtcompany.com  Fri Jun 26 12:01:57 2015
From: eskil.abrahamsen-blomfeldt at theqtcompany.com (Eskil Abrahamsen Blomfeldt)
Date: Fri, 26 Jun 2015 12:01:57 +0200
Subject: [Development] Make Qt WebView a Qt Add-on
In-Reply-To: <38F23603-6E6F-4DED-ABBA-35F694FEBCE1@theqtcompany.com>
References: <38F23603-6E6F-4DED-ABBA-35F694FEBCE1@theqtcompany.com>
Message-ID: <558D2315.5000202@theqtcompany.com>

On 06/22/2015 12:46 PM, Stromme Christian wrote:
> Hi,
>
> The Qt WebView module has been a tech preview for 5.4 and is still going to be a tech preview for 5.5, but
> for 5.6 we would like to propose that it gets upgraded to an official Qt add-on. Making the module an add-on,
> and also making it part of the normal release infrastructure, should hopefully improve the current (manual)
> release and testing process.
>
> For those not familiar with Qt WebView, the modules goal is to provide a more lightweight WebView API for application
> developers that don?t need to, or are unable to ship a whole web engine with their application.
> Currently Qt WebView provides a Qml only API (a subset of the WebEngineView APIs) and has implementations for
> Android, iOS and OS X. And besides Windows Phone/RT, which is still on the wish list, other desktop platforms should
> already be supported through Qt WebEngine.

+1

-- Eskil


From Daniel.Teske at theqtcompany.com  Fri Jun 26 12:34:31 2015
From: Daniel.Teske at theqtcompany.com (Daniel Teske)
Date: Fri, 26 Jun 2015 12:34:31 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <201506261045.24634.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com>
Message-ID: <1478973.NZpiIqkEE0@marvin>


> Most of our implicitly shared types already had a move-assignment operator,
> because it's just
>
>    QFoo &operator=(QForr &&other) { swap(other); return *this; }
And that's indeed how QVector's move assignment is implemented.

It's also broken.

Just because other is a rvalue reference does not mean that it is a temporary
and thus the is no guarantee that other's dtor gets called.

And thus, this line:

QVector<Klass> vector = std::move(something);

does not gurantees that the dtors for the old contents of vector are called.

For standard containers, this is specified in *container.requirements*
To quote, with: a being a container and rv a non-const rvalue of the same
type:

a = rv

"All existing elements of a are either move assigned to or destroyed,"

I do not see any reason why our containers should not give the same guarantee
for move assignment and consider this a bug.

daniel

From andre at familiesomers.nl  Fri Jun 26 13:14:56 2015
From: andre at familiesomers.nl (=?windows-1252?Q?Andr=E9_Somers?=)
Date: Fri, 26 Jun 2015 13:14:56 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <1478973.NZpiIqkEE0@marvin>
References: <201506261045.24634.marc.mutz@kdab.com> <1478973.NZpiIqkEE0@marvin>
Message-ID: <558D3430.9020607@familiesomers.nl>

Daniel Teske schreef op 26-6-2015 om 12:34:
>> Most of our implicitly shared types already had a move-assignment operator,
>> because it's just
>>
>>     QFoo &operator=(QForr &&other) { swap(other); return *this; }
> And that's indeed how QVector's move assignment is implemented.
>
> It's also broken.
>
> Just because other is a rvalue reference does not mean that it is a temporary
> and thus the is no guarantee that other's dtor gets called.
>
> And thus, this line:
>
> QVector<Klass> vector = std::move(something);
>
> does not gurantees that the dtors for the old contents of vector are called.
Perhaps I am off-base here, but it seems to me that no such requirement
is needed. After all, at some point _something_ will go out of scope.
That's when the destructor will be called. If you use std::move, you
tell the compiler to treat its argument as a temporary. It seems to be
that you also assume the responsibility that you will deal with it as
such, including making sure it will get destroyed.

>
> For standard containers, this is specified in *container.requirements*
> To quote, with: a being a container and rv a non-const rvalue of the same
> type:
>
> a = rv
>
> "All existing elements of a are either move assigned to or destroyed,"
>
> I do not see any reason why our containers should not give the same guarantee
> for move assignment and consider this a bug.
Is this really that much different? A move assign of an element also
doesn't guarantee destruction of the assigned-to contents right then and
there, right? This again may be implemented as a swap.

Perhaps I am missing some subtlety here, but I don't see the problem.

Andr?


From mabrand at mabrand.nl  Fri Jun 26 14:02:39 2015
From: mabrand at mabrand.nl (Mark Brand)
Date: Fri, 26 Jun 2015 14:02:39 +0200
Subject: [Development] Qt 5.5.0 content frozen
In-Reply-To: <3355854.XJ7nfEYhbt@tjmaciei-mobl4>
References: <DB3PR02MB0540612A2F0FC43760D9CEB9E4AE0@DB3PR02MB0540.eurprd02.prod.outlook.com>	<2602554.ujij56Rhm1@tjmaciei-mobl4>
	<3355854.XJ7nfEYhbt@tjmaciei-mobl4>
Message-ID: <558D3F5F.80008@mabrand.nl>



On 25/06/15 18:30, Thiago Macieira wrote:
> On Thursday 25 June 2015 09:04:43 Thiago Macieira wrote:
>> On Thursday 25 June 2015 09:37:32 Heikkinen Jani wrote:
>>> Hi all,
>>>
>>>
>>> We must freeze the Qt 5.5.0 content now so please don't push any new
>>> changes in '5.5.0' branch anymore; those won't be staged. Final qt5.git
>>> integration is now ongoing & when it succeed final Qt5.5.0 packages will
>>> be created for testing.
>> There are changelog changes that need to go in, including the platform
>> deprecation updates due to the LTS discussion.
> https://codereview.qt-project.org/115267
>
> To be clear: this is not a nice to have. The current changelog in the 5.5.0
> branch is *wrong* because it says that Qt Quick 1, QtScript and QtWebKit will
> be removed in 5.6.
>

I'd like to sneak the QtSql changelog in too, if possible.  For the record:

QtSql
-----
  - QMYSQL:
    * Return true for QSqlQuery::isNull on non-existent fields.
    * Keep field precision when formatting a value.
    * [QTBUG-321] Add support for the timeout in connectionOptions.
  - QODBC
    *[QTBUG-39388] Improve autoValue column detection.
  - QPSQL
    *[QTBUG-44381] Fix special floating point handling.


Gerrit won't let me push an update to Thiago's change. Let me know if we
can get these in please.

Mark


From marc.mutz at kdab.com  Fri Jun 26 16:45:18 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 26 Jun 2015 16:45:18 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <1478973.NZpiIqkEE0@marvin>
References: <201506261045.24634.marc.mutz@kdab.com> <1478973.NZpiIqkEE0@marvin>
Message-ID: <201506261645.19310.marc.mutz@kdab.com>

On Friday 26 June 2015 12:34:31 Daniel Teske wrote:
> > Most of our implicitly shared types already had a move-assignment
> > operator, because it's just
> >
> >    QFoo &operator=(QForr &&other) { swap(other); return *this; }
>
> And that's indeed how QVector's move assignment is implemented.
>
> It's also broken.

It isn't. Other is left in an unspecified, but valid state. It's not even
partially formed, as many move operators leave their source.

> Just because other is a rvalue reference does not mean that it is a
> temporary and thus the is no guarantee that other's dtor gets called.
>
> And thus, this line:
>
> QVector<Klass> vector = std::move(something);
>
> does not gurantees that the dtors for the old contents of vector are
> called.

It does. It doesn't say when (when something is going out of scope), but
saying that dtors aren't called is wrong.

The problem you have is that you want immediate resource release. If you want
that, swap something with a new object:

   QVector<Klass>().swap(something);

(or call clear(), but that's Qt-specific). You're never holding more memory at
any given time (if you do this), than with an immidiate-release move
operation. According to the fundamental C++ principle "Don't pay for what you
don't use", not clearing target is the correct thing to do. The standard
should be fixed.

That's containers.

But the vast majority of implicitly-shared classes are pimpled (for BC, not
for CoW reasons), so if you demand immediate resource release for moved-to
objects, then the non-inline Qt classes cannot have move assignment (because
it cannot be inline, and non-inline for BC reasons is also not allowed).

> For standard containers, this is specified in *container.requirements*
> To quote, with: a being a container and rv a non-const rvalue of the same
> type:
>
> a = rv
>
> "All existing elements of a are either move assigned to or destroyed,"
>
> I do not see any reason why our containers should not give the same
> guarantee for move assignment and consider this a bug.

I guess then you also consider it a bug that Qt containers don't meet the std
container complexity guarantees (b/c/o CoW) and don't meet the std container
thread safety guarantees (b/c/o the omission of a non-sharable state when
handing out references to internal state by way of op[] or mutable iterators),
or that they don't have range-ctor or range-insert, or emplace, or allocator
support.

Fix those first - or use a std vector if a std vector is what you want.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From Daniel.Teske at theqtcompany.com  Fri Jun 26 15:42:31 2015
From: Daniel.Teske at theqtcompany.com (Daniel Teske)
Date: Fri, 26 Jun 2015 15:42:31 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <558D3430.9020607@familiesomers.nl>
References: <201506261045.24634.marc.mutz@kdab.com>
	<1478973.NZpiIqkEE0@marvin> <558D3430.9020607@familiesomers.nl>
Message-ID: <15271062.rW2fK44e1q@pegasus>



> > For standard containers, this is specified in *container.requirements*
> > To quote, with: a being a container and rv a non-const rvalue of the same
> > type:
> >
> > a = rv
> >
> > "All existing elements of a are either move assigned to or destroyed,"
> >
> > I do not see any reason why our containers should not give the same
> > guarantee for move assignment and consider this a bug.
>
> Is this really that much different?
There's a huge difference between "either move assigned to or destroyed" and
not doing that.

I'm not sure where you are disagreeing, so can you point out to which of those
4 statements you don't agree?

- Standard containers guarantee that the old elements get either move assigned
or destroyed.

- QVector does not give the same guarantee, because it uses swap.

- QVector should give the same guarantee as the standard containers.

> A move assign of an element also
> doesn't guarantee destruction of the assigned-to contents right then and
> there, right? This again may be implemented as a swap.
If your class is e.g. holding a resource, implementing move assignment as a
swap is wrong. The old resource needs to be freed at the point of assignment.
Doing otherwise makes it harder to reason about code.

For an example of that, see .e.g the shared_ptr in the C++ standard:

"shared_ptr(shared_ptr&& r) noexcept;
Postconditions: *this shall contain the old value of r. r shall be empty.
r.get() == 0."


daniel

From Daniel.Teske at theqtcompany.com  Fri Jun 26 15:55:04 2015
From: Daniel.Teske at theqtcompany.com (Daniel Teske)
Date: Fri, 26 Jun 2015 15:55:04 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <201506261645.19310.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com> <1478973.NZpiIqkEE0@marvin>
	<201506261645.19310.marc.mutz@kdab.com>
Message-ID: <1439156.uJa5lnA9Y7@marvin>

On Friday 26 Jun 2015 16:45:18 Marc Mutz wrote:
> On Friday 26 June 2015 12:34:31 Daniel Teske wrote:
> > > Most of our implicitly shared types already had a move-assignment
> > > operator, because it's just
> > >
> > >    QFoo &operator=(QForr &&other) { swap(other); return *this; }
> >
> > And that's indeed how QVector's move assignment is implemented.
> >
> > It's also broken.
>
> It isn't. Other is left in an unspecified, but valid state. It's not even
> partially formed, as many move operators leave their source.

It's nice that you follow up the denial by a statement that is entirely and
completely irrelevant to the discussion.

> > Just because other is a rvalue reference does not mean that it is a
> > temporary and thus the is no guarantee that other's dtor gets called.
> >
> > And thus, this line:
> >
> > QVector<Klass> vector = std::move(something);
> >
> > does not gurantees that the dtors for the old contents of vector are
> > called.
>
> It does. It doesn't say when (when something is going out of scope), but
> saying that dtors aren't called is wrong.
>
> The problem you have is that you want immediate resource release. If you
> want that, swap something with a new object:
>
>    QVector<Klass>().swap(something);
>
> (or call clear(), but that's Qt-specific). You're never holding more memory
> at any given time (if you do this), than with an immidiate-release move
> operation. According to the fundamental C++ principle "Don't pay for what
> you don't use", not clearing target is the correct thing to do. The
> standard should be fixed.

The standard requires immediate release for a reason. If you don't want that,
just use a swap instead. Implementing move assignment as a swap destroys a
fundamental guarantee of assignment. The old value is destroyed.


> > "All existing elements of a are either move assigned to or destroyed,"
> >
> > I do not see any reason why our containers should not give the same
> > guarantee for move assignment and consider this a bug.
>
> I guess then you also consider it a bug that Qt containers don't meet the
> std container complexity guarantees (b/c/o CoW) and don't meet the std
> container thread safety guarantees (b/c/o the omission of a non-sharable
> state when handing out references to internal state by way of op[] or
> mutable iterators), or that they don't have range-ctor or range-insert, or
> emplace, or allocator support.

Nope those are documented and there was a good reason for implementing them
like that. Some of the omissions are surely only oversights.

If there's a reason for implementing move assignment differently from the
standard containers, then you need to provide it.

daniel

From olivier at woboq.com  Fri Jun 26 16:14:48 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Fri, 26 Jun 2015 16:14:48 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <15271062.rW2fK44e1q@pegasus>
References: <201506261045.24634.marc.mutz@kdab.com>
	<558D3430.9020607@familiesomers.nl> <15271062.rW2fK44e1q@pegasus>
Message-ID: <46302834.e2ioqaDLYH@finn>

On Friday 26. June 2015 15:42:31 Daniel Teske wrote:
> > > For standard containers, this is specified in *container.requirements*
> > > To quote, with: a being a container and rv a non-const rvalue of the
> > > same
> > > type:
> > >
> > > a = rv
> > >
> > > "All existing elements of a are either move assigned to or destroyed,"
> > >
> > > I do not see any reason why our containers should not give the same
> > > guarantee for move assignment and consider this a bug.
> >
> > Is this really that much different?
>
> There's a huge difference between "either move assigned to or destroyed" and
> not doing that.
>
> I'm not sure where you are disagreeing, so can you point out to which of
> those 4 statements you don't agree?
>
> - Standard containers guarantee that the old elements get either move
> assigned or destroyed.

I partially disagree.
The wording seems to indeed implies that the move assignement operator of
std::vector should do iterate over all elements to destroy or move them. But
in practice, GCC implementation does not do that:
http://cpp.sh/2s4w

Is it a bug in the GCC's stdlib implemenation?  Or is it a misunderstanding of
the wording of the standard?

> - QVector does not give the same guarantee, because it uses swap.

Irrelevant.

> - QVector should give the same guarantee as the standard containers.

I disagree with that. QVector is not std::vector. At first, it is implicitly
shared, so that's already a big difference. And therefore we can allow
ourselfs many more differences.

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org



From marc.mutz at kdab.com  Fri Jun 26 17:25:32 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 26 Jun 2015 17:25:32 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <1439156.uJa5lnA9Y7@marvin>
References: <201506261045.24634.marc.mutz@kdab.com>
	<201506261645.19310.marc.mutz@kdab.com> <1439156.uJa5lnA9Y7@marvin>
Message-ID: <201506261725.32579.marc.mutz@kdab.com>

On Friday 26 June 2015 15:55:04 Daniel Teske wrote:
> On Friday 26 Jun 2015 16:45:18 Marc Mutz wrote:
> > On Friday 26 June 2015 12:34:31 Daniel Teske wrote:
> > > > Most of our implicitly shared types already had a move-assignment
> > > > operator, because it's just
> > > >
> > > >    QFoo &operator=(QForr &&other) { swap(other); return *this; }
> > >
> > > And that's indeed how QVector's move assignment is implemented.
> > >
> > > It's also broken.
> >
> > It isn't. Other is left in an unspecified, but valid state. It's not even
> > partially formed, as many move operators leave their source.
>
> It's nice that you follow up the denial by a statement that is entirely and
> completely irrelevant to the discussion.

Unspecified, but valid state is the wording in the standard. I was merely
pointing out that it's acceptable, generally, according to the std, that a
moved-from object is left in an unspecified state. It just has to be valid.

> > > Just because other is a rvalue reference does not mean that it is a
> > > temporary and thus the is no guarantee that other's dtor gets called.
> > >
> > > And thus, this line:
> > >
> > > QVector<Klass> vector = std::move(something);
> > >
> > > does not gurantees that the dtors for the old contents of vector are
> > > called.
> >
> > It does. It doesn't say when (when something is going out of scope), but
> > saying that dtors aren't called is wrong.
> >
> > The problem you have is that you want immediate resource release. If you
> >
> > want that, swap something with a new object:
> >    QVector<Klass>().swap(something);
> >
> > (or call clear(), but that's Qt-specific). You're never holding more
> > memory at any given time (if you do this), than with an
> > immidiate-release move operation. According to the fundamental C++
> > principle "Don't pay for what you don't use", not clearing target is the
> > correct thing to do. The standard should be fixed.
>
> The standard requires immediate release for a reason. If you don't want
> that, just use a swap instead. Implementing move assignment as a swap
> destroys a fundamental guarantee of assignment. The old value is
> destroyed.

That all resources of a are released after an assignment is not a fundamental
guarantee. If you assign to a QRegExp, the state lives on in some internal
cache.

The fundamental guarantee of assignment is that a == b after a = b (at least
for Regular Types, and QVector is Regular).

And you keep that in all detectable cases, unless you use std::move to turn an
lvalue into an xvalue. As soon as you do this, the (real) fundamental
guarantee of assignment is already violated.

> > > "All existing elements of a are either move assigned to or destroyed,"
> > >
> > > I do not see any reason why our containers should not give the same
> > > guarantee for move assignment and consider this a bug.
> >
> > I guess then you also consider it a bug that Qt containers don't meet the
> > std container complexity guarantees (b/c/o CoW) and don't meet the std
> > container thread safety guarantees (b/c/o the omission of a non-sharable
> > state when handing out references to internal state by way of op[] or
> > mutable iterators), or that they don't have range-ctor or range-insert,
> > or emplace, or allocator support.
>
> Nope those are documented and there was a good reason for implementing them
> like that. Some of the omissions are surely only oversights.
>
> If there's a reason for implementing move assignment differently from the
> standard containers, then you need to provide it.

I did. Please re-read my mail.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From julien.blanc at nmc-company.com  Fri Jun 26 16:25:20 2015
From: julien.blanc at nmc-company.com (Julien Blanc)
Date: Fri, 26 Jun 2015 16:25:20 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <46302834.e2ioqaDLYH@finn>
References: <201506261045.24634.marc.mutz@kdab.com>
	<558D3430.9020607@familiesomers.nl> <15271062.rW2fK44e1q@pegasus>
	<46302834.e2ioqaDLYH@finn>
Message-ID: <1435328720.3001.36.camel@nmc-company.com>

Le vendredi 26 juin 2015 ? 16:14 +0200, Olivier Goffart a ?crit :


> >
> > - Standard containers guarantee that the old elements get either move
> > assigned or destroyed.
>
> I partially disagree.
> The wording seems to indeed implies that the move assignement operator of
> std::vector should do iterate over all elements to destroy or move them. But
> in practice, GCC implementation does not do that:
> http://cpp.sh/2s4w
>
> Is it a bug in the GCC's stdlib implemenation?  Or is it a misunderstanding of
> the wording of the standard?


Actually this is an error in your example, not gcc.

Line 15 :
v.push_back( {} ); --> a.push_back({});

The wording says that existing elements in the *destination* container
should be move assigned or destroyed. In that case, gcc correctly
destroys them.

The wording says nothing about individually moving elements (that would
be a huge performance breaker).

Regards,

Julien Blanc


-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150626/95b85fa4/attachment.html

From olivier at woboq.com  Fri Jun 26 16:33:00 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Fri, 26 Jun 2015 16:33 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <46302834.e2ioqaDLYH@finn>
References: <201506261045.24634.marc.mutz@kdab.com>
	<15271062.rW2fK44e1q@pegasus> <46302834.e2ioqaDLYH@finn>
Message-ID: <2555894.0LZanL95rZ@finn>

On Friday 26. June 2015 16:14:48 Olivier Goffart wrote:
> On Friday 26. June 2015 15:42:31 Daniel Teske wrote:
> > > > For standard containers, this is specified in *container.requirements*
> > > > To quote, with: a being a container and rv a non-const rvalue of the
> > > > same
> > > > type:
> > > >
> > > > a = rv
> > > >
> > > > "All existing elements of a are either move assigned to or destroyed,"
> > > >
> > > > I do not see any reason why our containers should not give the same
> > > > guarantee for move assignment and consider this a bug.
> > >
> > > Is this really that much different?
> >
> > There's a huge difference between "either move assigned to or destroyed"
> > and not doing that.
> >
> > I'm not sure where you are disagreeing, so can you point out to which of
> > those 4 statements you don't agree?
> >
> > - Standard containers guarantee that the old elements get either move
> > assigned or destroyed.
>
> I partially disagree.
> The wording seems to indeed implies that the move assignement operator of
> std::vector should do iterate over all elements to destroy or move them. But
> in practice, GCC implementation does not do that:
> http://cpp.sh/2s4w

Sorry, I was wrong.
As Julien pointend out, i reversed the two side of the equality.

> Is it a bug in the GCC's stdlib implemenation?  Or is it a misunderstanding
> of the wording of the standard?
>
> > - QVector does not give the same guarantee, because it uses swap.
>
> Irrelevant.

So indeed, QVector is different and do not have this garentee.

>
> > - QVector should give the same guarantee as the standard containers.
>
> I disagree with that. QVector is not std::vector. At first, it is implicitly
> shared, so that's already a big difference. And therefore we can allow
> ourselfs many more differences.

But this point still stands.

--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org


From gunnar.roth at gmx.de  Fri Jun 26 16:52:16 2015
From: gunnar.roth at gmx.de (Gunnar Roth)
Date: Fri, 26 Jun 2015 16:52:16 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <201506261725.32579.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com>
	<201506261645.19310.marc.mutz@kdab.com> <1439156.uJa5lnA9Y7@marvin>,
	<201506261725.32579.marc.mutz@kdab.com>
Message-ID: <trinity-cbb34aaf-e443-4f52-81b6-604e2ea7d544-1435330336252@3capp-gmx-bs71>

An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150626/9fbf3d72/attachment-0001.html

From thiago.macieira at intel.com  Fri Jun 26 17:34:39 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Fri, 26 Jun 2015 08:34:39 -0700
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <DB4PR02MB028861F02B6FE5FCE9587CB0D1AD0@DB4PR02MB0288.eurprd02.prod.outlook.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<1931564.b5DOBh5eUO@tjmaciei-mobl4>
	<DB4PR02MB028861F02B6FE5FCE9587CB0D1AD0@DB4PR02MB0288.eurprd02.prod.outlook.com>
Message-ID: <1830916.i4CepurbkA@tjmaciei-mobl4>

On Friday 26 June 2015 06:12:53 Al-Khanji Louai wrote:
> What they did was to move registration of meta object content to runtime.
> They basically have structs with static variables and they rely on
> initialization of these variables at program start-up. It's a lot of macro
> magic and relies on things like __LINE__ to create unique tokens.
>
> The info above is based on this presentation, the meta object stuff is
> covered from slide 20 onwards:
> https://docs.google.com/presentation/d/1Sxei-Em6cnYbE0Zj16j6gwF4SIvGJIE_1tb
> 4P78RN3o/edit?usp=sharing

I see, thanks.

It doesn't work with -fvisibility-inlines-hidden.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Fri Jun 26 17:41:11 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Fri, 26 Jun 2015 08:41:11 -0700
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <3234614.pUVFgra0Ue@finn>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<3234614.pUVFgra0Ue@finn>
Message-ID: <3213503.bLTXNgj63D@tjmaciei-mobl4>

On Friday 26 June 2015 11:59:11 Olivier Goffart wrote:
> However, it is questionable if even this works. We already rely on the
> standard library ABI in QException. And most users will have to recompile
> everything if they want to change standard library anyway.

std::exception is compatible between libc++ and libstdc++, so that doesn't
count.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From g.scheikl at avibit.com  Fri Jun 26 18:15:04 2015
From: g.scheikl at avibit.com (Gerhard Scheikl)
Date: Fri, 26 Jun 2015 18:15:04 +0200
Subject: [Development] QVariantMap <-> QML
In-Reply-To: <20150614175739.5693520.19780.26829@theqtcompany.com>
References: <1866360.x5kpfeVIYL@gerhardpc>
	<20150614175739.5693520.19780.26829@theqtcompany.com>
Message-ID: <3486288.4hE2571Nb7@gerhardpc>

Hausmann Simon <Simon.Hausmann at theqtcompany.com>, 14.06.2015 17:57:
> Hi,
>
> This is a result of QVariant being a value type. If you make a copy and
> modify it, then the original remains as-is. The call to setContextProperty
> creates a copy. If you want explicitly shared data between the JavaScript
> environment and C++ then I would recommend using a JavaScript object -
> accessed from C++ as QJSValue, because those are explicitly shared.

Could you please give me a code sample for that approach?
I've tried it in many different ways without succeeding.
If i get to a depth >1 the change does not show up in C++.

Thanks.

Best regards
Gerhard

From marc.mutz at kdab.com  Fri Jun 26 19:23:58 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 26 Jun 2015 19:23:58 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <trinity-cbb34aaf-e443-4f52-81b6-604e2ea7d544-1435330336252@3capp-gmx-bs71>
References: <201506261045.24634.marc.mutz@kdab.com>
	<201506261725.32579.marc.mutz@kdab.com>
	<trinity-cbb34aaf-e443-4f52-81b6-604e2ea7d544-1435330336252@3capp-gmx-bs71>
Message-ID: <201506261923.58787.marc.mutz@kdab.com>

On Friday 26 June 2015 16:52:16 Gunnar Roth wrote:
> Hi Marc
> Gesendet: Freitag, 26. Juni 2015 um 17:25 Uhr
>  Von: "Marc Mutz" <marc.mutz at kdab.com>
>  An: development at qt-project.org
>  Betreff: Re: [Development] Move ctors for q_declare_shared types
>
> Marc are you from the future ? Or is just your  clock wrong ?

Clock, ever since laptop ran out of battery once it resets to an hour later on
each syspend. I have given up for now.

> > >> According to the fundamental C++
> >>
>  > > principle "Don't pay for what you don't use", not clearing target is
>  > > the correct thing to do.
>
>
> You are sure that principle can be applied here? IMO this means that no
> feature should be added to the language , which adds a load to other
> features.

This has been the case for virtually all features with the notable exception
of exceptions, yes.

> For exmple adding move constructors should not make copy
> constructors slower.

Why would it?

> IMHO i find it very unexspected that after f(std::move(a));
> a can be non-empty.

It cannot. That's the move constructor, not the move assignment operator. This
thread is about the move constructor, but unfortunately was highjacked for
talk about the move assignment operator.

> I actually thought  there is a rule for && parameter
> functions, to make these empty. But maybe  there is not. At least Scott
> Meyers seems to have a similar opinion
> http://scottmeyers.blogspot.de/2014/06/the-drawbacks-of-implementing-move.
> html

As you can see from the comments, I disagree with Scott on this one :)

> Wyh can you do this inline?
>  QFoo &operator=(QFoo &&other) { swap(other);QFoo<>().swap(other); return
> *this; } would not work ?

It would. But you would have made a previously fully inline function call a
non-inline one. You might as well copy, then (assuming we're still talking
about implictly shared classes).

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From thiago.macieira at intel.com  Fri Jun 26 19:56:09 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Fri, 26 Jun 2015 10:56:09 -0700
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <201506261645.19310.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com> <1478973.NZpiIqkEE0@marvin>
	<201506261645.19310.marc.mutz@kdab.com>
Message-ID: <1701095.sAS83J4xb5@tjmaciei-mobl4>

On Friday 26 June 2015 16:45:18 Marc Mutz wrote:
> The problem you have is that you want immediate resource release. If you
> want  that, swap something with a new object:
>
>    QVector<Klass>().swap(something);
>
> (or call clear(), but that's Qt-specific).

clear() is changing behaviour to keep reserved capacity if you did reserve().
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Fri Jun 26 19:59:37 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Fri, 26 Jun 2015 10:59:37 -0700
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <201506261645.19310.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com> <1478973.NZpiIqkEE0@marvin>
	<201506261645.19310.marc.mutz@kdab.com>
Message-ID: <4127011.KTptXWG2RU@tjmaciei-mobl4>

On Friday 26 June 2015 16:45:18 Marc Mutz wrote:
> or that they don't have range-ctor or range-insert, or emplace, or
> allocator  support.

Range construction and insertion is easy to add. I have the range insert in my
local copy of QVector, but not the constructor -- I never realised it even
existed in std::vector, actually.

I tried to implement emplace, but didn't find much value because Qt containers
require the type contained to be default constructible and will make copies in
the future anyway.

As for allocators, I've been doing C++ for 20 years and I have never once ever
used one. So that's a P6 "less than not important" task in my view.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From marc.mutz at kdab.com  Fri Jun 26 22:20:11 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Fri, 26 Jun 2015 22:20:11 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <4127011.KTptXWG2RU@tjmaciei-mobl4>
References: <201506261045.24634.marc.mutz@kdab.com>
	<201506261645.19310.marc.mutz@kdab.com>
	<4127011.KTptXWG2RU@tjmaciei-mobl4>
Message-ID: <201506262220.11718.marc.mutz@kdab.com>

On Friday 26 June 2015 19:59:37 Thiago Macieira wrote:
> On Friday 26 June 2015 16:45:18 Marc Mutz wrote:
> > or that they don't have range-ctor or range-insert, or emplace, or
> > allocator  support.
>
[...]
> I tried to implement emplace, but didn't find much value because Qt
> containers require the type contained to be default constructible and will
> make copies in the future anyway.

QList does not require the type to be default-constructible. I think only
QVector and QVarLengthArray do.

> As for allocators, I've been doing C++ for 20 years and I have never once
> ever used one. So that's a P6 "less than not important" task in my view.

I did:
  https://github.com/GPGTools/pinentry/blob/master/secmem/secmem%2B%2B.h

Used here:
  https://github.com/GPGTools/pinentry/blob/master/qt4/secstring.h

And with C++11/14 stateful allocators, I expect allocators to gain popularity:
e.g. QVarLengthArray can be superseded by something like

    char pool[4096];
    pool_allocator<T> alloc(pool);
    std::vector<T, pool_allocator<T>> vec(alloc);
    // ...

which would allow local-memory maps, too:
    std::map<K, V, std::less<>, pool_allocator<std::pair<const K, V>>>
      map(alloc);

Yes, that's what template aliases were invented for :)

Last time I looked (long ago, 2.4-ish), QtC had a per-document memory pool,
too. Don't remember how they handled container classes, though.

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From thiago.macieira at intel.com  Fri Jun 26 22:34:50 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Fri, 26 Jun 2015 13:34:50 -0700
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <201506262220.11718.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com>
	<4127011.KTptXWG2RU@tjmaciei-mobl4>
	<201506262220.11718.marc.mutz@kdab.com>
Message-ID: <1709186.BBGauPqveY@tjmaciei-mobl4>

On Friday 26 June 2015 22:20:11 Marc Mutz wrote:
> > I tried to implement emplace, but didn't find much value because Qt
> > containers require the type contained to be default constructible and will
> > make copies in the future anyway.
>
> QList does not require the type to be default-constructible. I think only
> QVector and QVarLengthArray do.

I misspoke. I meant copyable. So move-only types are not possible in Qt
containers, which removes the biggest user of emplace().

> > As for allocators, I've been doing C++ for 20 years and I have never once
> > ever used one. So that's a P6 "less than not important" task in my view.
>
> I did:
>   https://github.com/GPGTools/pinentry/blob/master/secmem/secmem%2B%2B.h
>
> Used here:
>   https://github.com/GPGTools/pinentry/blob/master/qt4/secstring.h

Another reason it's P6 is precisely because the standard containers have it.

> And with C++11/14 stateful allocators, I expect allocators to gain
> popularity: e.g. QVarLengthArray can be superseded by something like
>
>     char pool[4096];
>     pool_allocator<T> alloc(pool);
>     std::vector<T, pool_allocator<T>> vec(alloc);
>     // ...

That's not what QVarLengthArray is for. The point is that it can exceed the
automatic-storage pool by going dynamic when the data set size is larger than
the common case.

> which would allow local-memory maps, too:
>     std::map<K, V, std::less<>, pool_allocator<std::pair<const K, V>>>
>       map(alloc);
>
> Yes, that's what template aliases were invented for :)

https://gcc.gnu.org/bugzilla/show_bug.cgi?id=66671

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Fri Jun 26 22:52:17 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Fri, 26 Jun 2015 13:52:17 -0700
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <201506261045.24634.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com>
Message-ID: <1719395.RScJXcap0I@tjmaciei-mobl4>

On Friday 26 June 2015 10:45:24 Marc Mutz wrote:
> It introduces a new shared data pointer that's designed to allow users of
> the pointer to have an inline move constructor.
>
> Most of our implicitly shared types already had a move-assignment operator,
> because it's just
>
>    QFoo &operator=(QForr &&other) { swap(other); return *this; }
>
> and member-swap was enforced by Q_DECLARE_SHARED since Qt 5.0. I have
> uploaded a series of changes that makes (almost) all Q_DECLARE_SHARED types
> in qtbase nothrow move constructible. That's good. But far from enough.
>
> What is _really_ important to have for _any_ value type is to have nothrow
> move *constructors*, because that's what std::vector uses when reallocating.
[snip]
> Q_DECLARE_SHARED will at some point start to enforce the presence of a
> nothrow move assignment operator, then, later, a nothrow move ctor.

Hi Marc

Thank you for the change, I think this is a good way forward.

As you can see in my comments in the change, I'd just like to explore a way to
make the code less ugly by having fewer macros required in the public headers.

For example: can we make the deallocation function a member of the front-end
class, which is usually exported anyway? This would avoid the ugly need for
two macros in a row like:

	Q_GUI_EXPORT Q_SHAREDDATAPOINTER_DECLARE_DTOR(QFontPrivate);

Wouldn't the fact that it's a member function remove the need for the
declaration prior to the class instantiation?

We may need a macro anyway, which I'd advise be called
Q_DECLARE_PUBLIC_SHARED(ClassName)

> Mid-term goal would be to have all implicitly-shared classes use the same
> smart pointer, be nothrow move-assignable, nothrow move-constructible, and
> nothrow *default-constructible* (which requires a trick a la QRegion /
> QString / QVector / QList (QtPrivate::RefCount and a shared null state, or
> else a nullptr d-pointer)), probably by Qt 5.7.

Some of those classes are bigger than one pointer and/or may hold more than
one pointer (for example, QSharedPointer).

I've been playing with null d pointers for the past 3 years and I've never
made it work and I wasn't even trying to keep BC.

> If you don't believe this matters, see comment in qdatetime.h:
>
>     // ### Qt6: Using a private here has high impact on runtime
>     // on users such as QFileInfo. In Qt 6, the data members
>     // should be inlined.
>
> And no, it's not mine. Someone actually measured and found it to be
> unacceptable. Specifically, that the default ctor allocates memory. In fact,
> it's *so* unacceptable that QFileInfo now contains a QVector<QFileInfo>
> instead of a QFileInfo[3], which at face value is ridiculous, but delays
> memory allocations until they are actually needed.

Which is also why I inlined the begin() pointer into
QString/QByteArray/QVector, so it doesn't dereference the d pointer to find out
where it's going to be.

At the same time, I made QUrl not be shared at all. Too much headache.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From marc.mutz at kdab.com  Sat Jun 27 12:05:19 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Sat, 27 Jun 2015 12:05:19 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <1719395.RScJXcap0I@tjmaciei-mobl4>
References: <201506261045.24634.marc.mutz@kdab.com>
	<1719395.RScJXcap0I@tjmaciei-mobl4>
Message-ID: <201506271205.20091.marc.mutz@kdab.com>

On Friday 26 June 2015 22:52:17 Thiago Macieira wrote:
> On Friday 26 June 2015 10:45:24 Marc Mutz wrote:
[...]
> For example: can we make the deallocation function a member of the
> front-end class, which is usually exported anyway?

We can, at the expense of an additional template argument on QtP::SDP, but
seeing as I'd like to unexport most, if not all, value classes, for the resons
repeated many times on the list and in reviews, that won't help with the
exporting.

> This would avoid the
> ugly need for two macros in a row like:
>
> 	Q_GUI_EXPORT Q_SHAREDDATAPOINTER_DECLARE_DTOR(QFontPrivate);
>
> Wouldn't the fact that it's a member function remove the need for the
> declaration prior to the class instantiation?

Maybe. I'll try.

> We may need a macro anyway, which I'd advise be called
> Q_DECLARE_PUBLIC_SHARED(ClassName)

What should hide behind that macro? Given a user-supplied swap, we can
generate the move assignment operators from there, but not the move
constructors (in case of more data fields, e.g. in QFont, QPalette
(resolve_mask).

> > Mid-term goal would be to have all implicitly-shared classes use the same
> > smart pointer, be nothrow move-assignable, nothrow move-constructible,
> > and nothrow *default-constructible* (which requires a trick a la QRegion
> > / QString / QVector / QList (QtPrivate::RefCount and a shared null
> > state, or else a nullptr d-pointer)), probably by Qt 5.7.
>
> Some of those classes are bigger than one pointer and/or may hold more than
> one pointer (for example, QSharedPointer).

But QSP is already nothrow default-constructible... What's the point you're
trying to make?

> I've been playing with null d pointers for the past 3 years and I've never
> made it work and I wasn't even trying to keep BC.

Many classes happily use d == nullptr for their partially formed, sometimes
even for their default-constructed state (QTimeZone, e.g.), even though
drawing the line is hard in Qt classes, due to lack of documentation on the
issue. QTimeZone checks d for nullptr in every member function, making it a
valid state (as opposed to a partially-formed one).

But I was more thinking about shared_empty, though that looks to be
complicated. At least the way QRegion does is is flawed (it uses double
indirection, and *still* creates a QVector<> in a dynamically-initialised
static-duration object. I wonder why S?rgio hasn't found that one yet...).

I experimented with QDateTimePrivate, which is simpler, but has a QTimeZone
member. Replacing that one with QTimeZonePrivate*, QSD inheritance with
QtP::RC aggregation and managing the QTZPrivate* ref-count manually should
work, though I stopped to watch GER-FRA and USA-PRC yesterday before coming
anywhere near completion. So probably too much work for all but the most
central classes.

These pimpls start to create a lot of additional work. One more reason to
reduce their use in value classes in the future, and esp. come Qt 6.

[...]

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Sat Jun 27 12:16:57 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Sat, 27 Jun 2015 12:16:57 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <201506261923.58787.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com>
	<trinity-cbb34aaf-e443-4f52-81b6-604e2ea7d544-1435330336252@3capp-gmx-bs71>
	<201506261923.58787.marc.mutz@kdab.com>
Message-ID: <201506271216.58246.marc.mutz@kdab.com>

On Friday 26 June 2015 19:23:58 Marc Mutz wrote:
> > Wyh can you do this inline?
> >
> >  QFoo &operator=(QFoo &&other) { swap(other);QFoo<>().swap(other); return
> >
> > *this; } would not work ?
>
> It would. But you would have made a previously fully inline function call
> a  non-inline one. You might as well copy, then (assuming we're still
> talking about implictly shared classes).

It also is no longer safe for self-assignment.

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From marc.mutz at kdab.com  Sat Jun 27 13:21:02 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Sat, 27 Jun 2015 13:21:02 +0200
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <201506271216.58246.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com>
	<201506261923.58787.marc.mutz@kdab.com>
	<201506271216.58246.marc.mutz@kdab.com>
Message-ID: <201506271321.02758.marc.mutz@kdab.com>

On Saturday 27 June 2015 12:16:57 Marc Mutz wrote:
> On Friday 26 June 2015 19:23:58 Marc Mutz wrote:
> > > Wyh can you do this inline?
> > >
> > >  QFoo &operator=(QFoo &&other) { swap(other);QFoo<>().swap(other);
> > >return
> > >
> > > *this; } would not work ?
> >
> >
> >
> > It would. But you would have made a previously fully inline function call
> > a  non-inline one. You might as well copy, then (assuming we're still
> > talking about implictly shared classes).
>
> It also is no longer safe for self-assignment.

Provided there is a move constructor, which is not the case atm for the
majority of Q_DECLARE_SHARED classes, this would be self-assignment-safe:

   QFoo moved(std::move(other); swap(moved); return *this;

which is nicely symmetric with

   QFoo copy(other); swap(copy); return *this;

the well-known copy-swap idiom.

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From thiago.macieira at intel.com  Sat Jun 27 18:15:47 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sat, 27 Jun 2015 09:15:47 -0700
Subject: [Development] Move ctors for q_declare_shared types
In-Reply-To: <201506271205.20091.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com>
	<1719395.RScJXcap0I@tjmaciei-mobl4>
	<201506271205.20091.marc.mutz@kdab.com>
Message-ID: <4378752.zTF472pEIb@tjmaciei-mobl4>

On Saturday 27 June 2015 12:05:19 Marc Mutz wrote:
> On Friday 26 June 2015 22:52:17 Thiago Macieira wrote:
> > On Friday 26 June 2015 10:45:24 Marc Mutz wrote:
> [...]
>
> > For example: can we make the deallocation function a member of the
> > front-end class, which is usually exported anyway?
>
> We can, at the expense of an additional template argument on QtP::SDP, but
> seeing as I'd like to unexport most, if not all, value classes, for the
> resons repeated many times on the list and in reviews, that won't help with
> the exporting.

I won't accept the unexporting if there are more than a handful of non-inline
functions. MSVC be damned for having a crappy ABI, but we've survived 15 years
like this, so it's not enough a reason to make the headers look uglier and
slower to parse.

The right way to do this is the QList / QListData or the QVector / QArrayData
split.

> > We may need a macro anyway, which I'd advise be called
> > Q_DECLARE_PUBLIC_SHARED(ClassName)
>
> What should hide behind that macro? Given a user-supplied swap, we can
> generate the move assignment operators from there, but not the move
> constructors (in case of more data fields, e.g. in QFont, QPalette
> (resolve_mask).

The declaration of the d pointer, the declaration of the maybe-deleter and
possibly even the copy and move operators/constructors, all done the right
way.

> > > Mid-term goal would be to have all implicitly-shared classes use the
> > > same
> > > smart pointer, be nothrow move-assignable, nothrow move-constructible,
> > > and nothrow *default-constructible* (which requires a trick a la QRegion
> > > / QString / QVector / QList (QtPrivate::RefCount and a shared null
> > > state, or else a nullptr d-pointer)), probably by Qt 5.7.
> >
> > Some of those classes are bigger than one pointer and/or may hold more
> > than
> > one pointer (for example, QSharedPointer).
>
> But QSP is already nothrow default-constructible... What's the point you're
> trying to make?

Just that some of the classes you may be looking at aren't just a pointer.

In any case, QVector, QString and QByteArray's port to QArrayDataPointer
should be finished, as intended during Qt 5.0 development.

> > I've been playing with null d pointers for the past 3 years and I've never
> > made it work and I wasn't even trying to keep BC.
>
> Many classes happily use d == nullptr for their partially formed, sometimes
> even for their default-constructed state (QTimeZone, e.g.), even though
> drawing the line is hard in Qt classes, due to lack of documentation on the
> issue. QTimeZone checks d for nullptr in every member function, making it a
> valid state (as opposed to a partially-formed one).

I meant specifically QArrayData::shared_null being replaced by a null pointer
instead.

> But I was more thinking about shared_empty, though that looks to be
> complicated. At least the way QRegion does is is flawed (it uses double
> indirection, and *still* creates a QVector<> in a dynamically-initialised
> static-duration object. I wonder why S?rgio hasn't found that one yet...).

Right.

> I experimented with QDateTimePrivate, which is simpler, but has a QTimeZone
> member. Replacing that one with QTimeZonePrivate*, QSD inheritance with
> QtP::RC aggregation and managing the QTZPrivate* ref-count manually should
> work, though I stopped to watch GER-FRA and USA-PRC yesterday before coming
> anywhere near completion. So probably too much work for all but the most
> central classes.
>
> These pimpls start to create a lot of additional work. One more reason to
> reduce their use in value classes in the future, and esp. come Qt 6.

Agreed, which means the value classes' own size grows, which means QVariant
should also grow to at least 4 * sizeof(void*).

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From branzeanu.aurel at gmail.com  Sun Jun 28 01:18:10 2015
From: branzeanu.aurel at gmail.com (Aurel Branzeanu)
Date: Sun, 28 Jun 2015 02:18:10 +0300
Subject: [Development] QStorageInfo
In-Reply-To: <A49CB2A0-48A1-47A4-A096-68873A1BB3F1@gmail.com>
References: <!&!AAAAAAAAAAAYAAAAAAAAANNd47GwXpVNtDLvmKWLwjjCgAAAEAAAAI/pMWSkdxBBgCHKU54151QBAAAAAA==@neuf.fr>
	<2169920.1LVK95Dfv4@tjmaciei-mobl4> <53FFF8AB.2030406@gmail.com>
	<1796982.d2VqQVvmRl@tjmaciei-mobl4> <54005A07.4030102@familiesomers.nl>
	<08E770A5-1329-4A48-84EE-40777CB614EC@gmail.com>
	<98B226E3-2CC0-45C5-AFF0-57B795338137@digia.com>
	<A49CB2A0-48A1-47A4-A096-68873A1BB3F1@gmail.com>
Message-ID: <CAOqrvcPy7jrzhicp2mgVzjF5MdXWy5Y26Wt==FVH2tKXi7MVyQ@mail.gmail.com>

Hello, ???? and all the team!

First of all, excuse me for entering such an old discussion!

On Fri, Aug 29, 2014 at 5:05 PM, ???? ?????????? <abbapoh at gmail.com> wrote:

> However, i thinkg we can try to dopen a udisks library. But why not simply
> try to link to it on Linux? Are there any linux versions that doesn't have
> udisks now?
>

Second, may I suggest to link QStorageInfo to libblkid on Linux?
https://github.com/karelzak/util-linux/tree/master/libblkid

It is dealing with filesystems much better than mntent, probing the block
devices directly (sure it also have a cache of its own).

Besides, this is exactly what KDE Solid is using inside. And it still could
be found in QtMobility's old
https://github.com/enthought/qt-mobility/blob/master/src/systeminfo/linux/qsysteminfo_linux_common.cpp

--
Sincerely yours,

Aurel Branzeanu,

mailto: branzeanu.aurel at gmail.com
Skype: tvorogov
GSM Orange:  +373 6 940-7700
GSM Moldcell: +373 7 940-7700
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150628/1d1da2ae/attachment.html

From thiago.macieira at intel.com  Sun Jun 28 18:26:35 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sun, 28 Jun 2015 09:26:35 -0700
Subject: [Development] QStorageInfo
In-Reply-To: <CAOqrvcPy7jrzhicp2mgVzjF5MdXWy5Y26Wt==FVH2tKXi7MVyQ@mail.gmail.com>
References: <!&!AAAAAAAAAAAYAAAAAAAAANNd47GwXpVNtDLvmKWLwjjCgAAAEAAAAI/pMWSkdxBBgCHKU54151QBAAAAAA==@neuf.fr>
	<A49CB2A0-48A1-47A4-A096-68873A1BB3F1@gmail.com>
	<CAOqrvcPy7jrzhicp2mgVzjF5MdXWy5Y26Wt==FVH2tKXi7MVyQ@mail.gmail.com>
Message-ID: <1763827.k1PdlpPlE3@tjmaciei-mobl4>

On Sunday 28 June 2015 02:18:10 Aurel Branzeanu wrote:
> Hello, ???? and all the team!
>
> First of all, excuse me for entering such an old discussion!
>
> On Fri, Aug 29, 2014 at 5:05 PM, ???? ?????????? <abbapoh at gmail.com> wrote:
> > However, i thinkg we can try to dopen a udisks library. But why not simply
> > try to link to it on Linux? Are there any linux versions that doesn't have
> > udisks now?
>
> Second, may I suggest to link QStorageInfo to libblkid on Linux?
> https://github.com/karelzak/util-linux/tree/master/libblkid

It's LGPL, so no, it can't happen.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From kevin.kofler at chello.at  Mon Jun 29 01:22:17 2015
From: kevin.kofler at chello.at (Kevin Kofler)
Date: Mon, 29 Jun 2015 01:22:17 +0200
Subject: [Development] Qt LTS & C++11 plans
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<558B9B8F.7010506@vikingsoft.eu>
Message-ID: <mmpvjc$7aa$1@ger.gmane.org>

Bo Thorsen wrote:
> With an LTS release that has almost all of the modules of the Qt 5
> lifetime, I'd be fine with dropping the compilation requirements of
> webkit and quick1 from 5.7.
>
> IMO that's the benefit that an LTS support should give - to allow us to
> completely drop support for old modules. This gives the option of
> shifting resources from keeping f.e. webkit compiling with the latest
> version to keeing it running with the LTS release.

GNU/Linux distributions will require QtWebKit to keep compiling for a LONG
time to go.

In fact, it is already a big problem for us that it is being deprecated at
all. QtWebEngine is not an adequate replacement, neither for developers
(insufficient API), nor for packagers (bundling Chromium that itself bundles
dozens of libraries makes this a completely unacceptable package for at
least Fedora and Debian). But even if it were, applications are not going to
be ported to it overnight.

We cannot just ship the LTS Qt because some applications will definitely
require the latest Qt, and having 2 different Qt 5.x versions around is NOT
going to work. Unlike the average application developer, we have MANY
applications and libraries to care about, and they need to be able to work
together.

        Kevin Kofler


From thiago.macieira at intel.com  Mon Jun 29 02:02:14 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Sun, 28 Jun 2015 17:02:14 -0700
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <mmpvjc$7aa$1@ger.gmane.org>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<558B9B8F.7010506@vikingsoft.eu> <mmpvjc$7aa$1@ger.gmane.org>
Message-ID: <2607795.rGNPd9zvRZ@tjmaciei-mobl4>

On Monday 29 June 2015 01:22:17 Kevin Kofler wrote:
> GNU/Linux distributions will require QtWebKit to keep compiling for a LONG
> time to go.

You'd do everyone a service and stop that soon, as shipping a web engine that
is not receiving security updates is a dangerous thing to do. Applications
that depend on it will need to be ported away from it or dropped from the
repository, unfortunately.

> In fact, it is already a big problem for us that it is being deprecated at
> all. QtWebEngine is not an adequate replacement, neither for developers
> (insufficient API), nor for packagers (bundling Chromium that itself bundles
> dozens of libraries makes this a completely unacceptable package for at
> least Fedora and Debian). But even if it were, applications are not going
> to be ported to it overnight.

Chromium devs are willing to talk about unbundling. Have you reached out to
them?

> We cannot just ship the LTS Qt because some applications will definitely
> require the latest Qt, and having 2 different Qt 5.x versions around is NOT
> going to work. Unlike the average application developer, we have MANY
> applications and libraries to care about, and they need to be able to work
> together.

Fortunately, you will be able to compile QtWebKit and QtScript 5.6 with some
future versions of Qt. As long as someone is testing then and supplying build
fixes, it should work.

QtQuick1 will stop working soon after 5.6 due to its immense use of Qt private
API.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From akseli.salovaara at theqtcompany.com  Mon Jun 29 09:13:12 2015
From: akseli.salovaara at theqtcompany.com (Salovaara Akseli)
Date: Mon, 29 Jun 2015 07:13:12 +0000
Subject: [Development] New Qt 5.5.0 snapshot available - aimed to be final
	packages
Message-ID: <HE1PR02MB0761DEE8C4D16BE58D36FB98EDAA0@HE1PR02MB0761.eurprd02.prod.outlook.com>

Hi all,



We have new Qt 5.5.0 packages available which are aimed to be final.



Windows: http://download.qt.io/snapshots/qt/5.5/5.5.0/2015-06-26_109/

Linux: http://download.qt.io/snapshots/qt/5.5/5.5.0/2015-06-26_136/

Mac: http://download.qt.io/snapshots/qt/5.5/5.5.0/2015-06-26_111/

Source: http://download.qt.io/snapshots/qt/5.5/5.5.0/latest_src/   (source package mirroring is in progress)



Please check these packages now and inform me immediately if you find something broken & blocking the release.

If nothing serious is found during testing we will release these packages Wednesday 01.07.2015.



Br,

Akseli

--
Akseli Salovaara
Software Specialist
The Qt Company
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150629/fa10de2d/attachment.html

From vivo75 at gmail.com  Mon Jun 29 10:14:04 2015
From: vivo75 at gmail.com (Francesco Riosa)
Date: Mon, 29 Jun 2015 10:14:04 +0200
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <2607795.rGNPd9zvRZ@tjmaciei-mobl4>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<558B9B8F.7010506@vikingsoft.eu> <mmpvjc$7aa$1@ger.gmane.org>
	<2607795.rGNPd9zvRZ@tjmaciei-mobl4>
Message-ID: <5590FE4C.6020304@gmail.com>

Il 29/06/2015 02:02, Thiago Macieira ha scritto:

SNIP
>> In fact, it is already a big problem for us that it is being deprecated at
>> all. QtWebEngine is not an adequate replacement, neither for developers
>> (insufficient API), nor for packagers (bundling Chromium that itself bundles
>> dozens of libraries makes this a completely unacceptable package for at
>> least Fedora and Debian). But even if it were, applications are not going
>> to be ported to it overnight.
> Chromium devs are willing to talk about unbundling. Have you reached out to
> them?
>

sorry for the intrusion, about unbundling a good number of bundled
libraries can be unbundled, gentoo do this, search
"remove_bundled_libraries.py"
in the following ebuild (bash script)

https://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/www-client/chromium/chromium-45.0.2438.3.ebuild

most but not _all_ are libs are unbundled, maybe more hands on problem
could help reaching perfection ;)
good luck

SNIP


From Daniel.Teske at theqtcompany.com  Mon Jun 29 13:44:13 2015
From: Daniel.Teske at theqtcompany.com (Daniel Teske)
Date: Mon, 29 Jun 2015 13:44:13 +0200
Subject: [Development] FileRe:  Move ctors for q_declare_shared types
In-Reply-To: <2555894.0LZanL95rZ@finn>
References: <201506261045.24634.marc.mutz@kdab.com> <46302834.e2ioqaDLYH@finn>
	<2555894.0LZanL95rZ@finn>
Message-ID: <1580715.OeM2uJ12qA@pegasus>


> > > - QVector should give the same guarantee as the standard containers.
> >
> > I disagree with that. QVector is not std::vector. At first, it is
> > implicitly shared, so that's already a big difference. And therefore we
> > can allow ourselfs many more differences.
>
> But this point still stands.

Right, there's a argument possible that gratuitous differences should be
avoided, after all it has the same name, so it should be semantically close,
but well, I'm not going to bother with that.

Instead I will argue that:
This guarantee is important, valuable and good and Qt not giving this is bad.

So, in this example:

QSharedPointer<SomeClass> a = [...]
QSharedPointer<SomeClass> b = [...]
a  = std::move(b);

after this line, b holds a reference to whatever a contained prior to the
move, since QSharedPointer is using swap to implement move assignment.

This is (mostly) fine if b is a temporary, since it only affects the order of
destruction.

If b though is a e.g. a member variable  of a class, and the user intends to
move resources between objects, b might not be destructed until much later.

If the order of destruction is important, or that a resource destruction has a
side effect this is bad.

Since Qt can not know whether the destructor of the type held in a shared
pointer or a vector has a important side effect, Qt classes have to assume that
there are such side effects.

It is also surprising and counter intuitive that copy assignment and move
assignment treat the old value differently, and none of the standard library
types that hold user types behave in such a way. If the user intended this
behavior, s/he could have called swap instead.

In support of this argument, let me point to the history of this guarantee
for vector in the standard. (The text for shared_ptr always contained the
guarantee, so the history there is not as interesting.)

First, in 2007!, the issue 675 added the relevant text:
"All existing elements of a are either move assigned or destructed." was added
to container.requirements.

See Issue 675 at http://open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2456.html.

Do note, that the proposed resolution is at the bottom, and the discussion is
best understood with the proposed resolution in mind.

This issue and proposed resolution was submitted by Howard E. Hinnant, who was
the lead designer and author of the move semantics standardization papers, is
the lead author of libc++ and was the chairman of the LWG from 2005 to 2010.

The relevant quote:

"Move semantics means not caring what happens to the source (v2 in this
example). It doesn't mean not caring what happens to the target (v1). In the
above example both [copy and move] assignments should have the same effect on
v1. Any non-shared ostream's v1 owns before the assignment should be closed,
whether v1 is undergoing copy assignment or move assignment.

This implies that the semantics of move assignment of a generic container
should be clear, swap instead of just swap. An alternative which could achieve
the same effect would be to move assign each element. In either case, the
complexity of move assignment needs to be relaxed to O(v1.size()). "

The same argument of course applies to QSharedPointer too:

QSharedPointer<QFile> a;
QSharedPointer<QFile> b;

a = std::move(b) should close the old QFile held in a.

And here:
http://stackoverflow.com/questions/6687388/why-do-some-people-use-swap-for-move-assignments

Howard E. Hinnant writes:
"In general a move assignment operator should:
- Destroy visible resources (though maybe save implementation detail
resources).
- Move assign all bases and members.
- If the move assignment of bases and members didn't make the rhs resource-
less, then make it so."

daniel


From helio at kde.org  Mon Jun 29 14:44:03 2015
From: helio at kde.org (Helio Chissini de Castro)
Date: Mon, 29 Jun 2015 09:44:03 -0300
Subject: [Development] New Qt 5.5.0 snapshot available - aimed to be
	final packages
In-Reply-To: <HE1PR02MB0761DEE8C4D16BE58D36FB98EDAA0@HE1PR02MB0761.eurprd02.prod.outlook.com>
References: <HE1PR02MB0761DEE8C4D16BE58D36FB98EDAA0@HE1PR02MB0761.eurprd02.prod.outlook.com>
Message-ID: <CAKPiqoGGQvqJMAkGjgdeB1KA_YajsMFLv2ZAUALA_8ewLB+CuQ@mail.gmail.com>

Hello

Can you please generate the splitted set of packages ?

[]'s

On Mon, Jun 29, 2015 at 4:13 AM, Salovaara Akseli <
akseli.salovaara at theqtcompany.com> wrote:

>  Hi all,
>
>
>
> We have new Qt 5.5.0 packages available which are aimed to be final.
>
>
>
> Windows: http://download.qt.io/snapshots/qt/5.5/5.5.0/2015-06-26_109/
>
> Linux: http://download.qt.io/snapshots/qt/5.5/5.5.0/2015-06-26_136/
>
> Mac: http://download.qt.io/snapshots/qt/5.5/5.5.0/2015-06-26_111/
>
> Source: http://download.qt.io/snapshots/qt/5.5/5.5.0/latest_src/
>   (source package mirroring is in progress)
>
>
>
> Please check these packages now and inform me immediately if you find
> something broken & blocking the release.
>
> If nothing serious is found during testing we will release these packages
> Wednesday 01.07.2015.
>
>
>
> Br,
>
> Akseli
>
>
>
> --
>
> Akseli Salovaara
>
> Software Specialist
>
> The Qt Company
>
> _______________________________________________
> Development mailing list
> Development at qt-project.org
> http://lists.qt-project.org/mailman/listinfo/development
>
>
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150629/3a1dd2b3/attachment.html

From marc.mutz at kdab.com  Mon Jun 29 17:14:57 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 29 Jun 2015 17:14:57 +0200
Subject: [Development] FileRe:  Move ctors for q_declare_shared types
In-Reply-To: <1580715.OeM2uJ12qA@pegasus>
References: <201506261045.24634.marc.mutz@kdab.com> <2555894.0LZanL95rZ@finn>
	<1580715.OeM2uJ12qA@pegasus>
Message-ID: <201506291714.58013.marc.mutz@kdab.com>

On Monday 29 June 2015 13:44:13 Daniel Teske wrote:
> Instead I will argue that:
> This guarantee is important, valuable and good and Qt not giving this is
> bad.
>
> So, in this example:
>
> QSharedPointer<SomeClass> a = [...]
> QSharedPointer<SomeClass> b = [...]
> a  = std::move(b);

I repect Howard a lot, and he's right, to a point, even though I'd argue that
explicitly clearing a moved-from object that isn't immediately going out of
scope afterwards should be considered good coding practice, if only to give
the reader of the code a hint as to what the state of the object is now.

But there are additional constraints here. The std library contains next to no
out-of-line classes. Destoying the LHS upon move assignment is thus trivial,
and comes at only minor cost (though the O(N) behaviour _can_ be troublesome
in practice even so). Consequently, all your examples are of template classes.

But for most Qt types, and indeed the vast majority of those this thread
is^Wwas originally about, there is an extremly high cost associated with
destroying the LHS compared to just swapping the state into the RHS: out-of-
line destructor calls. They are not free. They act as compiler-firewalls. The
compiler loses a lot of the little information about a pimpled object that it
had, and not only that: it loses information about at the very least all other
objects of the same type in scope, because it must assume that they are all
shared. It probably loses *all* information about *all* reference type objects
in scope, too.

That needs to be seen in connection with the future of the RHS. In the vast
majority of cases, the RHS just gets its dtor called at the very next
opportunity. If the LHS was destroyed as part of the move, then the RHS dtor
will have little to nothing to do. It's an extremely expensive no-op, and
doubles the number of dtor calls compared to swapping.

So, it doubles the number of dtor calls, and it pessimises all code around it.
I am not prepared to make that pessimisation for out-of-line types. People who
use std::move can imo be bothered to clear the moved-from object after the
move in those miniscule fraction of cases where that actually matters. Forcing
people to use swap (if, indeed, they can, because swap() doesn't bind to
rvalues on the rhs) for the common case is bad api design.

For inline types, see https://codereview.qt-project.org/115376

Thanks,
Marc

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From thiago.macieira at intel.com  Mon Jun 29 17:50:31 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 29 Jun 2015 08:50:31 -0700
Subject: [Development] FileRe:  Move ctors for q_declare_shared types
In-Reply-To: <201506291714.58013.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com>
	<1580715.OeM2uJ12qA@pegasus>
	<201506291714.58013.marc.mutz@kdab.com>
Message-ID: <1485517.dpM0lyFA6C@tjmaciei-mobl4>

On Monday 29 June 2015 17:14:57 Marc Mutz wrote:
> So, it doubles the number of dtor calls, and it pessimises all code around
> it.  I am not prepared to make that pessimisation for out-of-line types.
> People who use std::move can imo be bothered to clear the moved-from object
> after the move in those miniscule fraction of cases where that actually
> matters. Forcing people to use swap (if, indeed, they can, because swap()
> doesn't bind to rvalues on the rhs) for the common case is bad api design.

I agree with Marc here.

But, isn't there a third way for some types? For those that can take a null d-
pointer, it should be easy to just do:

	Klass &operator=(Klass &&other)
	{ d = other.d; other.d = nullptr; return *this; }

This is better than the three-way swap because there's no extra temporary
being constructed and destructed out-of-line.

The drawback is that it implies null-d-pointer support forever, since it got
inlined in user code.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From marc.mutz at kdab.com  Mon Jun 29 20:42:40 2015
From: marc.mutz at kdab.com (Marc Mutz)
Date: Mon, 29 Jun 2015 20:42:40 +0200
Subject: [Development] FileRe:  Move ctors for q_declare_shared types
In-Reply-To: <1485517.dpM0lyFA6C@tjmaciei-mobl4>
References: <201506261045.24634.marc.mutz@kdab.com>
	<201506291714.58013.marc.mutz@kdab.com>
	<1485517.dpM0lyFA6C@tjmaciei-mobl4>
Message-ID: <201506292042.40565.marc.mutz@kdab.com>

On Monday 29 June 2015 17:50:31 Thiago Macieira wrote:
> On Monday 29 June 2015 17:14:57 Marc Mutz wrote:
> > So, it doubles the number of dtor calls, and it pessimises all code
> > around it.  I am not prepared to make that pessimisation for out-of-line
> > types. People who use std::move can imo be bothered to clear the
> > moved-from object after the move in those miniscule fraction of cases
> > where that actually matters. Forcing people to use swap (if, indeed,
> > they can, because swap() doesn't bind to rvalues on the rhs) for the
> > common case is bad api design.
>
> I agree with Marc here.
>
> But, isn't there a third way for some types? For those that can take a null
> d- pointer, it should be easy to just do:
>
> 	Klass &operator=(Klass &&other)
> 	{ d = other.d; other.d = nullptr; return *this; }

Doesn't work. this->d is leaked in the process.

--
Marc Mutz <marc.mutz at kdab.com> | Senior Software Engineer
KDAB (Deutschland) GmbH & Co.KG, a KDAB Group Company
Tel: +49-30-521325470
KDAB - The Qt Experts

From thiago.macieira at intel.com  Mon Jun 29 19:59:27 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 29 Jun 2015 10:59:27 -0700
Subject: [Development] FileRe:  Move ctors for q_declare_shared types
In-Reply-To: <201506292042.40565.marc.mutz@kdab.com>
References: <201506261045.24634.marc.mutz@kdab.com>
	<1485517.dpM0lyFA6C@tjmaciei-mobl4>
	<201506292042.40565.marc.mutz@kdab.com>
Message-ID: <4023757.McDCujOhkA@tjmaciei-mobl4>

On Monday 29 June 2015 20:42:40 Marc Mutz wrote:
> > But, isn't there a third way for some types? For those that can take a
> > null
> >
> > d- pointer, it should be easy to just do:
> >
> >
> >       Klass &operator=(Klass &&other)
> >       { d = other.d; other.d = nullptr; return *this; }
>
> Doesn't work. this->d is leaked in the process.

Never mind then...
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From sergio.martins at kdab.com  Mon Jun 29 20:44:49 2015
From: sergio.martins at kdab.com (Sergio Martins)
Date: Mon, 29 Jun 2015 19:44:49 +0100
Subject: [Development] Disabling thread safe static guards
Message-ID: <1678171.Eg552Sdme5@desktop>

Hi,


Can we disable gcc's feature of emitting extra code to make local static
initialization thread safe ? (-fno-threadsafe-statics)

Since MSVC doesn't support it we can't rely on this feature in cross-platform
Qt code (maybe only in QPA code).

Generates uneeded code and helps hidding crashes that developers using Linux
don't notice.



Regards,
--
S?rgio Martins | sergio.martins at kdab.com | Software Engineer
Klar?lvdalens Datakonsult AB, a KDAB Group company
Tel: Sweden (HQ) +46-563-540090, USA +1-866-777-KDAB(5322)
KDAB - The Qt Experts
-------------- next part --------------
A non-text attachment was scrubbed...
Name: smime.p7s
Type: application/pkcs7-signature
Size: 5909 bytes
Desc: not available
Url : http://lists.qt-project.org/pipermail/development/attachments/20150629/b9c32ee4/attachment.bin

From thiago.macieira at intel.com  Mon Jun 29 22:02:42 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 29 Jun 2015 13:02:42 -0700
Subject: [Development] Disabling thread safe static guards
In-Reply-To: <1678171.Eg552Sdme5@desktop>
References: <1678171.Eg552Sdme5@desktop>
Message-ID: <5632302.95oshOYVo9@tjmaciei-mobl4>

On Monday 29 June 2015 19:44:49 Sergio Martins wrote:
> Hi,
>
>
> Can we disable gcc's feature of emitting extra code to make local static
> initialization thread safe ? (-fno-threadsafe-statics)

No.

> Since MSVC doesn't support it we can't rely on this feature in
> cross-platform Qt code (maybe only in QPA code).

Correct.

> Generates uneeded code and helps hidding crashes that developers using Linux
> don't notice.

The code is needed because we use it in Q_GLOBAL_STATIC.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Mon Jun 29 23:12:44 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 29 Jun 2015 14:12:44 -0700
Subject: [Development] Disabling thread safe static guards
In-Reply-To: <5632302.95oshOYVo9@tjmaciei-mobl4>
References: <1678171.Eg552Sdme5@desktop> <5632302.95oshOYVo9@tjmaciei-mobl4>
Message-ID: <17093090.3GaNYpuUok@tjmaciei-mobl4>

On Monday 29 June 2015 13:02:42 Thiago Macieira wrote:
> > Since MSVC doesn't support it we can't rely on this feature in
> > cross-platform Qt code (maybe only in QPA code).
>
> Correct.

Also, it's one of the C++11 features. It's tracked as
Q_COMPILER_THREADSAFE_STATICS and is supported in MSVC since 2015.
--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From ansel at copperspice.com  Tue Jun 30 07:51:25 2015
From: ansel at copperspice.com (Ansel Sermersheim)
Date: Mon, 29 Jun 2015 22:51:25 -0700
Subject: [Development] Qt LTS & C++11 plans (CopperSpice)
In-Reply-To: <CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<25183223.fBE92uRzBR@marvin>
	<D1B19FDF.33980%lars.knoll@theqtcompany.com>
	<5319492.ZsnFFU4QSI@marvin>
	<D1B1AB23.3398B%lars.knoll@theqtcompany.com>
	<CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>
Message-ID: <55922E5D.2000002@copperspice.com>

> There is always CopperSpice the Qt fork which uses C++11.  They've
> got rid of moc and plan to replace Qt containers with std ones.
> Afterwards maybe they will add support for namespaces to their
> peppermill source convertor utility.

I am one of the developers of CopperSpice and I would like to
elaborate on our project. Our initial release of CopperSpice was in
July 2014 with our target audience being our local C++ Users Group in
the San Francisco Bay area.  We wanted to explore the interest in
CopperSpice and obtain feedback regarding the steps we took to remove
moc. Our full presentation in February 2015 was well received and
attended by several prominent people.

Our intent was to formally announce CopperSpice at CPPCon in
September.  Oddly, once we submitted a proposal for speaking at
CPPCon, someone in Europe decided to post information about
CopperSpice on reddit. As of today I can announce we have been
approved to speak about CopperSpice at CPPCon.

The current version of CopperSpice supports the full Qt Metaobject
System, requires C++11, and includes CsCore, CsGui, CsPhonon, as well
as CsScript, and CsWebkit. We have CsDBus partially ported, however
more time has been spent on other libraries. It will be available in
our September release.

I would like to clarify, we did not use anything from the Woboq blog
posting as others have speculated. We had moc removed from CopperSpice
a year earlier than the release of this blog. We are also not
associated with the Trinity Project.

As a consequence of our presentation in February we have modified
parts of the internal registration code to better implement
reflection. We will be making a few more changes before this is
released.

Our September release of CopperSpice will include changes to the
contain library, reimplementation of atomic types, our new changes to
the MetaObject System registration, full API documentation, ??

We would like to encourage developers to attend CPPCon to learn about
modern C++ and where it is going. For more information please check
out the following video.

         http://cppcon.org/2015promo/

Our thanks go out to Trolltech, Nokia, and Digia for all the work they
have done.


Ansel Sermersheim
CopperSpice Co-Founder
www.copperspice.com

From thiago.macieira at intel.com  Tue Jun 30 07:59:38 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Mon, 29 Jun 2015 22:59:38 -0700
Subject: [Development] Qt LTS & C++11 plans (CopperSpice)
In-Reply-To: <55922E5D.2000002@copperspice.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>
	<55922E5D.2000002@copperspice.com>
Message-ID: <5461189.7irWeyzXeX@tjmaciei-mobl4>

On Monday 29 June 2015 22:51:25 Ansel Sermersheim wrote:
> I would like to clarify, we did not use anything from the Woboq blog
> posting as others have speculated. We had moc removed from CopperSpice
> a year earlier than the release of this blog. We are also not
> associated with the Trinity Project.

Out of curiosity:

You've removed moc, but what's your replacement for rcc?

> We would like to encourage developers to attend CPPCon to learn about

Maybe Meeting C++ will get better luck. Most of the Qt developers live in
Europe. I encourage you to submit your session there.

By the way, you're also welcome to discuss your ideas in this mailing list.
We're not against new C++ techniques, but we want to support existing
deployments, so we have to be a little more pragmatic on our choices.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From ansel at copperspice.com  Tue Jun 30 08:34:12 2015
From: ansel at copperspice.com (Ansel Sermersheim)
Date: Mon, 29 Jun 2015 23:34:12 -0700
Subject: [Development] Qt LTS & C++11 plans (CopperSpice)
In-Reply-To: <5461189.7irWeyzXeX@tjmaciei-mobl4>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>	<CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>	<55922E5D.2000002@copperspice.com>
	<5461189.7irWeyzXeX@tjmaciei-mobl4>
Message-ID: <55923864.6040201@copperspice.com>

On 6/29/15 10:59 PM, Thiago Macieira wrote:
> On Monday 29 June 2015 22:51:25 Ansel Sermersheim wrote:
>> I would like to clarify, we did not use anything from the Woboq
>> blog posting as others have speculated. We had moc removed from
>> CopperSpice a year earlier than the release of this blog. We are
>> also not associated with the Trinity Project.
>
> Out of curiosity:
>
> You've removed moc, but what's your replacement for rcc?

I hope I understand your question correctly. By removing moc and not
using qmake, we were able to remove all the bootstrap code from
CsCore. This allowed us to build rcc simply linking with CsCore.

We did not see any reason to replace rcc at this time. Our goal was to
allow developers to use CopperSpice without altering their build systems.
Since the resource system is not mandatory we did not feel like an
alternative to rcc was required.

>> We would like to encourage developers to attend CPPCon to learn
>> about
>
> Maybe Meeting C++ will get better luck. Most of the Qt developers
> live in Europe. I encourage you to submit your session there.
>
> By the way, you're also welcome to discuss your ideas in this mailing
> list. We're not against new C++ techniques, but we want to support
> existing deployments, so we have to be a little more pragmatic on our
> choices.
>

Thank you for your warm welcome and encouragement.

Ansel Sermersheim
CopperSpice Co-Founder
www.copperspice.com

From suy at badopi.org  Tue Jun 30 08:37:56 2015
From: suy at badopi.org (Alejandro Exojo)
Date: Tue, 30 Jun 2015 08:37:56 +0200
Subject: [Development] Qt LTS & C++11 plans (CopperSpice)
In-Reply-To: <55922E5D.2000002@copperspice.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>
	<55922E5D.2000002@copperspice.com>
Message-ID: <201506300837.56451.suy@badopi.org>

El Tuesday 30 June 2015, Ansel Sermersheim escribi?:
> Our September release of CopperSpice will include changes to the
> contain library, reimplementation of atomic types, our new changes to
> the MetaObject System registration, full API documentation, ??
>
> We would like to encourage developers to attend CPPCon to learn about
> modern C++ and where it is going. For more information please check
> out the following video.
>
>          http://cppcon.org/2015promo/

Can you explain which are your long term plans? Given that you renamed all the
classes and modules (or so I understood), this is full source incompatible,
and it doesn't seem like you want to sync again with the original Qt
(applications might include a large file full of typedefs, but applying to
CopperSpice any bugfix patch found in Qt seems completely manual). Some
developers experiment with their own branches to research or have fun, which
is great, but seems like you are aiming to be a full new project.

--
Alex (a.k.a. suy) | GPG ID 0x0B8B0BC2
http://barnacity.net/ | http://disperso.net

From olivier at woboq.com  Tue Jun 30 18:16:34 2015
From: olivier at woboq.com (Olivier Goffart)
Date: Tue, 30 Jun 2015 18:16:34 +0200
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <3213503.bLTXNgj63D@tjmaciei-mobl4>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<3234614.pUVFgra0Ue@finn> <3213503.bLTXNgj63D@tjmaciei-mobl4>
Message-ID: <27090856.rR4S4ty5IF@finn>

On Friday 26. June 2015 08:41:11 Thiago Macieira wrote:
> On Friday 26 June 2015 11:59:11 Olivier Goffart wrote:
> > However, it is questionable if even this works. We already rely on the
> > standard library ABI in QException. And most users will have to recompile
> > everything if they want to change standard library anyway.
>
> std::exception is compatible between libc++ and libstdc++, so that doesn't
> count.

Ok.  (But by luck... another version might not)

Anyway, you did not answer the actual question. Are you against changing the
policy or not?


--
Olivier

Woboq - Qt services and support - http://woboq.com - http://code.woboq.org


From ansel at copperspice.com  Tue Jun 30 18:37:59 2015
From: ansel at copperspice.com (Ansel Sermersheim)
Date: Tue, 30 Jun 2015 09:37:59 -0700
Subject: [Development] Qt LTS & C++11 plans (CopperSpice)
In-Reply-To: <201506300837.56451.suy@badopi.org>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>	<CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>	<55922E5D.2000002@copperspice.com>
	<201506300837.56451.suy@badopi.org>
Message-ID: <5592C5E7.5040802@copperspice.com>

On 6/29/15 11:37 PM, Alejandro Exojo wrote:
> El Tuesday 30 June 2015, Ansel Sermersheim escribi?:
>> Our September release of CopperSpice will include changes to the
>> contain library, reimplementation of atomic types, our new changes
>>  to the MetaObject System registration, full API documentation, ??
>>
>> We would like to encourage developers to attend CPPCon to learn
>> about modern C++ and where it is going. For more information please
>> check out the following video.
>>
>> http://cppcon.org/2015promo/
>
> Can you explain which are your long term plans? Given that you
> renamed all the classes and modules (or so I understood), this is
> full source incompatible, and it doesn't seem like you want to sync
> again with the original Qt (applications might include a large file
> full of typedefs, but applying to CopperSpice any bugfix patch found
>  in Qt seems completely manual). Some developers experiment with
> their own branches to research or have fun, which is great, but
> seems like you are aiming to be a full new project.

We renamed the libraries to avoid naming conflicts with the Qt libraries
when CS and Qt are installed on the same system. We have not renamed the
classes, and our intention is to keep source compatibility as much as
possible. Some incompatible changes were unavoidable, particularly the
signal / slot declaration syntax.

Our goal with CopperSpice is to use modern C++ internally to leverage
everything we can from the language. We want developers of CopperSpice
applications to have the full power of C++ available in all parts of
their code. For example, with moc removed we support template classes
that inherit from QObject. We support passing method pointers as signal
arguments.

We would like to support multiple inheritance properly. We would like
the CsGui classes to work seamlessly with STL containers, and to add
things like reverse iterators to the CS container library to bring it in
line with the STL. We are going to fully support exceptions, and make
exception safety guarantees where possible. We are working on
redesigning the QObject lifetime model so that it works smoothly with
C++11 smart pointers.

These are some of the limitations that frustrated us when using Qt in an
existing codebase.

Thank you very much for your question,

Ansel Sermersheim
CopperSpice Co-Founder
www.copperspice.com

From thiago.macieira at intel.com  Tue Jun 30 22:01:49 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 30 Jun 2015 13:01:49 -0700
Subject: [Development] Qt LTS & C++11 plans (CopperSpice)
In-Reply-To: <5592C5E7.5040802@copperspice.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<201506300837.56451.suy@badopi.org>
	<5592C5E7.5040802@copperspice.com>
Message-ID: <2999741.O4hCMfd1rd@tjmaciei-mobl4>

On Tuesday 30 June 2015 09:37:59 Ansel Sermersheim wrote:
> Our goal with CopperSpice is to use modern C++ internally to leverage
> everything we can from the language. We want developers of CopperSpice
> applications to have the full power of C++ available in all parts of
> their code. For example, with moc removed we support template classes
> that inherit from QObject. We support passing method pointers as signal
> arguments.

You need to use -fvisibility-inlines-hidden and retry. I don't think your
solution works under those circumstances.

>  We are going to fully support exceptions, and make
> exception safety guarantees where possible.

Unless you're going to rewrite the entire GUI, widgets, networking and other
libraries from scratch, you're not going to get exception-safety.

> We are working on
> redesigning the QObject lifetime model so that it works smoothly with
> C++11 smart pointers.

I researched that 4 or 5 years ago and I found two problems:

First, you must either choose to use smart pointers everywhere or not at all.
You can't pick and choose, which is what caused most of the problems.

Second, and most importantly, all the QWidget-derived classes share state with
their parent widgets. You MUST delete the children when the parent is getting
deleted, which is incompatible with smart pointers. Like I said above for
exceptions, you'll need to redesign the entire stack to get support for smart
pointers here.

> These are some of the limitations that frustrated us when using Qt in an
> existing codebase.

You're making trade-offs. One of them, given your presentation, is that there's
no current version of MSVC that will work with your codebase. Another is that
you're replacing a code generator by a lot of boilerplate macros.

And, critically, like I mentioned above, is that I don't think your solution
works with -fvisibility-inlines-hidden, due to taking and comparing addresses
of inline functions.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From thiago.macieira at intel.com  Tue Jun 30 22:16:37 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 30 Jun 2015 13:16:37 -0700
Subject: [Development] Qt LTS & C++11 plans
In-Reply-To: <27090856.rR4S4ty5IF@finn>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<3213503.bLTXNgj63D@tjmaciei-mobl4> <27090856.rR4S4ty5IF@finn>
Message-ID: <2696079.97ALLhQnCk@tjmaciei-mobl4>

On Tuesday 30 June 2015 18:16:34 Olivier Goffart wrote:
> On Friday 26. June 2015 08:41:11 Thiago Macieira wrote:
> > On Friday 26 June 2015 11:59:11 Olivier Goffart wrote:
> > > However, it is questionable if even this works. We already rely on the
> > > standard library ABI in QException. And most users will have to
> > > recompile
> > > everything if they want to change standard library anyway.
> >
> > std::exception is compatible between libc++ and libstdc++, so that doesn't
> > count.
>
> Ok.  (But by luck... another version might not)

s/luck/design/

> Anyway, you did not answer the actual question. Are you against changing the
> policy or not?

I am, for several reasons.

For the container types, please use the Qt ones, for API consistency and
familiarity. I don't want to see API using std::vector, period.

Since we're talking about *ABI*, it stands to reason we're talking about
mandatory features, so outside of any #ifdefs that may change between Qt's
build and the user application's. That means any such feature depending on a
C++11 library feature should be protected by a configure-time check and a
#define in qconfig.h. Given our horrible configure script and configure.exe source
code, writing such checks are difficult and time-consuming. More likely than
not, we'll get it wrong.

And finally, I am against it because libc++ and libstdc++ co-existence is still
a goal, even on OS X.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From private at bernhard-lindner.de  Tue Jun 30 22:37:24 2015
From: private at bernhard-lindner.de (Bernhard)
Date: Tue, 30 Jun 2015 22:37:24 +0200
Subject: [Development] Qt LTS & C++11 plans (CopperSpice)
In-Reply-To: <5592C5E7.5040802@copperspice.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>	<CA+u+m-Ju8Vw2Q98L--LH2gtUhzENzrccP9BPSXsB715S35HQ_g@mail.gmail.com>	<55922E5D.2000002@copperspice.com>	<201506300837.56451.suy@badopi.org>
	<5592C5E7.5040802@copperspice.com>
Message-ID: <009d01d0b374$92642800$b72c7800$@bernhard-lindner.de>

> For example, with moc removed we support template classes that inherit
> from QObject.

Wow. I would (almost) kill for having that feature in Qt!

--
Regards
Bernhard Lindner



From thiago.macieira at intel.com  Tue Jun 30 23:09:07 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 30 Jun 2015 14:09:07 -0700
Subject: [Development] [Releasing] Non C++11 compilers
In-Reply-To: <trinity-569fc106-8619-4e52-99ef-d69d4e49f1eb-1435697851681@3capp-mailcom-lxa12>
References: <trinity-569fc106-8619-4e52-99ef-d69d4e49f1eb-1435697851681@3capp-mailcom-lxa12>
Message-ID: <1772748.vADsPMbQTe@tjmaciei-mobl4>

On Tuesday 30 June 2015 22:57:32 Jason H wrote:
> I was perusing the archive of this list so I would know what to expect
> tomorrow and saw that there was a suggestion to drop non C++11 compilers.

Hello Jason

Your discussion is better held in the developer mailing list. I'm Cc'ing it.
Please drop the releasing mailing list when replying.

> As a former embedded developer, I have to be concerned about that. A number
> of legacy software projects in the embedded space have ancient compilers in
> the BSP (board support packages). The project I was formerly a part of had
> code from 1992, released in 1994 on a 68000, and had been ported through
> the years to various AMX-ish RTOSes. The code base is still alive and well,
> having been ported to a PPC 832e and now later PPC chip. I had been working
> on modernizing the code base to eventually port the GUI to Qt. This project
> has seen exactly 2 changes to the compilers in the 20 years it's been on
> the market. Both Metrowerks (Now Freescale).

Do they use Qt 5.4 right now? When are they considering upgrading to Qt 5.7?

> While it may not be 'cool' or 'hip' I'd caution against the dropping of non
> C++11 compilers. These legacy systems are still out there. I don't know how
> anecdotal my experience is of other projects, but it was a $8B USD company.
> I know these systems aren't that sexy when a TI ARM7 has a GPU on it, and
> can be had for dollars, but I think plenty are out there.

That boat has sailed. We will adopt C++11 in 2016.

> Meanwhile.... I've never used any C++11 feature, or typed any line of C++11
> code. I personally am against the idea of C++11, as it fractures the code
> base of C++ into C++98 and C++11. I use Qt because it compiles everywhere
> and gets me past the limitations of C++98 in an easy way. I won't be able
> to do that if Qt drops C++98 support.
>
> So in summary, I think dropping C++98-only compilers will significantly
> detract from Qt features in unanticipated ways.

We've considered all of that. We don't agree with your assessment.

Of the compilers we support right now, only MSVC 2008 and 2010 have limited
C++11 support. We'll also drop a few releases of GCC, all of them more than 5
years old by the time of the Qt 5.7 release. So we're talking about dropping
those compilers only, after an LTS release.

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


From cristian.adam at gmail.com  Tue Jun 30 23:09:59 2015
From: cristian.adam at gmail.com (Cristian Adam)
Date: Tue, 30 Jun 2015 23:09:59 +0200
Subject: [Development] Qt LTS & C++11 plans (CopperSpice)
In-Reply-To: <2999741.O4hCMfd1rd@tjmaciei-mobl4>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<201506300837.56451.suy@badopi.org>
	<5592C5E7.5040802@copperspice.com>
	<2999741.O4hCMfd1rd@tjmaciei-mobl4>
Message-ID: <CA+u+m-+t__7faFOKGb8i7dkL9q=3Brjs4vFuRnASmFK54JbU+w@mail.gmail.com>

On Tue, Jun 30, 2015 at 10:01 PM, Thiago Macieira <thiago.macieira at intel.com
> wrote:

>
> You're making trade-offs. One of them, given your presentation, is that
> there's
> no current version of MSVC that will work with your codebase. Another is
> that
> you're replacing a code generator by a lot of boilerplate macros.
>
>
Visual Studio 2015 will have constexpr fixed [1] and it should compile
CopperSpice.

The replacement of qmake with autotools in CopperSpice makes things very
hard to
test with Visual Studio. It seems CMake is being under evaluation [2].

The combination of CMake and ninja is quite effective.

Cheers,
Cristian.


[1]
http://blogs.msdn.com/b/vcblog/archive/2015/04/29/c-11-14-17-features-in-vs-2015-rc.aspx
[2] http://forum.copperspice.com/viewtopic.php?f=10&t=7
-------------- next part --------------
An HTML attachment was scrubbed...
URL: http://lists.qt-project.org/pipermail/development/attachments/20150630/61ace629/attachment.html

From thiago.macieira at intel.com  Tue Jun 30 23:18:09 2015
From: thiago.macieira at intel.com (Thiago Macieira)
Date: Tue, 30 Jun 2015 14:18:09 -0700
Subject: [Development] Qt LTS & C++11 plans (CopperSpice)
In-Reply-To: <CA+u+m-+t__7faFOKGb8i7dkL9q=3Brjs4vFuRnASmFK54JbU+w@mail.gmail.com>
References: <D1AEFEE0.33527%lars.knoll@theqtcompany.com>
	<2999741.O4hCMfd1rd@tjmaciei-mobl4>
	<CA+u+m-+t__7faFOKGb8i7dkL9q=3Brjs4vFuRnASmFK54JbU+w@mail.gmail.com>
Message-ID: <2742350.0flMrbGH6L@tjmaciei-mobl4>

On Tuesday 30 June 2015 23:09:59 Cristian Adam wrote:
> On Tue, Jun 30, 2015 at 10:01 PM, Thiago Macieira <thiago.macieira at intel.com
> > wrote:
> >
> >
> > You're making trade-offs. One of them, given your presentation, is that
> > there's
> > no current version of MSVC that will work with your codebase. Another is
> > that
> > you're replacing a code generator by a lot of boilerplate macros.
>
> Visual Studio 2015 will have constexpr fixed [1] and it should compile
> CopperSpice.

It's still not working in MSVC 2015 RC1. I'd be wary of relying on RTM fixing
it if it's still not fixed yet.

> The replacement of qmake with autotools in CopperSpice makes things very
> hard to
> test with Visual Studio. It seems CMake is being under evaluation [2].
>
> The combination of CMake and ninja is quite effective.

Autotools is backwards direction. Everyone moves *away* from Autotools, not
towards it (except people who had no buildsystem in the first place).

--
Thiago Macieira - thiago.macieira (AT) intel.com
  Software Architect - Intel Open Source Technology Center


